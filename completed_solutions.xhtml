<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" class="dark scrolling"><head><style type="text/css">.turbolinks-progress-bar {
  position: fixed;
  display: block;
  top: 0;
  left: 0;
  height: 3px;
  background: #0076ff;
  z-index: 9999;
  transition: width 300ms ease-out, opacity 150ms 150ms ease-in;
  transform: translate3d(0, 0, 0);
}</style><style type="text/css">.swal-icon--error{border-color:#f27474;-webkit-animation:animateErrorIcon .5s;animation:animateErrorIcon .5s}.swal-icon--error__x-mark{position:relative;display:block;-webkit-animation:animateXMark .5s;animation:animateXMark .5s}.swal-icon--error__line{position:absolute;height:5px;width:47px;background-color:#f27474;display:block;top:37px;border-radius:2px}.swal-icon--error__line--left{-webkit-transform:rotate(45deg);transform:rotate(45deg);left:17px}.swal-icon--error__line--right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg);right:16px}@-webkit-keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}@keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}.swal-icon--warning{border-color:#f8bb86;-webkit-animation:pulseWarning .75s infinite alternate;animation:pulseWarning .75s infinite alternate}.swal-icon--warning__body{width:5px;height:47px;top:10px;border-radius:2px;margin-left:-2px}.swal-icon--warning__body,.swal-icon--warning__dot{position:absolute;left:50%;background-color:#f8bb86}.swal-icon--warning__dot{width:7px;height:7px;border-radius:50%;margin-left:-4px;bottom:-11px}@-webkit-keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}@keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}.swal-icon--success{border-color:#a5dc86}.swal-icon--success:after,.swal-icon--success:before{content:"";border-radius:50%;position:absolute;width:60px;height:120px;background:#fff;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal-icon--success:before{border-radius:120px 0 0 120px;top:-7px;left:-33px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:60px 60px;transform-origin:60px 60px}.swal-icon--success:after{border-radius:0 120px 120px 0;top:-11px;left:30px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 60px;transform-origin:0 60px;-webkit-animation:rotatePlaceholder 4.25s ease-in;animation:rotatePlaceholder 4.25s ease-in}.swal-icon--success__ring{width:80px;height:80px;border:4px solid hsla(98,55%,69%,.2);border-radius:50%;box-sizing:content-box;position:absolute;left:-4px;top:-4px;z-index:2}.swal-icon--success__hide-corners{width:5px;height:90px;background-color:#fff;padding:1px;position:absolute;left:28px;top:8px;z-index:1;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal-icon--success__line{height:5px;background-color:#a5dc86;display:block;border-radius:2px;position:absolute;z-index:2}.swal-icon--success__line--tip{width:25px;left:14px;top:46px;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-animation:animateSuccessTip .75s;animation:animateSuccessTip .75s}.swal-icon--success__line--long{width:47px;right:8px;top:38px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-animation:animateSuccessLong .75s;animation:animateSuccessLong .75s}@-webkit-keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}.swal-icon--info{border-color:#c9dae1}.swal-icon--info:before{width:5px;height:29px;bottom:17px;border-radius:2px;margin-left:-2px}.swal-icon--info:after,.swal-icon--info:before{content:"";position:absolute;left:50%;background-color:#c9dae1}.swal-icon--info:after{width:7px;height:7px;border-radius:50%;margin-left:-3px;top:19px}.swal-icon{width:80px;height:80px;border-width:4px;border-style:solid;border-radius:50%;padding:0;position:relative;box-sizing:content-box;margin:20px auto}.swal-icon:first-child{margin-top:32px}.swal-icon--custom{width:auto;height:auto;max-width:100%;border:none;border-radius:0}.swal-icon img{max-width:100%;max-height:100%}.swal-title{color:rgba(0,0,0,.65);font-weight:600;text-transform:none;position:relative;display:block;padding:13px 16px;font-size:27px;line-height:normal;text-align:center;margin-bottom:0}.swal-title:first-child{margin-top:26px}.swal-title:not(:first-child){padding-bottom:0}.swal-title:not(:last-child){margin-bottom:13px}.swal-text{font-size:16px;position:relative;float:none;line-height:normal;vertical-align:top;text-align:left;display:inline-block;margin:0;padding:0 10px;font-weight:400;color:rgba(0,0,0,.64);max-width:calc(100% - 20px);overflow-wrap:break-word;box-sizing:border-box}.swal-text:first-child{margin-top:45px}.swal-text:last-child{margin-bottom:45px}.swal-footer{text-align:right;padding-top:13px;margin-top:13px;padding:13px 16px;border-radius:inherit;border-top-left-radius:0;border-top-right-radius:0}.swal-button-container{margin:5px;display:inline-block;position:relative}.swal-button{background-color:#7cd1f9;color:#fff;border:none;box-shadow:none;border-radius:5px;font-weight:600;font-size:14px;padding:10px 24px;margin:0;cursor:pointer}.swal-button:not([disabled]):hover{background-color:#78cbf2}.swal-button:active{background-color:#70bce0}.swal-button:focus{outline:none;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(43,114,165,.29)}.swal-button[disabled]{opacity:.5;cursor:default}.swal-button::-moz-focus-inner{border:0}.swal-button--cancel{color:#555;background-color:#efefef}.swal-button--cancel:not([disabled]):hover{background-color:#e8e8e8}.swal-button--cancel:active{background-color:#d7d7d7}.swal-button--cancel:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(116,136,150,.29)}.swal-button--danger{background-color:#e64942}.swal-button--danger:not([disabled]):hover{background-color:#df4740}.swal-button--danger:active{background-color:#cf423b}.swal-button--danger:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(165,43,43,.29)}.swal-content{padding:0 20px;margin-top:20px;font-size:medium}.swal-content:last-child{margin-bottom:20px}.swal-content__input,.swal-content__textarea{-webkit-appearance:none;background-color:#fff;border:none;font-size:14px;display:block;box-sizing:border-box;width:100%;border:1px solid rgba(0,0,0,.14);padding:10px 13px;border-radius:2px;transition:border-color .2s}.swal-content__input:focus,.swal-content__textarea:focus{outline:none;border-color:#6db8ff}.swal-content__textarea{resize:vertical}.swal-button--loading{color:transparent}.swal-button--loading~.swal-button__loader{opacity:1}.swal-button__loader{position:absolute;height:auto;width:43px;z-index:2;left:50%;top:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);text-align:center;pointer-events:none;opacity:0}.swal-button__loader div{display:inline-block;float:none;vertical-align:baseline;width:9px;height:9px;padding:0;border:none;margin:2px;opacity:.4;border-radius:7px;background-color:hsla(0,0%,100%,.9);transition:background .2s;-webkit-animation:swal-loading-anim 1s infinite;animation:swal-loading-anim 1s infinite}.swal-button__loader div:nth-child(3n+2){-webkit-animation-delay:.15s;animation-delay:.15s}.swal-button__loader div:nth-child(3n+3){-webkit-animation-delay:.3s;animation-delay:.3s}@-webkit-keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}@keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}.swal-overlay{position:fixed;top:0;bottom:0;left:0;right:0;text-align:center;font-size:0;overflow-y:auto;background-color:rgba(0,0,0,.4);z-index:10000;pointer-events:none;opacity:0;transition:opacity .3s}.swal-overlay:before{content:" ";display:inline-block;vertical-align:middle;height:100%}.swal-overlay--show-modal{opacity:1;pointer-events:auto}.swal-overlay--show-modal .swal-modal{opacity:1;pointer-events:auto;box-sizing:border-box;-webkit-animation:showSweetAlert .3s;animation:showSweetAlert .3s;will-change:transform}.swal-modal{width:478px;opacity:0;pointer-events:none;background-color:#fff;text-align:center;border-radius:5px;position:static;margin:20px auto;display:inline-block;vertical-align:middle;-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;z-index:10001;transition:opacity .2s,-webkit-transform .3s;transition:transform .3s,opacity .2s;transition:transform .3s,opacity .2s,-webkit-transform .3s}@media (max-width:500px){.swal-modal{width:calc(100% - 20px)}}@-webkit-keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}</style>
<script type="text/javascript" async="" src="https://widget.intercom.io/widget/x27gw54w"></script><script src="https://js-agent.newrelic.com/nr-1210.min.js"></script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZRUxYJVVtURVVOW1ldUEo=","queueTime":0,"applicationTime":270,"agent":""}</script>
<script>(window.NREUM||(NREUM={})).loader_config={licenseKey:"364dba19a3",applicationID:"15446117"};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var i=e[n]={exports:{}};t[n][0].call(i.exports,function(e){var i=t[n][1][e];return r(i||e)},i,i.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i&lt;n.length;i++)r(n[i]);return r}({1:[function(t,e,n){function r(){}function i(t,e,n){return function(){return o(t,[u.now()].concat(f(arguments)),e?null:this,n),e?void 0:this}}var o=t("handle"),a=t(8),f=t(9),c=t("ee").get("tracer"),u=t("loader"),s=NREUM;"undefined"==typeof window.newrelic&amp;&amp;(newrelic=s);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",l=p+"ixn-";a(d,function(t,e){s[e]=i(p+e,!0,"api")}),s.addPageAction=i(p+"addPageAction",!0),s.setCurrentRouteName=i(p+"routeName",!0),e.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(t,e){var n={},r=this,i="function"==typeof e;return o(l+"tracer",[u.now(),t,n],r),function(){if(c.emit((i?"":"no-")+"fn-start",[u.now(),r,i],n),i)try{return e.apply(this,arguments)}catch(t){throw c.emit("fn-err",[arguments,this,t],n),t}finally{c.emit("fn-end",[u.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){m[e]=i(l+e)}),newrelic.noticeError=function(t,e){"string"==typeof t&amp;&amp;(t=new Error(t)),o("err",[t,u.now(),!1,e])}},{}],2:[function(t,e,n){function r(t){if(NREUM.init){for(var e=NREUM.init,n=t.split("."),r=0;r&lt;n.length-1;r++)if(e=e[n[r]],"object"!=typeof e)return;return e=e[n[n.length-1]]}}e.exports={getConfiguration:r}},{}],3:[function(t,e,n){function r(){return f.exists&amp;&amp;performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,f=t(10);e.exports=r,e.exports.offset=a,e.exports.getLastTimestamp=i},{}],4:[function(t,e,n){function r(t){return!(!t||!t.protocol||"file:"===t.protocol)}e.exports=r},{}],5:[function(t,e,n){function r(t,e){var n=t.getEntries();n.forEach(function(t){"first-paint"===t.name?d("timing",["fp",Math.floor(t.startTime)]):"first-contentful-paint"===t.name&amp;&amp;d("timing",["fcp",Math.floor(t.startTime)])})}function i(t,e){var n=t.getEntries();n.length&gt;0&amp;&amp;d("lcp",[n[n.length-1]])}function o(t){t.getEntries().forEach(function(t){t.hadRecentInput||d("cls",[t])})}function a(t){if(t instanceof m&amp;&amp;!g){var e=Math.round(t.timeStamp),n={type:t.type};e&lt;=p.now()?n.fid=p.now()-e:e&gt;p.offset&amp;&amp;e&lt;=Date.now()?(e-=p.offset,n.fid=p.now()-e):e=p.now(),g=!0,d("timing",["fi",e,n])}}function f(t){"hidden"===t&amp;&amp;d("pageHide",[p.now()])}if(!("init"in NREUM&amp;&amp;"page_view_timing"in NREUM.init&amp;&amp;"enabled"in NREUM.init.page_view_timing&amp;&amp;NREUM.init.page_view_timing.enabled===!1)){var c,u,s,d=t("handle"),p=t("loader"),l=t(7),m=NREUM.o.EV;if("PerformanceObserver"in window&amp;&amp;"function"==typeof window.PerformanceObserver){c=new PerformanceObserver(r);try{c.observe({entryTypes:["paint"]})}catch(v){}u=new PerformanceObserver(i);try{u.observe({entryTypes:["largest-contentful-paint"]})}catch(v){}s=new PerformanceObserver(o);try{s.observe({type:"layout-shift",buffered:!0})}catch(v){}}if("addEventListener"in document){var g=!1,h=["click","keydown","mousedown","pointerdown","touchstart"];h.forEach(function(t){document.addEventListener(t,a,!1)})}l(f)}},{}],6:[function(t,e,n){function r(t,e){if(!i)return!1;if(t!==i)return!1;if(!e)return!0;if(!o)return!1;for(var n=o.split("."),r=e.split("."),a=0;a&lt;r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var f=navigator.userAgent,c=f.match(a);c&amp;&amp;f.indexOf("Chrome")===-1&amp;&amp;f.indexOf("Chromium")===-1&amp;&amp;(i="Safari",o=c[1])}e.exports={agent:i,version:o,match:r}},{}],7:[function(t,e,n){function r(t){function e(){t(a&amp;&amp;document[a]?document[a]:document[i]?"hidden":"visible")}"addEventListener"in document&amp;&amp;o&amp;&amp;document.addEventListener(o,e,!1)}e.exports=r;var i,o,a;"undefined"!=typeof document.hidden?(i="hidden",o="visibilitychange",a="visibilityState"):"undefined"!=typeof document.msHidden?(i="msHidden",o="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&amp;&amp;(i="webkitHidden",o="webkitvisibilitychange",a="webkitVisibilityState")},{}],8:[function(t,e,n){function r(t,e){var n=[],r="",o=0;for(r in t)i.call(t,r)&amp;&amp;(n[o]=e(r,t[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],9:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&amp;&amp;(n=t?t.length:0);for(var r=-1,i=n-e||0,o=Array(i&lt;0?0:i);++r&lt;i;)o[r]=t[e+r];return o}e.exports=r},{}],10:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&amp;&amp;window.performance.timing&amp;&amp;"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(t,e,n){function r(){}function i(t){function e(t){return t&amp;&amp;t instanceof r?t:t?u(t,c,a):a()}function n(n,r,i,o,a){if(a!==!1&amp;&amp;(a=!0),!l.aborted||o){t&amp;&amp;a&amp;&amp;t(n,r,i);for(var f=e(i),c=v(n),u=c.length,s=0;s&lt;u;s++)c[s].apply(f,r);var p=d[w[n]];return p&amp;&amp;p.push([b,n,r,f]),f}}function o(t,e){y[t]=v(t).concat(e)}function m(t,e){var n=y[t];if(n)for(var r=0;r&lt;n.length;r++)n[r]===e&amp;&amp;n.splice(r,1)}function v(t){return y[t]||[]}function g(t){return p[t]=p[t]||i(n)}function h(t,e){l.aborted||s(t,function(t,n){e=e||"feature",w[n]=e,e in d||(d[e]=[])})}var y={},w={},b={on:o,addEventListener:o,removeEventListener:m,emit:n,get:g,listeners:v,context:e,buffer:h,abort:f,aborted:!1};return b}function o(t){return u(t,c,a)}function a(){return new r}function f(){(d.api||d.feature)&amp;&amp;(l.aborted=!0,d=l.backlog={})}var c="nr@context",u=t("gos"),s=t(8),d={},p={},l=e.exports=i();e.exports.getOrSetContext=o,l.backlog=d},{}],gos:[function(t,e,n){function r(t,e,n){if(i.call(t,e))return t[e];var r=n();if(Object.defineProperty&amp;&amp;Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return t[e]=r,r}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){i.buffer([t],r),i.emit(t,e,n)}var i=t("ee").get("handle");e.exports=r,r.ee=i},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&amp;&amp;"function"!==e?-1:t===window?0:a(t,o,function(){return i++})}var i=1,o="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!R++){var t=M.info=NREUM.info,e=v.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&amp;&amp;t.licenseKey&amp;&amp;t.applicationID&amp;&amp;e))return u.abort();c(E,function(e,n){t[e]||(t[e]=n)});var n=a();f("mark",["onload",n+M.offset],null,"api"),f("timing",["load",n]);var r=v.createElement("script");0===t.agent.indexOf("http://")||0===t.agent.indexOf("https://")?r.src=t.agent:r.src=l+"://"+t.agent,e.parentNode.insertBefore(r,e)}}function i(){"complete"===v.readyState&amp;&amp;o()}function o(){f("mark",["domContent",a()+M.offset],null,"api")}var a=t(3),f=t("handle"),c=t(8),u=t("ee"),s=t(6),d=t(4),p=t(2),l=p.getConfiguration("ssl")===!1?"http":"https",m=window,v=m.document,g="addEventListener",h="attachEvent",y=m.XMLHttpRequest,w=y&amp;&amp;y.prototype,b=!d(m.location);NREUM.o={ST:setTimeout,SI:m.setImmediate,CT:clearTimeout,XHR:y,REQ:m.Request,EV:m.Event,PR:m.Promise,MO:m.MutationObserver};var x=""+location,E={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1210.min.js"},O=y&amp;&amp;w&amp;&amp;w[g]&amp;&amp;!/CriOS/.test(navigator.userAgent),M=e.exports={offset:a.getLastTimestamp(),now:a,origin:x,features:{},xhrWrappable:O,userAgent:s,disabled:b};if(!b){t(1),t(5),v[g]?(v[g]("DOMContentLoaded",o,!1),m[g]("load",r,!1)):(v[h]("onreadystatechange",i),m[h]("onload",r)),f("mark",["firstbyte",a.getLastTimestamp()],null,"api");var R=0}},{}],"wrap-function":[function(t,e,n){function r(t,e){function n(e,n,r,c,u){function nrWrapper(){var o,a,s,p;try{a=this,o=d(arguments),s="function"==typeof r?r(o,a):r||{}}catch(l){i([l,"",[o,a,c],s],t)}f(n+"start",[o,a,c],s,u);try{return p=e.apply(a,o)}catch(m){throw f(n+"err",[o,a,m],s,u),m}finally{f(n+"end",[o,a,p],s,u)}}return a(e)?e:(n||(n=""),nrWrapper[p]=e,o(e,nrWrapper,t),nrWrapper)}function r(t,e,r,i,o){r||(r="");var f,c,u,s="-"===r.charAt(0);for(u=0;u&lt;e.length;u++)c=e[u],f=t[c],a(f)||(t[c]=n(f,s?c+r:r,i,c,o))}function f(n,r,o,a){if(!m||e){var f=m;m=!0;try{t.emit(n,r,o,e,a)}catch(c){i([c,n,r,o],t)}m=f}}return t||(t=s),n.inPlace=r,n.flag=p,n}function i(t,e){e||(e=s);try{e.emit("internal-error",t)}catch(n){}}function o(t,e,n){if(Object.defineProperty&amp;&amp;Object.keys)try{var r=Object.keys(t);return r.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(o){i([o],n)}for(var a in t)l.call(t,a)&amp;&amp;(e[a]=t[a]);return e}function a(t){return!(t&amp;&amp;t instanceof Function&amp;&amp;t.apply&amp;&amp;!t[p])}function f(t,e){var n=e(t);return n[p]=t,o(t,n,s),n}function c(t,e,n){var r=t[e];t[e]=f(r,n)}function u(){for(var t=arguments.length,e=new Array(t),n=0;n&lt;t;++n)e[n]=arguments[n];return e}var s=t("ee"),d=t(9),p="nr@original",l=Object.prototype.hasOwnProperty,m=!1;e.exports=r,e.exports.wrapFunction=f,e.exports.wrapInPlace=c,e.exports.argsToArray=u},{}]},{},["loader"]);</script>
<link href="https://fonts.googleapis.com/css?family=Lato&amp;display=swap" media="screen" rel="stylesheet" /><link rel="stylesheet" media="screen" href="/packs/css/application-b65df563.css" data-turbolinks-track="reload" /><script src="/packs/js/runtime-34f28cb0c410ee15ff4d.js" defer="defer" data-turbolinks-track="reload"></script>
<script src="/packs/js/32-bda2bf887ae2d2d80b0e.js" defer="defer" data-turbolinks-track="reload"></script>
<script src="/packs/js/application-c31ed577c83bf389e068.js" defer="defer" data-turbolinks-track="reload"></script><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-M3JYSQLS8M"></script><script>window.dataLayer = window.dataLayer || [];
function gtag() { dataLayer.push(arguments); }
gtag('js', new Date());
gtag('config', 'G-M3JYSQLS8M', {
  send_page_view: false
});</script><script>(function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + 'x27gw54w';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();</script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZAQQATRBtGX14W","queueTime":0,"applicationTime":146,"agent":""}</script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZAQQATRBtGX14W","queueTime":0,"applicationTime":140,"agent":""}</script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZAQQATRBtGX14W","queueTime":0,"applicationTime":833,"agent":""}</script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZAQQATRBtGX14W","queueTime":0,"applicationTime":298,"agent":""}</script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZAQQATRBtGX14W","queueTime":0,"applicationTime":229,"agent":""}</script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZAQQATRBtGX14W","queueTime":0,"applicationTime":799,"agent":""}</script><meta charset="utf-8" /><title>ByteEater | Codewars</title><meta name="csrf-param" content="authenticity_token" /><meta name="csrf-token" content="R8G8jTJmpYVifnp9swIgrqOPeW/D0r8hXWg52Cvk4MLednEe+Snc87zsrhdyuy1as4R/cR6eHYVVX8S3ef3f3g==" /><meta content="no-preview" name="turbolinks-cache-control" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta property="og:title" /><meta content="website" property="og:type" /><meta content="Codewars" property="og:site_name" /><meta content="https://www.codewars.com" property="og:url" /><meta content="https://www.codewars.com/assets/logos/logo-square-paper-bg-c3d2b1eb4fb35d75b0c0c0e3b74616fab527afdce9d1d3184624cf0b4e950357.jpg" property="og:image" /><meta content="https://www.codewars.com/assets/logos/logo-square-paper-bg-c3d2b1eb4fb35d75b0c0c0e3b74616fab527afdce9d1d3184624cf0b4e950357.jpg" property="og:image:secure_url" /><meta content="Codewars is where developers achieve code mastery through challenge. Train on kata in the dojo and reach your highest potential." property="og:description" /><meta content="652826666" property="fb:admins" /><meta content="110951985735625" property="fb:app_id" /><meta content="@codewars" name="twitter:site" /><meta content="Codewars is where developers achieve code mastery through challenge. Train on kata in the dojo and reach your highest potential." name="description" /><meta content="codewars, code kata, kata, code gym, coding, code practice, ruby, javascript, coffeescript, web development, software development, dojo" name="keywords" /><meta content="EMv3k6eCCUuSkbwJpGlLbtsBd_lCvmvDp1Ucsv0rIvM" name="google-site-verification" /></head><body class="show_view   logged-in" id="users"><div id="app"><div class="w-full" id="shell"><div class="sidenav-nubbin block md:hidden"><i class="icon-moon-list "></i></div><nav id="sidenav"><ul class="top"><li class="leading-relaxed nav-home"><a class="inline-flex items-center" href="/dashboard"><div class="logo mt-3 flex-shrink-0"><img class="w-full h-full" src="/assets/logos/logo-61192cf7c75904d495e7ad69695fbf0bffd965bc3e17ac60f6c6b475304db09d.svg" /></div><span class="mt-10px ml-2.5">Dashboard</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="/kata/latest/my-languages"><div class="my-0.5"><svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></svg></div><span class="ml-4">Kata</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="https://docs.codewars.com" target="_blank" title="The Codewars Docs"><div class="my-0.5"><svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></svg></div><span class="ml-4">Docs</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="https://blog.codewars.com" target="_blank" title="The Codewars Blog"><div class="my-0.5"><svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M6 5c7.18 0 13 5.82 13 13M6 11a7 7 0 017 7m-6 0a1 1 0 11-2 0 1 1 0 012 0z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></svg></div><span class="ml-4">Blog</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="/kumite"><div class="my-0.5"><svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-6 h-6 inline-block" fill="none" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none" stroke="none"/><path d="M4 12v-3a3 3 0 0 1 3 -3h13m-3 -3l3 3l-3 3"/><path d="M20 12v3a3 3 0 0 1 -3 3h-13m3 3l-3 -3l3 -3"/></svg></div><span class="ml-4">Kumite</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="/topics"><div class="my-0.5"><svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></svg></div><span class="ml-4">Forum</span></a></li></ul><ul class="bottom"><li class="leading-relaxed nav-leaders"><a class="inline-flex items-center" href="/users/leaderboard" title="Leaders"><div class="my-0.5"><svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></svg></div><span class="ml-4">Leaders</span></a></li></ul></nav><header class="main is-visible" id="main_header"><ul class="items"><li class="item-list"><a class="js-toggle-dark-mode w-6"><svg xmlns="http://www.w3.org/2000/svg" class="block dark:hidden" fill="currentColor" viewBox="0 0 20 20"><path clip-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd"/></svg><svg xmlns="http://www.w3.org/2000/svg" class="hidden dark:block" fill="currentColor" viewBox="0 0 20 20"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"/></svg></a></li><li class="item-list stars-item has-menu static"><a><i class="icon-moon-bookmark text-2xl"></i></a><div class="menu has-auto-scrolling right-0 shadow-lg"><div class="menu-body" style="max-height: 299px;"><ul class="divide-y space-y"><li><a><div>You have not starred any kata</div><div>To add some, just click the<span class="is-link ml-5px"><i class="icon-moon-star-empty is-small"></i></span>next to any kata title.</div></a></li></ul></div></div></li><li class="notifications-item has-menu static" id="notifications_drawer"><a><i class="icon-moon-bell text-2xl"></i></a><div class="menu right-0 shadow-lg"><div class="menu-body" style="max-height: 299px;"><ul><li><a>You do not have any notifications</a></li></ul></div></div></li><li class="profile-item min-w-60px sm:min-w-130px has-menu mr-0 text-sm"><a href="/users/ByteEater" id="header_profile_link"><div class="profile-pic mr-0"><img title="" src="/assets/profile-pic-f3a90acafe5c6158424ce6f242a17499e2b65fb6ba2ba27d7b775ed62e2ee949.png" /></div><div class="profile-points hidden sm:block ml-4"><div class="small-hex is-extra-wide is-invertable is-blue-rank"><div class="inner-small-hex is-extra-wide "><span>3 kyu</span></div></div><div class="ml-10px is-inline" data-rt="5813b6eb56b21b05d30005e9:honor">1,437</div></div></a><div class="menu shadow-lg"><div class="menu-body" style="max-height: 299px;"><ul><li><a href="/users/ByteEater"><i class="icon-moon-user "></i>View Profile</a></li><li class="border-t"><a href="/users/edit"><i class="icon-moon-settings "></i>Account Settings</a></li><li><a href="/trainer/setup"><i class="icon-moon-settings "></i>Training Setup</a></li><li class="border-t"><a data-turbolinks="false" href="/subscription"><i class="icon-moon-red-badge is-red-text"></i>Upgrade to Red</a></li><li class="border-t"><a data-turbolinks="false" href="/kata/new"><i class="icon-moon-begin "></i>New Kata</a></li><li><a href="/kumite/new"><i class="icon-moon-begin "></i>New Kumite</a></li><li class="border-t"><a class="js-sign-out"><i class="icon-moon-power "></i>Sign out</a></li></ul></div></div></li></ul></header><main id="shell_content" role="main"><div class="is-hidden" id="global_alerts"><div class="alert-box"></div></div><div id="flash"></div><div class="w-256 max-w-full mx-auto my-0 px-0"><section class="user-profile mb-0"><div class="w-full px-0"><figure class="profile-pic hidden md:block"><a href="/users/ByteEater"><img title="ByteEater" data-tippy-content="ByteEater" data-tippy-placement="bottom" src="/assets/profile-pic-f3a90acafe5c6158424ce6f242a17499e2b65fb6ba2ba27d7b775ed62e2ee949.png" /></a></figure><div><div class="relative"><a href="/users/ByteEater"><img class="inline-block" src="/users/ByteEater/badges/large?logo=false" /></a></div><div class="flex-box"><div class="stat-box mt-1 mb-1 md:mb-0"><div class="stat"><b>Name:</b>Unknown</div><div class="stat"><b>Clan:</b>Unknown</div></div><div class="stat-box mt-1 mb-1 md:mb-0"><div class="stat"><b>Member Since:</b>Oct 2016</div><div class="stat"><b>Last Seen:</b>Sep 2021</div><div class="stat"><b>Profiles:</b><ul class="is-inline"></ul></div></div><div class="stat-box mt-1 mb-1 md:mb-0"><div class="stat"><b>Following:</b>1</div><div class="stat"><b>Followers:</b>2</div><div class="stat"><b>Allies:</b>1</div></div></div><div class="mx-auto md:w-10/12 md:px-2"><div class="flex-buttons mt-4 mb-2"><div class="flex-button"><a class="btn is-dark is-tiny" href="/users/ByteEater/badges">View Profile Badges</a></div></div></div><div class="clearfix"></div></div></div></section></div><div class="w-256 max-w-full mx-auto my-4"><div class="flex flex-col md:flex-row"><div class="w-full md:w-6/12"><div class="panel marketing bg-bgray-200 dark:bg-cgray-700" id="referral"><figure><i class="icon-moon-share "></i></figure><figcaption><h5 class="text-ui-text-hc mb-0">Earn extra honor and gain new allies!</h5><div>Honor is earned for each new codewarrior who joins.</div><a class="btn is-dark mt-15px" id="tell_me_more_referrals">Learn more</a></figcaption></div><div class="is-hidden p-4 bg-bgray-200 dark:bg-cgray-700" id="referrals"><p>Use the referral URL to invite your friends to Codewars. Once they complete the initiation and confirm their account, you will be awarded honor.</p><div class="panel p-10px mb-15px bg-ui-section"><b>www.codewars.com/r/fBMxuw</b></div></div></div><div class="w-full md:w-6/12 is-low-light px-0"><div class="p-10px" id="_carbonad" style="min-height: 100px"><script async="" id="_carbonads_js" src="//cdn.carbonads.com/carbon.js?serve=CKYILK3L&amp;placement=codewarscom" type="text/javascript"></script><div class="clearfix"></div></div></div></div></div><div class="w-256 max-w-full mx-auto mb-0 mt-4 bg-ui-section p-0"><ul class="list-none mb-5 py-0 px-2 overflow-hidden flex flex-row items-center bg-ui-users-tabs-bg h-10 space-x-2"><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/stats">Stats</a></li><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/completed">Kata</a></li><li class="h-full px-4 flex items-center justify-center border-t border-brand bg-ui-section"><a class="cursor-default pointer-events-none" href="/users/ByteEater/completed_solutions">Solutions</a></li><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/published_translations">Translations</a></li><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/authored_collections">Collections</a></li><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/published_kumite">Kumite</a></li><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/following">Social</a></li><li class="h-full px-4 flex items-center justify-center"><a href="/users/ByteEater/comments">Discourse</a></li></ul><div class="tabs flex flex-col md:flex-row mt-5px px-4 pb-4"><div class="w-full md:w-40 md:flex-none"><ul class="mb-4 p-0 w-full"><li class="h-10 flex items-center" data-tippy-content="View all solutions for completed kata" data-tippy-placement="right"><a class="cursor-default pointer-events-none font-semibold" data-turbolinks-scroll="false" href="/users/ByteEater/completed_solutions">Completed (110)</a></li><li class="h-10 flex items-center" data-tippy-content="View any work in progress solutions" data-tippy-placement="right"><a data-turbolinks-scroll="false" href="/users/ByteEater/unfinished_solutions">Unfinished</a></li><li class="h-10 flex items-center" data-tippy-content="View any invalidated solutions" data-tippy-placement="right"><a data-turbolinks-scroll="false" href="/users/ByteEater/obsolete_solutions">Obsolete</a></li></ul></div><div class="items-list w-full md:w-2/3 md:pl-4 md:border-l md:flex-grow"><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/55bf01e5a717a0d57e0000ec">Persistent Bugger.</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">persistence</span>(<span class="cm-variable">n</span>):
    <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>
    <span class="cm-keyword">while</span> <span class="cm-variable">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>:
        <span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-number">1</span>
        <span class="cm-keyword">while</span> <span class="cm-variable">n</span>:
            <span class="cm-variable">n</span>, <span class="cm-variable">r</span> <span class="cm-operator">=</span> <span class="cm-builtin">divmod</span>(<span class="cm-variable">n</span>, <span class="cm-number">10</span>)
            <span class="cm-variable">p</span> <span class="cm-operator">*=</span> <span class="cm-variable">r</span>
        <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-variable">p</span>
        <span class="cm-variable">i</span> <span class="cm-operator">+=</span> <span class="cm-number">1</span>
    <span class="cm-keyword">return</span> <span class="cm-variable">i</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T21:33:59.124+0000" title="Aug 28, 2021, 11:33 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55bf01e5a717a0d57e0000ec/train/python/612aab01201d6b0015cb7d7f">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/550554fd08b86f84fe000a58">Which are in?</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">Which</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-comment">-- Sorry for the name of the function.</span>
<span class="cm-variable">inArray</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">String</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">String</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">String</span>]
<span class="cm-variable">inArray</span> <span class="cm-variable">a1</span> <span class="cm-variable">a2</span> <span class="cm-keyword">=</span> <span class="cm-builtin">map</span> <span class="cm-builtin">head</span> <span class="cm-builtin">$</span> <span class="cm-variable">group</span> <span class="cm-builtin">$</span> <span class="cm-variable">sort</span> <span class="cm-builtin">$</span> <span class="cm-builtin">filter</span> ((`<span class="cm-builtin">any</span>` <span class="cm-variable">a2</span>) <span class="cm-builtin">.</span> <span class="cm-variable">isInfixOf</span>) <span class="cm-variable">a1</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T22:27:19.653+0000" title="Oct 30, 2016, 12:27 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/550554fd08b86f84fe000a58/train/haskell/58152023ac9de8d32c000018">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5541a3a52ed3f4277d0001f8/groups/5815224c299b779cb50000a8">Discuss</a></li></ul><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">in_array</span>(<span class="cm-variable">array1</span>, <span class="cm-variable">array2</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">sorted</span>(<span class="cm-builtin">set</span>(<span class="cm-variable">e</span> <span class="cm-keyword">for</span> <span class="cm-variable">e</span> <span class="cm-keyword">in</span> <span class="cm-variable">array1</span> <span class="cm-keyword">if</span> <span class="cm-builtin">any</span>(<span class="cm-variable">e</span> <span class="cm-keyword">in</span> <span class="cm-variable">s</span> <span class="cm-keyword">for</span> <span class="cm-variable">s</span> <span class="cm-keyword">in</span> <span class="cm-variable">array2</span>)))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T21:19:18.904+0000" title="Aug 28, 2021, 11:19 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/550554fd08b86f84fe000a58/train/python/612aa5a3201d6b0059cab854">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5537ece6262249328500003c/groups/612aa8630c3ed60001724af3">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/57eb8fcdf670e99d9b000272">Highest Scoring Word</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">high</span>(<span class="cm-variable">x</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">max</span>((<span class="cm-builtin">sum</span>(<span class="cm-builtin">ord</span>(<span class="cm-variable">c</span>) <span class="cm-operator">-</span> <span class="cm-number">96</span> <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-variable">w</span>), <span class="cm-operator">-</span><span class="cm-variable">n</span>, <span class="cm-variable">w</span>) <span class="cm-keyword">for</span> <span class="cm-variable">n</span>, <span class="cm-variable">w</span> <span class="cm-keyword">in</span> <span class="cm-builtin">enumerate</span>(<span class="cm-variable">x</span>.<span class="cm-property">split</span>()))[<span class="cm-number">2</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T21:05:00.682+0000" title="Aug 28, 2021, 11:05 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/57eb8fcdf670e99d9b000272/train/python/612aa195b63cca0040c3df68">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/599ef7a4802d6a14db00719c/groups/612aa53492c3410001a225f6">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/55b42574ff091733d900002f">Friend or Foe?</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">friend</span>(<span class="cm-variable">x</span>):
    <span class="cm-keyword">return</span> [<span class="cm-variable">p</span> <span class="cm-keyword">for</span> <span class="cm-variable">p</span> <span class="cm-keyword">in</span> <span class="cm-variable">x</span> <span class="cm-keyword">if</span> <span class="cm-builtin">len</span>(<span class="cm-variable">p</span>) <span class="cm-operator">==</span> <span class="cm-number">4</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:45:51.064+0000" title="Aug 28, 2021, 10:45 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55b42574ff091733d900002f/train/python/612aa04bb63cca002ac3a779">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55b425fc22aedc79cc00008c/groups/59663f6dad374f8a1300097e">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/54c27a33fb7da0db0100040e">You're a square!</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">var</span> <span class="cm-def">isSquare</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span>(<span class="cm-def">n</span>){
  <span class="cm-keyword">return</span> (<span class="cm-variable">Math</span>.<span class="cm-property">sqrt</span>(<span class="cm-variable-2">n</span>) <span class="cm-operator">%</span> <span class="cm-number">1</span>)<span class="cm-operator">==</span><span class="cm-number">0</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T02:02:24.319+0000" title="Oct 29, 2016, 4:02 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54c27a33fb7da0db0100040e/train/javascript/581402f86e3b40d0ad00065d">Refactor</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">var</span> <span class="cm-def">isSquare</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span>(<span class="cm-def">n</span>){
  <span class="cm-keyword">return</span> <span class="cm-variable">Math</span>.<span class="cm-property">pow</span>(<span class="cm-variable">Math</span>.<span class="cm-property">floor</span>(<span class="cm-variable">Math</span>.<span class="cm-property">pow</span>(<span class="cm-variable-2">n</span>, <span class="cm-number">0.5</span>)), <span class="cm-number">2</span>) <span class="cm-operator">==</span> <span class="cm-variable-2">n</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T02:00:29.542+0000" title="Oct 29, 2016, 4:00 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54c27a33fb7da0db0100040e/train/javascript/581402376e3b40aa79000ad0">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54c27d56111ec18e6c0003c1/groups/581402c265d81ccf0a000166">Discuss</a></li></ul><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">is_square</span>(<span class="cm-variable">n</span>):    
    <span class="cm-keyword">return</span> <span class="cm-variable">n</span> <span class="cm-operator">&gt;=</span> <span class="cm-number">0</span> <span class="cm-keyword">and</span> <span class="cm-keyword">not</span> <span class="cm-variable">n</span> <span class="cm-operator">*</span><span class="cm-operator">*</span> <span class="cm-number">0.5</span> <span class="cm-operator">%</span> <span class="cm-number">1</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:42:22.634+0000" title="Aug 28, 2021, 10:42 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54c27a33fb7da0db0100040e/train/python/612a9efcb63cca004bc396f3">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/5467e4d82edf8bbf40000155">Descending Order</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">descending_order</span>(<span class="cm-variable">num</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">int</span>(<span class="cm-string">''</span>.<span class="cm-property">join</span>(<span class="cm-builtin">reversed</span>(<span class="cm-builtin">sorted</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">num</span>)))))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:36:18.752+0000" title="Aug 28, 2021, 10:36 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5467e4d82edf8bbf40000155/train/python/612a9db6810569000f57e9d4">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/52fba66badcd10859f00097e">Disemvowel Trolls</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Disemvowel</span> <span class="cm-keyword">where</span>

<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-builtin">Char</span>

<span class="cm-variable">disemvowel</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">disemvowel</span> <span class="cm-keyword">=</span> <span class="cm-builtin">filter</span> ((`<span class="cm-builtin">notElem</span>` <span class="cm-string">"aeiou"</span>) <span class="cm-builtin">.</span> <span class="cm-variable">toLower</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T21:27:32.248+0000" title="Oct 28, 2016, 11:27 PM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52fba66badcd10859f00097e/train/haskell/5813c18ef9588e2233000029">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54b56d4ebdd9c5943c000175/groups/58050801db07c51cbc0001aa">Discuss</a></li></ul><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">disemvowel</span>(<span class="cm-variable">string_</span>):
    <span class="cm-keyword">return</span> <span class="cm-string">''</span>.<span class="cm-property">join</span>(<span class="cm-variable">c</span> <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-variable">string_</span> <span class="cm-keyword">if</span> <span class="cm-variable">c</span>.<span class="cm-property">lower</span>() <span class="cm-keyword">not</span> <span class="cm-keyword">in</span> <span class="cm-string">'aeiou'</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:30:55.233+0000" title="Aug 28, 2021, 10:30 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52fba66badcd10859f00097e/train/python/612a9c00b63cca0033c365fe">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/523f5d21c841566fde000009">Array.diff</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">array_diff</span>(<span class="cm-variable">a</span>, <span class="cm-variable">b</span>):
    <span class="cm-variable">diff</span> <span class="cm-operator">=</span> <span class="cm-builtin">set</span>(<span class="cm-variable">a</span>) <span class="cm-operator">-</span> <span class="cm-builtin">set</span>(<span class="cm-variable">b</span>)
    <span class="cm-keyword">return</span> [<span class="cm-variable">x</span> <span class="cm-keyword">for</span> <span class="cm-variable">x</span> <span class="cm-keyword">in</span> <span class="cm-variable">a</span> <span class="cm-keyword">if</span> <span class="cm-variable">x</span> <span class="cm-keyword">in</span> <span class="cm-variable">diff</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:25:03.744+0000" title="Aug 28, 2021, 10:25 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/523f5d21c841566fde000009/train/python/612a9a1e201d6b000bc98048">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/54da5a58ea159efa38000836">Find the odd int</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">find_it</span>(<span class="cm-variable">seq</span>):
    <span class="cm-keyword">from</span> <span class="cm-variable">collections</span> <span class="cm-keyword">import</span> <span class="cm-variable">Counter</span>
    <span class="cm-keyword">for</span> <span class="cm-variable">x</span>, <span class="cm-variable">n</span> <span class="cm-keyword">in</span> <span class="cm-variable">Counter</span>(<span class="cm-variable">seq</span>).<span class="cm-property">items</span>():
        <span class="cm-keyword">if</span> <span class="cm-variable">n</span> <span class="cm-operator">%</span> <span class="cm-number">2</span>: <span class="cm-keyword">return</span> <span class="cm-variable">x</span>
</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:16:00.548+0000" title="Aug 28, 2021, 10:16 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54da5a58ea159efa38000836/train/python/58153258ac9de8fc9200009a">Refactor</a></li></ul><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">findOdd</span>(<span class="cm-def">A</span>) {
  <span class="cm-keyword">let</span> <span class="cm-def">m</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Map</span>
  <span class="cm-keyword">for</span> (<span class="cm-keyword">let</span> <span class="cm-def">x</span> <span class="cm-keyword">of</span> <span class="cm-variable-2">A</span>) <span class="cm-variable-2">m</span>.<span class="cm-property">set</span>(<span class="cm-variable-2">x</span>, (<span class="cm-variable-2">m</span>.<span class="cm-property">get</span>(<span class="cm-variable-2">x</span>) <span class="cm-operator">||</span> <span class="cm-number">0</span>) <span class="cm-operator">+</span> <span class="cm-number">1</span>)
  <span class="cm-keyword">return</span> [<span class="cm-meta">...</span><span class="cm-variable-2">m</span>].<span class="cm-property">find</span>(<span class="cm-def">e</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">e</span>[<span class="cm-number">1</span>] <span class="cm-operator">%</span> <span class="cm-number">2</span>)[<span class="cm-number">0</span>]
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T23:49:58.770+0000" title="Oct 30, 2016, 1:49 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54da5a58ea159efa38000836/train/javascript/5815328906512fa74100009b">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56257b1427e918467e000174/groups/581535da06512f75a70000ac">Discuss</a></li></ul><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">FindOdd</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-comment">-- | Given a list, find the [Int] that appears an </span>
<span class="cm-comment">--   odd number of times. The tests will always</span>
<span class="cm-comment">--   provide such a number, and the list will</span>
<span class="cm-comment">--   always contain at least one element.</span>
<span class="cm-variable">findOdd</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Int</span>] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">findOdd</span> <span class="cm-variable">xs</span> <span class="cm-keyword">=</span> <span class="cm-builtin">head</span> <span class="cm-builtin">$</span> <span class="cm-builtin">head</span> <span class="cm-builtin">$</span> <span class="cm-builtin">dropWhile</span> (<span class="cm-builtin">even</span> <span class="cm-builtin">.</span> <span class="cm-builtin">length</span>) <span class="cm-builtin">$</span> <span class="cm-variable">group</span> <span class="cm-builtin">$</span> <span class="cm-variable">sort</span> <span class="cm-variable">xs</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T06:57:41.903+0000" title="Oct 30, 2016, 7:57 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54da5a58ea159efa38000836/train/haskell/5815980cd5fae449a2000071">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56257b092fcbf7b99d0000e4/groups/563a8a3b4e226d77250000bd">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/526571aae218b8ee490006f4">Bit Counting</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">count_bits</span>(<span class="cm-variable">n</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">len</span>(<span class="cm-builtin">list</span>(<span class="cm-builtin">filter</span>(<span class="cm-builtin">int</span>, <span class="cm-builtin">bin</span>(<span class="cm-variable">n</span>)[<span class="cm-number">2</span>:])))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T19:28:41.843+0000" title="Aug 28, 2021, 9:28 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/526571aae218b8ee490006f4/train/python/612a8c73201d6b0007c7739f">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>8 kyu</span></div></div><a href="/kata/50654ddff44f800200000004">Multiply</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Multiply.</span><span class="cm-qualifier">Bug.</span><span class="cm-variable-2">Fix</span> <span class="cm-keyword">where</span>

<span class="cm-variable">multiply</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">multiply</span> <span class="cm-variable">a</span> <span class="cm-variable">b</span> <span class="cm-keyword">=</span> <span class="cm-variable">a</span> <span class="cm-builtin">*</span> <span class="cm-variable">b</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T20:39:44.237+0000" title="Oct 28, 2016, 10:39 PM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/50654ddff44f800200000004/train/haskell/5813b74856b21bc2370003ef">Refactor</a></li></ul><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">multiply</span>(<span class="cm-variable">a</span>, <span class="cm-variable">b</span>):
  <span class="cm-keyword">return</span> <span class="cm-variable">a</span> <span class="cm-operator">*</span> <span class="cm-variable">b</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T19:17:55.038+0000" title="Aug 28, 2021, 9:17 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/50654ddff44f800200000004/train/python/612a8bc2dbe769002e83d5ed">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/546e2562b03326a88e000020">Square Every Digit</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">square_digits</span>(<span class="cm-variable">num</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">int</span>(<span class="cm-string">''</span>.<span class="cm-property">join</span>(<span class="cm-builtin">str</span>(<span class="cm-builtin">int</span>(<span class="cm-variable">x</span>) <span class="cm-operator">*</span><span class="cm-operator">*</span> <span class="cm-number">2</span>) <span class="cm-keyword">for</span> <span class="cm-variable">x</span> <span class="cm-keyword">in</span> <span class="cm-builtin">str</span>(<span class="cm-variable">num</span>)))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2021-08-28T20:03:30.142+0000" title="Aug 28, 2021, 10:03 PM GMT+2" lang="en">22 days ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/546e2562b03326a88e000020/train/python/612a95e1b63cca004bc30c2e">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-purple-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>2 kyu</span></div></div><a href="/kata/5af33bcdde4c7f94a90000b3">Yoneda lemma</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-meta">{-# LANGUAGE RankNTypes, ScopedTypeVariables #-}</span>
<span class="cm-keyword">module</span> <span class="cm-variable-2">YonedaLemma</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-variable-2">YonedaLemmaPreloaded</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-qualifier">Functor.</span><span class="cm-variable-2">Contravariant</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">Void</span>

<span class="cm-comment">-- Hom(a, b) ≡ all arrows/morphisms from object `a` to object `b`</span>
<span class="cm-comment">-- in given category.</span>
<span class="cm-comment">-- Hom(a, -) covariant functor:</span>
<span class="cm-keyword">type</span> <span class="cm-variable-2">Hom</span> <span class="cm-variable">a</span> <span class="cm-keyword">=</span> (<span class="cm-keyword">-&gt;</span>) <span class="cm-variable">a</span>

<span class="cm-comment">-- natural transformation from functor f to functor g:</span>
<span class="cm-keyword">type</span> <span class="cm-variable-2">Nat</span> <span class="cm-variable">f</span> <span class="cm-variable">g</span> <span class="cm-keyword">=</span> <span class="cm-variable">forall</span> <span class="cm-variable">x</span><span class="cm-builtin">.</span> <span class="cm-variable">f</span> <span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">g</span> <span class="cm-variable">x</span>

<span class="cm-comment">-- in order to witness isomorphism</span>
<span class="cm-comment">-- we should provide `to` and `from` such, that</span>
<span class="cm-comment">-- to . from ≡ id[f a]</span>
<span class="cm-comment">-- from . to ≡ id[Nat (Hom a) f]</span>
<span class="cm-variable">to</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Functor</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Nat</span> (<span class="cm-variable-2">Hom</span> <span class="cm-variable">a</span>) <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable">a</span>
<span class="cm-variable">to</span> <span class="cm-keyword">=</span> (<span class="cm-builtin">$</span> <span class="cm-builtin">id</span>)

<span class="cm-variable">from</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Functor</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable">a</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Nat</span> (<span class="cm-variable-2">Hom</span> <span class="cm-variable">a</span>) <span class="cm-variable">f</span>
<span class="cm-variable">from</span> <span class="cm-keyword">=</span> <span class="cm-builtin">flip</span> <span class="cm-builtin">fmap</span>


<span class="cm-comment">-- Hom(-, a) contravariant functor:</span>
<span class="cm-keyword">type</span> <span class="cm-variable-2">CoHom</span> <span class="cm-variable">a</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Op</span> <span class="cm-variable">a</span>
<span class="cm-comment">{- NOTE:</span>
<span class="cm-comment">Op a b = Op { getOp :: b -&gt; a }</span>

<span class="cm-comment">class Contravariant f where</span>
<span class="cm-comment">  contramap :: (b -&gt; a) -&gt; f a -&gt; f b</span>
<span class="cm-comment">-}</span>

<span class="cm-variable">to'</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Contravariant</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Nat</span> (<span class="cm-variable-2">CoHom</span> <span class="cm-variable">a</span>) <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable">a</span>
<span class="cm-variable">to'</span> <span class="cm-keyword">=</span> (<span class="cm-builtin">$</span> <span class="cm-variable-2">Op</span> <span class="cm-builtin">id</span>)

<span class="cm-variable">from'</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Contravariant</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable">a</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Nat</span> (<span class="cm-variable-2">CoHom</span> <span class="cm-variable">a</span>) <span class="cm-variable">f</span>
<span class="cm-variable">from'</span> <span class="cm-keyword">=</span> <span class="cm-builtin">flip</span> (<span class="cm-variable">contramap</span><span class="cm-builtin">.</span><span class="cm-variable">getOp</span>)


<span class="cm-comment">-- now we will try to count the natural transformations</span>

<span class="cm-comment">{- in Preloaded we have:</span>
<span class="cm-comment">newtype Count x = Count { getCount :: Int } deriving (Show, Eq)</span>
<span class="cm-comment">coerce :: Count a -&gt; Count b</span>
<span class="cm-comment">class Countable where count :: Count c</span>
<span class="cm-comment">class Factor where factor :: Countable c =&gt; Count (f c)</span>
<span class="cm-comment">instance (Factor f, Countable c) =&gt; Countable (f c) where count = factor</span>
<span class="cm-comment">-}</span>
<span class="cm-comment">-- | NOTE: from here onwards you should imagine `forall x` inside `Count (...)`,</span>
<span class="cm-comment">-- | i. e., not `Count ((Numbers -&gt; x) -&gt; Maybe x)`, but `Count (forall x. (Numbers -&gt; x) -&gt; Maybe x)`</span>
<span class="cm-comment">-- | we are unable to write it because GHC doesn't yet support impredicative polymorphism (see issue: https://www.codewars.com/kata/yoneda-lemma/discuss/haskell#5b0f4afd3aa7cf7eb100000e)</span>

<span class="cm-variable">count1</span> <span class="cm-keyword">::</span> <span class="cm-variable">forall</span> <span class="cm-variable">f</span> <span class="cm-variable">c</span> <span class="cm-variable">x</span><span class="cm-builtin">.</span> (<span class="cm-builtin">Functor</span> <span class="cm-variable">f</span>, <span class="cm-variable-2">Factor</span> <span class="cm-variable">f</span>, <span class="cm-variable-2">Countable</span> <span class="cm-variable">c</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Count</span> ((<span class="cm-variable">c</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable">x</span>)
<span class="cm-variable">count1</span> <span class="cm-keyword">=</span> <span class="cm-variable">coerce</span> (<span class="cm-variable">factor</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> (<span class="cm-variable">f</span> <span class="cm-variable">c</span>))

<span class="cm-variable">count2</span> <span class="cm-keyword">::</span> <span class="cm-variable">forall</span> <span class="cm-variable">f</span> <span class="cm-variable">c</span> <span class="cm-variable">x</span><span class="cm-builtin">.</span> (<span class="cm-variable-2">Contravariant</span> <span class="cm-variable">f</span>, <span class="cm-variable-2">Factor</span> <span class="cm-variable">f</span>, <span class="cm-variable-2">Countable</span> <span class="cm-variable">c</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Count</span> ((<span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable">x</span>)
<span class="cm-variable">count2</span> <span class="cm-keyword">=</span> <span class="cm-variable">coerce</span> (<span class="cm-variable">factor</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> (<span class="cm-variable">f</span> <span class="cm-variable">c</span>))
<span class="cm-comment">-- | TIP: you could use types `f`, `c` in RHS of count1 and count2</span>
<span class="cm-comment">-- | (because of ScopedTypeVariables pragma and explicit forall)</span>

<span class="cm-comment">-- and now i encourage you to count something on fingers ;)</span>
<span class="cm-keyword">data</span> <span class="cm-variable-2">Numbers</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">One</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Two</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Three</span> <span class="cm-keyword">deriving</span> (<span class="cm-builtin">Show</span>, <span class="cm-builtin">Eq</span>)

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Countable</span> <span class="cm-variable-2">Numbers</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">count</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Count</span> <span class="cm-number">3</span>

<span class="cm-variable">challenge1</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> ((<span class="cm-variable-2">Numbers</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Maybe</span> <span class="cm-variable">x</span>)
<span class="cm-variable">challenge1</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Count</span> <span class="cm-builtin">$</span> <span class="cm-number">4</span>

<span class="cm-variable">challenge2</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> ((<span class="cm-builtin">Maybe</span> <span class="cm-variable-2">Numbers</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>)
<span class="cm-variable">challenge2</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Count</span> <span class="cm-builtin">$</span> <span class="cm-number">4</span>

<span class="cm-variable">challenge3</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> ((<span class="cm-variable-2">Numbers</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-builtin">Bool</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>))
<span class="cm-variable">challenge3</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Count</span> <span class="cm-builtin">$</span> <span class="cm-number">9</span>

<span class="cm-comment">{- Void is a data type without constructors, its declaration:</span>
<span class="cm-comment">data Void</span>
<span class="cm-comment">Predicate x = Predicate { getPredicate :: x -&gt; Bool }</span>
<span class="cm-comment">-- as you might have noticed, Predicate is Contravariant</span>
<span class="cm-comment">-}</span>
<span class="cm-variable">challenge4</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> ((<span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Void</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Predicate</span> <span class="cm-variable">x</span>)
<span class="cm-variable">challenge4</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Count</span> <span class="cm-builtin">$</span> <span class="cm-number">1</span>

<span class="cm-comment">-- challenge5 :: Count (forall x. (x -&gt; (forall y. (Bool -&gt; y) -&gt; (Numbers -&gt; y))) -&gt; (x -&gt; Numbers))</span>
<span class="cm-variable">challenge5</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Count</span> ((<span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> ((<span class="cm-builtin">Bool</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">y</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable-2">Numbers</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">y</span>))) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Numbers</span>))
<span class="cm-variable">challenge5</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Count</span> <span class="cm-builtin">$</span> <span class="cm-number">6561</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2018-10-17T21:36:37.735+0000" title="Oct 17, 2018, 11:36 PM GMT+2" lang="en">3 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5af33bcdde4c7f94a90000b3/train/haskell/5bc7a0b1eba26e2459000052">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/578aa45ee9fd15ff4600090d">Sort the odd</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">SortArray</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>
<span class="cm-variable">sortArray</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Int</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Int</span>]
<span class="cm-variable">sortArray</span> <span class="cm-variable">xs</span> <span class="cm-keyword">=</span> <span class="cm-variable">replaceOdd</span> <span class="cm-variable">xs</span> <span class="cm-builtin">$</span> <span class="cm-variable">sort</span> <span class="cm-builtin">$</span> <span class="cm-builtin">filter</span> <span class="cm-builtin">odd</span> <span class="cm-variable">xs</span>
<span class="cm-variable">replaceOdd</span> [] <span class="cm-keyword">_</span> <span class="cm-keyword">=</span> []
<span class="cm-variable">replaceOdd</span> (<span class="cm-variable">x</span><span class="cm-keyword">:</span><span class="cm-variable">xs</span>) <span class="cm-keyword">~</span><span class="cm-variable">s</span><span class="cm-keyword">@</span>(<span class="cm-variable">y</span><span class="cm-keyword">:</span><span class="cm-variable">ys</span>) <span class="cm-keyword">=</span> <span class="cm-keyword">if</span> <span class="cm-builtin">odd</span> <span class="cm-variable">x</span>
                       <span class="cm-keyword">then</span> <span class="cm-variable">y</span> <span class="cm-keyword">:</span> <span class="cm-variable">replaceOdd</span> <span class="cm-variable">xs</span> <span class="cm-variable">ys</span>
                       <span class="cm-keyword">else</span> <span class="cm-variable">x</span> <span class="cm-keyword">:</span> <span class="cm-variable">replaceOdd</span> <span class="cm-variable">xs</span> <span class="cm-variable">s</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2018-07-02T19:47:00.951+0000" title="Jul 2, 2018, 9:47 PM GMT+2" lang="en">3 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/578aa45ee9fd15ff4600090d/train/haskell/5b3a7e3342b27eac230000c6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5919e5dbc2ed5e46bb00004d/groups/5b3a8157e98cefd7c000087e">Discuss</a></li></ul><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">sort_array</span>(<span class="cm-variable">a</span>):
  <span class="cm-variable">odd</span> <span class="cm-operator">=</span> <span class="cm-builtin">sorted</span>(<span class="cm-variable">x</span> <span class="cm-keyword">for</span> <span class="cm-variable">x</span> <span class="cm-keyword">in</span> <span class="cm-variable">a</span> <span class="cm-keyword">if</span> <span class="cm-variable">x</span> <span class="cm-operator">%</span> <span class="cm-number">2</span> <span class="cm-operator">==</span> <span class="cm-number">1</span>)
  <span class="cm-keyword">return</span> [<span class="cm-variable">odd</span>.<span class="cm-property">pop</span>(<span class="cm-number">0</span>) <span class="cm-keyword">if</span> <span class="cm-variable">x</span> <span class="cm-operator">%</span> <span class="cm-number">2</span> <span class="cm-operator">==</span> <span class="cm-number">1</span> <span class="cm-keyword">else</span> <span class="cm-variable">x</span> <span class="cm-keyword">for</span> <span class="cm-variable">x</span> <span class="cm-keyword">in</span> <span class="cm-variable">a</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2018-08-23T03:11:30.651+0000" title="Aug 23, 2018, 5:11 AM GMT+2" lang="en">3 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/578aa45ee9fd15ff4600090d/train/python/5b7e25954a6aca15cd000010">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5790d34d671cb50d6600016d/groups/5b7e25fc3dceedee26001355">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/573992c724fc289553000e95">Find the smallest</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ToSmallest</span> 
{

    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">long</span>[] <span class="cm-variable">Smallest</span> (<span class="cm-type">long</span> <span class="cm-variable">n</span>)
    {<span class="cm-variable">System</span>.<span class="cm-variable">Console</span>.<span class="cm-variable">WriteLine</span>    (<span class="cm-variable">n</span>);
        <span class="cm-keyword">var</span> <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-variable">$</span><span class="cm-string">"{n}"</span>;
        <span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;
        <span class="cm-variable">System</span>.<span class="cm-type">Func</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span>, <span class="cm-type">int</span>, <span class="cm-type">long</span>[]<span class="cm-operator">&gt;</span> <span class="cm-variable">f</span> <span class="cm-operator">=</span> (<span class="cm-variable">k</span>, <span class="cm-variable">l</span>) <span class="cm-operator">=&gt;</span>
            <span class="cm-keyword">new</span>[] { <span class="cm-type">long</span>.<span class="cm-variable">Parse</span>(<span class="cm-variable">s</span>.<span class="cm-variable">Remove</span>(<span class="cm-variable">k</span>, <span class="cm-number">1</span>).<span class="cm-variable">Insert</span>(<span class="cm-variable">l</span>, <span class="cm-variable">$</span><span class="cm-string">"{s[k]}"</span>)), <span class="cm-variable">k</span>, <span class="cm-variable">l</span> };
        <span class="cm-keyword">foreach</span> (<span class="cm-keyword">var</span> <span class="cm-def">d</span> <span class="cm-keyword">in</span> <span class="cm-keyword">new</span> <span class="cm-variable">System</span>.<span class="cm-variable">Collections</span>.<span class="cm-variable">Generic</span>.<span class="cm-variable">SortedSet</span><span class="cm-operator">&lt;</span><span class="cm-type">char</span><span class="cm-operator">&gt;</span>(<span class="cm-variable">s</span>))
        {
            <span class="cm-keyword">var</span> <span class="cm-def">g</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">System</span>.<span class="cm-variable">Text</span>.<span class="cm-variable">RegularExpressions</span>
                .<span class="cm-variable">Regex</span>(<span class="cm-variable">$</span><span class="cm-string">"{d}*((.{d})?)\\1*(.?)([^{d}]*({d}+))*"</span>)
                .<span class="cm-variable">Match</span>(<span class="cm-variable">s</span>, <span class="cm-variable">i</span>).<span class="cm-variable">Groups</span>;
            <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-variable">g</span>[<span class="cm-number">1</span>].<span class="cm-variable">Index</span>;
            <span class="cm-keyword">var</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-variable">g</span>[<span class="cm-number">2</span>].<span class="cm-variable">Success</span>;
            <span class="cm-keyword">var</span> <span class="cm-def">j</span> <span class="cm-operator">=</span> <span class="cm-variable">g</span>[<span class="cm-number">3</span>].<span class="cm-variable">Index</span>;
            <span class="cm-keyword">var</span> <span class="cm-def">p</span> <span class="cm-operator">=</span> <span class="cm-variable">$</span><span class="cm-string">"{g[1]}0"</span>[<span class="cm-number">0</span>];
            <span class="cm-keyword">if</span> (<span class="cm-variable">r</span> <span class="cm-operator">&amp;&amp;</span> (<span class="cm-variable">s</span> <span class="cm-operator">+</span> <span class="cm-string">' '</span>)[<span class="cm-variable">j</span><span class="cm-operator">--</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">p</span>)
            {
                <span class="cm-keyword">while</span> (<span class="cm-operator">++</span><span class="cm-variable">j</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">s</span>.<span class="cm-variable">Length</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable">s</span>[<span class="cm-variable">j</span>] <span class="cm-operator">&lt;=</span> <span class="cm-variable">p</span>) ;
                <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-variable">i</span>, <span class="cm-variable">s</span>.<span class="cm-variable">Substring</span>(<span class="cm-number">0</span>, <span class="cm-variable">j</span>).<span class="cm-variable">TrimEnd</span>(<span class="cm-variable">p</span>).<span class="cm-variable">Length</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>);
            }
            <span class="cm-keyword">if</span> (<span class="cm-variable">g</span>[<span class="cm-number">5</span>].<span class="cm-variable">Success</span>) <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-variable">g</span>[<span class="cm-number">5</span>].<span class="cm-variable">Index</span>, <span class="cm-variable">g</span>[<span class="cm-number">0</span>].<span class="cm-variable">Index</span>);
            <span class="cm-keyword">if</span> (<span class="cm-variable">r</span>) <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-variable">i</span>, <span class="cm-variable">j</span>);
        }
        <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-number">0</span>, <span class="cm-number">0</span>);
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-12-02T01:19:27.929+0000" title="Dec 2, 2016, 2:19 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/573992c724fc289553000e95/train/csharp/5840c2aa258e10f84000000a">Refactor</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ToSmallest</span> 
{

    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">long</span>[] <span class="cm-variable">Smallest</span> (<span class="cm-type">long</span> <span class="cm-variable">n</span>)
    {
        <span class="cm-keyword">var</span> <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span> <span class="cm-operator">+</span> <span class="cm-variable">n</span>;
        <span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;
        <span class="cm-variable">System</span>.<span class="cm-type">Func</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span>, <span class="cm-type">int</span>, <span class="cm-type">long</span>[]<span class="cm-operator">&gt;</span> <span class="cm-variable">f</span> <span class="cm-operator">=</span> (<span class="cm-variable">k</span>, <span class="cm-variable">l</span>) <span class="cm-operator">=&gt;</span>
            <span class="cm-keyword">new</span>[] { <span class="cm-type">long</span>.<span class="cm-variable">Parse</span>(<span class="cm-variable">s</span>.<span class="cm-variable">Remove</span>(<span class="cm-variable">k</span>, <span class="cm-number">1</span>).<span class="cm-variable">Insert</span>(<span class="cm-variable">l</span>, <span class="cm-string">""</span> <span class="cm-operator">+</span> <span class="cm-variable">s</span>[<span class="cm-variable">k</span>])), <span class="cm-variable">k</span>, <span class="cm-variable">l</span> };
        <span class="cm-keyword">foreach</span> (<span class="cm-keyword">var</span> <span class="cm-def">d</span> <span class="cm-keyword">in</span> <span class="cm-keyword">new</span> <span class="cm-variable">System</span>.<span class="cm-variable">Collections</span>.<span class="cm-variable">Generic</span>.<span class="cm-variable">SortedSet</span><span class="cm-operator">&lt;</span><span class="cm-type">char</span><span class="cm-operator">&gt;</span>(<span class="cm-variable">s</span>))
        {
            <span class="cm-keyword">var</span> <span class="cm-def">g</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">System</span>.<span class="cm-variable">Text</span>.<span class="cm-variable">RegularExpressions</span>
                .<span class="cm-variable">Regex</span>(<span class="cm-variable">$</span><span class="cm-string">"{ d }*((.{ d })?)\\1*(.?)([^{ d }]*({ d }+))*"</span>)
                .<span class="cm-variable">Match</span>(<span class="cm-variable">s</span>, <span class="cm-variable">i</span>).<span class="cm-variable">Groups</span>;
            <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-variable">g</span>[<span class="cm-number">1</span>].<span class="cm-variable">Index</span>;
            <span class="cm-keyword">var</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-variable">g</span>[<span class="cm-number">2</span>].<span class="cm-variable">Success</span>;
            <span class="cm-keyword">var</span> <span class="cm-def">j</span> <span class="cm-operator">=</span> <span class="cm-variable">g</span>[<span class="cm-number">3</span>].<span class="cm-variable">Index</span>;
            <span class="cm-keyword">var</span> <span class="cm-def">p</span> <span class="cm-operator">=</span> <span class="cm-variable">$</span><span class="cm-string">"{ g[1] }0"</span>[<span class="cm-number">0</span>];
            <span class="cm-keyword">if</span> (<span class="cm-variable">r</span> <span class="cm-operator">&amp;&amp;</span> (<span class="cm-variable">s</span> <span class="cm-operator">+</span> <span class="cm-string">' '</span>)[<span class="cm-variable">j</span><span class="cm-operator">--</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">p</span>)
            {
                <span class="cm-keyword">while</span> (<span class="cm-operator">++</span><span class="cm-variable">j</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">s</span>.<span class="cm-variable">Length</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable">s</span>[<span class="cm-variable">j</span>] <span class="cm-operator">&lt;=</span> <span class="cm-variable">p</span>) ;
                <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-variable">i</span>, <span class="cm-variable">s</span>.<span class="cm-variable">Substring</span>(<span class="cm-number">0</span>, <span class="cm-variable">j</span>).<span class="cm-variable">TrimEnd</span>(<span class="cm-variable">p</span>).<span class="cm-variable">Length</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>);
            }
            <span class="cm-keyword">if</span> (<span class="cm-variable">g</span>[<span class="cm-number">5</span>].<span class="cm-variable">Success</span>) <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-variable">g</span>[<span class="cm-number">5</span>].<span class="cm-variable">Index</span>, <span class="cm-variable">g</span>[<span class="cm-number">0</span>].<span class="cm-variable">Index</span>);
            <span class="cm-keyword">if</span> (<span class="cm-variable">r</span>) <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-variable">i</span>, <span class="cm-variable">j</span>);
        }
        <span class="cm-keyword">return</span> <span class="cm-variable">f</span>(<span class="cm-number">0</span>, <span class="cm-number">0</span>);
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-12-01T22:03:50.905+0000" title="Dec 1, 2016, 11:03 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/573992c724fc289553000e95/train/csharp/58228ce42762f2bc3e000079">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5739964ef14baceffa0000c0/groups/58409ea38c7e72387c0011c3">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/556b85b433fb5e899200003f">Simple fraction to mixed number converter</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">Kata</span>
{
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">string</span> <span class="cm-variable">MixedFraction</span>(<span class="cm-type">string</span> <span class="cm-variable">s</span>)
  {
    <span class="cm-keyword">var</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span>[] {<span class="cm-string">"-"</span>, <span class="cm-string">""</span>}[<span class="cm-variable">s</span>.<span class="cm-variable">Split</span>(<span class="cm-string">'-'</span>).<span class="cm-variable">Length</span> <span class="cm-operator">%</span> <span class="cm-number">2</span>];
    <span class="cm-keyword">var</span> <span class="cm-def">p</span> <span class="cm-operator">=</span> <span class="cm-variable">s</span>.<span class="cm-variable">Replace</span>(<span class="cm-string">"-"</span>, <span class="cm-string">""</span>).<span class="cm-variable">Split</span>(<span class="cm-string">'/'</span>);
    <span class="cm-keyword">var</span> <span class="cm-def">b</span> <span class="cm-operator">=</span> <span class="cm-type">int</span>.<span class="cm-variable">Parse</span>(<span class="cm-variable">p</span>[<span class="cm-number">1</span>]);
    <span class="cm-type">int</span> <span class="cm-variable">a</span>;
    <span class="cm-keyword">var</span> <span class="cm-def">q</span> <span class="cm-operator">=</span> <span class="cm-variable">System</span>.<span class="cm-variable">Math</span>.<span class="cm-variable">DivRem</span>(<span class="cm-type">int</span>.<span class="cm-variable">Parse</span>(<span class="cm-variable">p</span>[<span class="cm-number">0</span>]), <span class="cm-variable">b</span>, <span class="cm-keyword">out</span> <span class="cm-variable">a</span>);
    <span class="cm-keyword">if</span> (<span class="cm-variable">a</span> <span class="cm-operator">==</span> <span class="cm-number">0</span>) <span class="cm-keyword">return</span> (<span class="cm-variable">q</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-variable">r</span> : <span class="cm-string">""</span>) <span class="cm-operator">+</span> <span class="cm-variable">q</span>;
    <span class="cm-keyword">if</span> (<span class="cm-variable">q</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>) <span class="cm-variable">r</span> <span class="cm-operator">+=</span> <span class="cm-variable">q</span> <span class="cm-operator">+</span> <span class="cm-string">" "</span>;
    <span class="cm-keyword">var</span> <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-variable">a</span>;
    <span class="cm-keyword">var</span> <span class="cm-def">d</span> <span class="cm-operator">=</span> <span class="cm-variable">b</span>;
    <span class="cm-keyword">while</span> (<span class="cm-variable">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>)
    {
      <span class="cm-keyword">var</span> <span class="cm-def">t</span> <span class="cm-operator">=</span> <span class="cm-variable">c</span>;
      <span class="cm-variable">c</span> <span class="cm-operator">=</span> <span class="cm-variable">d</span> <span class="cm-operator">%</span> <span class="cm-variable">c</span>;
      <span class="cm-variable">d</span> <span class="cm-operator">=</span> <span class="cm-variable">t</span>;
    }
    <span class="cm-keyword">return</span> <span class="cm-variable">r</span> <span class="cm-operator">+</span> <span class="cm-variable">a</span> <span class="cm-operator">/</span> <span class="cm-variable">d</span> <span class="cm-operator">+</span> <span class="cm-string">'/'</span> <span class="cm-operator">+</span> <span class="cm-variable">b</span> <span class="cm-operator">/</span> <span class="cm-variable">d</span>;
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-12-02T00:30:31.918+0000" title="Dec 2, 2016, 1:30 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/556b85b433fb5e899200003f/train/csharp/5840a44a8c7e72387c0011f7">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/57b359706d562cb4b6000020/groups/5840c0aaa3d4c7bf7d000047">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5544c7a5cb454edb3c000047">Bouncing Balls</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">BouncingBall</span> {
  
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">int</span> <span class="cm-variable">bouncingBall</span>(<span class="cm-type">double</span> <span class="cm-variable">h</span>, <span class="cm-type">double</span> <span class="cm-variable">bounce</span>, <span class="cm-type">double</span> <span class="cm-variable">window</span>) {
      <span class="cm-keyword">return</span> <span class="cm-variable">h</span> <span class="cm-operator">&lt;=</span> <span class="cm-number">0</span> <span class="cm-operator">||</span> <span class="cm-variable">bounce</span> <span class="cm-operator">&lt;=</span> <span class="cm-number">0</span> <span class="cm-operator">||</span> <span class="cm-variable">bounce</span> <span class="cm-operator">&gt;=</span> <span class="cm-number">1</span> <span class="cm-operator">||</span> <span class="cm-variable">window</span> <span class="cm-operator">&gt;=</span> <span class="cm-variable">h</span> <span class="cm-operator">?</span>
        <span class="cm-operator">-</span><span class="cm-number">1</span> : <span class="cm-number">2</span> <span class="cm-operator">*</span> (<span class="cm-type">int</span>) <span class="cm-variable">System</span>.<span class="cm-variable">Math</span>.<span class="cm-variable">Ceiling</span>(<span class="cm-variable">System</span>.<span class="cm-variable">Math</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">window</span> <span class="cm-operator">/</span> <span class="cm-variable">h</span>, <span class="cm-variable">bounce</span>)) <span class="cm-operator">-</span> <span class="cm-number">1</span>;
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-12-01T22:28:54.430+0000" title="Dec 1, 2016, 11:28 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5544c7a5cb454edb3c000047/train/csharp/5840a045e4b87589b5001119">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5545df260240a709a20000aa/groups/5840a42c8c7e725cdd00047b">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/54dc6f5a224c26032800005c">Help the bookseller !</a></div><h6>C++:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="cpp"><span class="cm-keyword">using</span> <span class="cm-keyword">namespace</span> <span class="cm-def">std</span>;

<span class="cm-keyword">class</span> <span class="cm-def">StockList</span>
{
<span class="cm-keyword">public</span>:
  <span class="cm-keyword">static</span> <span class="cm-variable">string</span> <span class="cm-variable">stockSummary</span>(<span class="cm-variable">vector</span><span class="cm-operator">&lt;</span><span class="cm-variable">string</span><span class="cm-operator">&gt;</span> <span class="cm-operator">&amp;</span><span class="cm-variable">lstOfArt</span>, <span class="cm-variable">vector</span><span class="cm-operator">&lt;</span><span class="cm-variable">string</span><span class="cm-operator">&gt;</span> <span class="cm-operator">&amp;</span><span class="cm-variable">categories</span>)
  {
    <span class="cm-keyword">if</span> (<span class="cm-variable">lstOfArt</span>.<span class="cm-variable">empty</span>() <span class="cm-operator">|</span> <span class="cm-variable">categories</span>.<span class="cm-variable">empty</span>()) <span class="cm-keyword">return</span> <span class="cm-string">""</span>;
    <span class="cm-variable">stringstream</span> <span class="cm-variable">r</span>;
    <span class="cm-keyword">for</span> (<span class="cm-keyword">auto</span> <span class="cm-variable">c</span>: <span class="cm-variable">categories</span>)
    {
      <span class="cm-type">int</span> <span class="cm-variable">a</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;
      <span class="cm-keyword">for</span> (<span class="cm-keyword">auto</span> <span class="cm-variable">s</span>: <span class="cm-variable">lstOfArt</span>)
        <span class="cm-keyword">if</span> (<span class="cm-variable">s</span>[<span class="cm-number">0</span>] <span class="cm-operator">==</span> <span class="cm-variable">c</span>[<span class="cm-number">0</span>]) <span class="cm-variable">a</span> <span class="cm-operator">+=</span> <span class="cm-variable">atoi</span>(<span class="cm-variable">s</span>.<span class="cm-variable">substr</span>(<span class="cm-variable">s</span>.<span class="cm-variable">find</span>(<span class="cm-string">" "</span>)).<span class="cm-variable">c_str</span>());
      <span class="cm-variable">r</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-string">" - ("</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-variable">c</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-string">" : "</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-variable">a</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-string">")"</span>;
    }
    <span class="cm-keyword">return</span> <span class="cm-variable">r</span>.<span class="cm-variable">str</span>().<span class="cm-variable">substr</span>(<span class="cm-number">3</span>);
  }
};</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-20T15:38:30.030+0000" title="Nov 20, 2016, 4:38 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54dc6f5a224c26032800005c/train/cpp/5831b1cdfd25e9d06300033b">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5789f1db0f772fdbd8000055/groups/5831c3a9db5729713e00013c">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/559ce00b70041bc7b600013d">Financing Plan on Planet XY140Z-n</a></div><h6>C++:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="cpp"><span class="cm-keyword">class</span> <span class="cm-def">Finance</span>
{
  <span class="cm-keyword">public</span>:
  <span class="cm-keyword">static</span> <span class="cm-type">unsigned</span> <span class="cm-type">long</span> <span class="cm-type">long</span> <span class="cm-variable">finance</span>(<span class="cm-type">unsigned</span> <span class="cm-type">long</span> <span class="cm-type">long</span> <span class="cm-variable">n</span>)
  {
    <span class="cm-keyword">return</span> <span class="cm-variable">n</span> <span class="cm-operator">*</span> (<span class="cm-variable">n</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>) <span class="cm-operator">*</span> (<span class="cm-variable">n</span> <span class="cm-operator">+</span> <span class="cm-number">2</span>) <span class="cm-operator">/</span> <span class="cm-number">2</span>;
  }
};</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-19T20:19:40.002+0000" title="Nov 19, 2016, 9:19 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/559ce00b70041bc7b600013d/train/cpp/5830b0caa31721a56900000f">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5766c1089fa690d87d0015cd/groups/5797afe04be91270740000b5">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/577e277c9fb2a5511c00001d">Vowel Shifting</a></div><h6>C++:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="cpp"><span class="cm-variable">std::string</span> <span class="cm-def">vowelShift</span>(<span class="cm-variable">std::string</span> <span class="cm-variable">text</span>, <span class="cm-type">int</span> <span class="cm-variable">n</span>)
{
  <span class="cm-type">int</span>
    <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable">text</span>.<span class="cm-variable">size</span>(),
    <span class="cm-variable">p</span>[<span class="cm-variable">l</span>],
    <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-variable">j</span> <span class="cm-operator">=</span> <span class="cm-operator">-</span><span class="cm-number">1</span>;
  <span class="cm-variable">std::string</span> <span class="cm-variable">s</span>;
  <span class="cm-keyword">for</span> (;;)
  {
    <span class="cm-variable">j</span> <span class="cm-operator">=</span> <span class="cm-variable">text</span>.<span class="cm-variable">find_first_of</span>(<span class="cm-string">"aeiouAEIOU"</span>, <span class="cm-operator">++</span><span class="cm-variable">j</span>);
    <span class="cm-keyword">if</span> (<span class="cm-variable">j</span> <span class="cm-operator">&lt;</span> <span class="cm-number">0</span>) <span class="cm-keyword">break</span>;
    <span class="cm-variable">p</span>[<span class="cm-variable">i</span><span class="cm-operator">++</span>] <span class="cm-operator">=</span> <span class="cm-variable">j</span>;
    <span class="cm-variable">s</span> <span class="cm-operator">+=</span> <span class="cm-variable">text</span>[<span class="cm-variable">j</span>];
  }
  <span class="cm-keyword">for</span> (<span class="cm-variable">j</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">j</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">i</span>; <span class="cm-variable">j</span><span class="cm-operator">++</span>)
    <span class="cm-variable">text</span>[<span class="cm-variable">p</span>[<span class="cm-variable">j</span>]] <span class="cm-operator">=</span> <span class="cm-variable">s</span>[(<span class="cm-variable">j</span> <span class="cm-operator">-</span> <span class="cm-variable">n</span> <span class="cm-operator">%</span> <span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-variable">i</span>) <span class="cm-operator">%</span> <span class="cm-variable">i</span>];
  <span class="cm-keyword">return</span> <span class="cm-variable">text</span>;
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-19T19:41:48.287+0000" title="Nov 19, 2016, 8:41 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/577e277c9fb2a5511c00001d/train/cpp/5830952fdb57291072000061">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/57922ccad1f04185af0002dc/groups/5830ab1cfd25e9bab000019d">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/55c6126177c9441a570000cc">Weight for weight</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;

<span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">WeightSort</span> {
  
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">string</span> <span class="cm-variable">orderWeight</span>(<span class="cm-type">string</span> <span class="cm-variable">strng</span>) {
    <span class="cm-keyword">return</span> <span class="cm-type">string</span>.<span class="cm-variable">Join</span>(<span class="cm-string">" "</span>, <span class="cm-variable">strng</span>.<span class="cm-variable">Split</span>()
      .<span class="cm-variable">OrderBy</span>(<span class="cm-variable">s</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">s</span>.<span class="cm-variable">Select</span>(<span class="cm-type">char</span>.<span class="cm-variable">GetNumericValue</span>).<span class="cm-variable">Sum</span>())
      .<span class="cm-variable">ThenBy</span>(<span class="cm-variable">s</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">s</span>));
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T02:28:38.045+0000" title="Nov 9, 2016, 3:28 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55c6126177c9441a570000cc/train/csharp/582289b7a892b0c0060000bc">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55c6235c08a2e3bca60000a7/groups/58228a3534c53afab0000029">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;

<span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">WeightSort</span> {
  
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">string</span> <span class="cm-variable">orderWeight</span>(<span class="cm-type">string</span> <span class="cm-variable">strng</span>) {
    <span class="cm-keyword">return</span> <span class="cm-type">string</span>.<span class="cm-variable">Join</span>(<span class="cm-string">" "</span>, <span class="cm-variable">strng</span>.<span class="cm-variable">Split</span>()
      .<span class="cm-variable">OrderBy</span>(<span class="cm-variable">s</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">s</span>)
      .<span class="cm-variable">OrderBy</span>(<span class="cm-variable">s</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">s</span>.<span class="cm-variable">Select</span>(<span class="cm-type">char</span>.<span class="cm-variable">GetNumericValue</span>).<span class="cm-variable">Sum</span>()));
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T02:25:42.617+0000" title="Nov 9, 2016, 3:25 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55c6126177c9441a570000cc/train/csharp/5822838ab81f702d8f00021c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55c6235c08a2e3bca60000a7/groups/58228986a892b0fba40001ee">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5811527d9d278b242f000006">SQL Basics: Simple VIEW</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">CREATE</span> <span class="cm-keyword">VIEW</span> members_approved_for_voucher <span class="cm-keyword">AS</span>
  <span class="cm-keyword">SELECT</span> department_id<span class="cm-punctuation">,</span> <span class="cm-keyword">SUM</span><span class="cm-bracket">(</span>price<span class="cm-bracket">)</span> s
  <span class="cm-keyword">FROM</span> departments<span class="cm-punctuation">,</span> sales<span class="cm-punctuation">,</span> products
  <span class="cm-keyword">WHERE</span> departments<span class="cm-variable-2">.id</span> <span class="cm-operator">=</span> department_id <span class="cm-keyword">AND</span> product_id <span class="cm-operator">=</span> products<span class="cm-variable-2">.id</span>
  <span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> department_id
  <span class="cm-keyword">HAVING</span> <span class="cm-keyword">SUM</span><span class="cm-bracket">(</span>price<span class="cm-bracket">)</span> <span class="cm-operator">&gt;</span> <span class="cm-number">10000</span><span class="cm-punctuation">;</span>
<span class="cm-keyword">SELECT</span> members<span class="cm-variable-2">.id</span><span class="cm-punctuation">,</span> members<span class="cm-variable-2">.name</span><span class="cm-punctuation">,</span> email<span class="cm-punctuation">,</span> <span class="cm-keyword">SUM</span><span class="cm-bracket">(</span>price<span class="cm-bracket">)</span> total_spending
<span class="cm-keyword">FROM</span> members<span class="cm-punctuation">,</span> products<span class="cm-punctuation">,</span> sales <span class="cm-keyword">JOIN</span> members_approved_for_voucher <span class="cm-keyword">USING</span> <span class="cm-bracket">(</span>department_id<span class="cm-bracket">)</span>
<span class="cm-keyword">WHERE</span> members<span class="cm-variable-2">.id</span> <span class="cm-operator">=</span> member_id <span class="cm-keyword">AND</span> product_id <span class="cm-operator">=</span> products<span class="cm-variable-2">.id</span>
<span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> members<span class="cm-variable-2">.id</span><span class="cm-punctuation">,</span> members<span class="cm-variable-2">.name</span><span class="cm-punctuation">,</span> email
<span class="cm-keyword">HAVING</span> <span class="cm-keyword">SUM</span><span class="cm-bracket">(</span>price<span class="cm-bracket">)</span> <span class="cm-operator">&gt;</span> <span class="cm-number">1000</span>
<span class="cm-keyword">ORDER</span> <span class="cm-keyword">BY</span> members<span class="cm-variable-2">.id</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T01:53:30.465+0000" title="Nov 9, 2016, 2:53 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5811527d9d278b242f000006/train/sql/5822753eb81f702aea000438">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58116027ba6d22729e000011/groups/582281c3a892b06076000095">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/559590633066759614000063">The highest profit wins!</a></div><h6>Java:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="java"><span class="cm-keyword">class</span> <span class="cm-def">MinMax</span> {
    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">int</span>[] <span class="cm-variable">minMax</span>(<span class="cm-type">int</span>[] <span class="cm-variable">arr</span>) {
        <span class="cm-type">int</span> <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable">arr</span>[<span class="cm-number">0</span>], <span class="cm-variable">h</span> <span class="cm-operator">=</span> <span class="cm-variable">l</span>;
        <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">1</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">arr</span>.<span class="cm-variable">length</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
        {
          <span class="cm-keyword">if</span> (<span class="cm-variable">arr</span>[<span class="cm-variable">i</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">l</span>) <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable">arr</span>[<span class="cm-variable">i</span>];
          <span class="cm-keyword">if</span> (<span class="cm-variable">arr</span>[<span class="cm-variable">i</span>] <span class="cm-operator">&gt;</span> <span class="cm-variable">h</span>) <span class="cm-variable">h</span> <span class="cm-operator">=</span> <span class="cm-variable">arr</span>[<span class="cm-variable">i</span>];
        }
        <span class="cm-keyword">return</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>[] {<span class="cm-variable">l</span>, <span class="cm-variable">h</span>};
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T00:58:34.580+0000" title="Nov 9, 2016, 1:58 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/559590633066759614000063/train/java/58226fe170ca288af1000479">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55ae4736892c21a1950000c5/groups/582274beb81f702d8f000178">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/538ae2eb7a4ba8c99b000439">Evil Autocorrect Prank</a></div><h6>Java:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="java"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">Kata</span> {
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">String</span> <span class="cm-variable">autocorrect</span>(<span class="cm-type">String</span> <span class="cm-variable">input</span>) {
    <span class="cm-keyword">return</span> <span class="cm-variable">input</span>.<span class="cm-variable">replaceAll</span>(<span class="cm-string">"(?i)(?&lt;=\\W|^)(you+|u)(?=\\W|$)"</span>, <span class="cm-string">"your sister"</span>);
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T00:36:52.806+0000" title="Nov 9, 2016, 1:36 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/538ae2eb7a4ba8c99b000439/train/java/5822698f34c53a24ef002b30">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5759d0669c31a1bfe6000012/groups/58226fa80ecd11537e000013">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/56541980fa08ab47a0000040">Printer Errors</a></div><h6>Java:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="java"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">Printer</span> {
    
    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">String</span> <span class="cm-variable">printerError</span>(<span class="cm-type">String</span> <span class="cm-variable">s</span>) {
        <span class="cm-type">int</span> <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>, <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable">s</span>.<span class="cm-variable">length</span>();
        <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">l</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
          <span class="cm-keyword">if</span> (<span class="cm-string">"abcdefghijklm"</span>.<span class="cm-variable">indexOf</span>(<span class="cm-variable">s</span>.<span class="cm-variable">charAt</span>(<span class="cm-variable">i</span>)) <span class="cm-operator">&lt;</span> <span class="cm-number">0</span>) <span class="cm-variable">n</span><span class="cm-operator">++</span>;
        <span class="cm-keyword">return</span> <span class="cm-type">String</span>.<span class="cm-variable">format</span>(<span class="cm-string">"%1$d/%2$d"</span>, <span class="cm-variable">n</span>, <span class="cm-variable">l</span>);
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T00:08:45.292+0000" title="Nov 9, 2016, 1:08 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56541980fa08ab47a0000040/train/java/582268f970ca28ae6b0000b6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56541fdbfa08ab68a2000055/groups/5822690fb81f702d8f0000fe">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="java"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">Printer</span> {
    
    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">String</span> <span class="cm-variable">printerError</span>(<span class="cm-type">String</span> <span class="cm-variable">s</span>) {
        <span class="cm-type">int</span> <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>, <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable">s</span>.<span class="cm-variable">length</span>();
        <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">l</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
          <span class="cm-keyword">if</span> (<span class="cm-string">"abcdefghijklm"</span>.<span class="cm-variable">indexOf</span>(<span class="cm-variable">s</span>.<span class="cm-variable">charAt</span>(<span class="cm-variable">i</span>)) <span class="cm-operator">&lt;</span> <span class="cm-number">0</span>) <span class="cm-variable">n</span><span class="cm-operator">++</span>;
        <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-type">String</span>.<span class="cm-variable">format</span>(<span class="cm-string">"%1$d/%2$d"</span>, <span class="cm-variable">n</span>, <span class="cm-variable">l</span>));
        <span class="cm-keyword">return</span> <span class="cm-type">String</span>.<span class="cm-variable">format</span>(<span class="cm-string">"%1$d/%2$d"</span>, <span class="cm-variable">n</span>, <span class="cm-variable">l</span>);
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-09T00:07:08.965+0000" title="Nov 9, 2016, 1:07 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56541980fa08ab47a0000040/train/java/582262ec34c53af4b60001b6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56541fdbfa08ab68a2000055/groups/582268eefd3867fcd9000002">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5469e0798a3502f4a90005c9">Rotate Array</a></div><h6>Java:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="java"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">Rotator</span> {

  <span class="cm-keyword">public</span> <span class="cm-type">Object</span>[] <span class="cm-variable">rotate</span>(<span class="cm-type">Object</span>[] <span class="cm-variable">data</span>, <span class="cm-type">int</span> <span class="cm-variable">n</span>) {
    <span class="cm-type">int</span> <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable">data</span>.<span class="cm-variable">length</span>;
    <span class="cm-type">Object</span>[] <span class="cm-variable">r</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">Object</span>[<span class="cm-variable">l</span>];
    <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">l</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
      <span class="cm-variable">r</span>[<span class="cm-variable">i</span>] <span class="cm-operator">=</span> <span class="cm-variable">data</span>[(<span class="cm-variable">i</span> <span class="cm-operator">-</span> (<span class="cm-variable">n</span> <span class="cm-operator">%</span> <span class="cm-variable">l</span>) <span class="cm-operator">+</span> <span class="cm-variable">l</span>) <span class="cm-operator">%</span> <span class="cm-variable">l</span>];
    <span class="cm-keyword">return</span> <span class="cm-variable">r</span>;
  }

}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-08T23:51:22.556+0000" title="Nov 9, 2016, 12:51 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5469e0798a3502f4a90005c9/train/java/582255f434c53ace490001e6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5469e3d30a90c6c8a500005e/groups/5822622efd38673523000186">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/537e18b6147aa838f600001b">Text align justify</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">justify</span>(<span class="cm-variable">text</span>, <span class="cm-variable">width</span>):
    <span class="cm-variable">j</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
    <span class="cm-variable">l</span> <span class="cm-operator">=</span> []
    <span class="cm-variable">f</span> <span class="cm-operator">=</span> <span class="cm-variable">width</span>
    <span class="cm-keyword">for</span> <span class="cm-variable">w</span> <span class="cm-keyword">in</span> <span class="cm-variable">text</span>.<span class="cm-property">split</span>():
        <span class="cm-variable">c</span> <span class="cm-operator">=</span> <span class="cm-builtin">len</span>(<span class="cm-variable">l</span>) <span class="cm-operator">-</span> <span class="cm-number">1</span>
        <span class="cm-keyword">if</span> <span class="cm-builtin">len</span>(<span class="cm-variable">w</span>) <span class="cm-operator">+</span> <span class="cm-variable">c</span> <span class="cm-operator">&gt;=</span> <span class="cm-variable">f</span>:
            <span class="cm-keyword">if</span> <span class="cm-variable">c</span>:
                <span class="cm-variable">q</span>, <span class="cm-variable">r</span> <span class="cm-operator">=</span> <span class="cm-builtin">divmod</span>(<span class="cm-variable">f</span>, <span class="cm-variable">c</span>)
                <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-keyword">in</span> <span class="cm-builtin">range</span>(<span class="cm-variable">c</span>):
                    <span class="cm-variable">j</span> <span class="cm-operator">+=</span> <span class="cm-variable">l</span>[<span class="cm-variable">i</span>] <span class="cm-operator">+</span> <span class="cm-string">" "</span> <span class="cm-operator">*</span> (<span class="cm-variable">q</span> <span class="cm-operator">+</span> (<span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">r</span>))
            <span class="cm-variable">j</span> <span class="cm-operator">+=</span> <span class="cm-variable">l</span>[<span class="cm-variable">c</span>] <span class="cm-operator">+</span> <span class="cm-string">"\n"</span>
            <span class="cm-variable">l</span> <span class="cm-operator">=</span> []
            <span class="cm-variable">f</span> <span class="cm-operator">=</span> <span class="cm-variable">width</span>
        <span class="cm-variable">l</span> <span class="cm-operator">+=</span> [<span class="cm-variable">w</span>]
        <span class="cm-variable">f</span> <span class="cm-operator">-=</span> <span class="cm-builtin">len</span>(<span class="cm-variable">w</span>)
    <span class="cm-keyword">return</span> <span class="cm-variable">j</span> <span class="cm-operator">+</span> <span class="cm-string">" "</span>.<span class="cm-property">join</span>(<span class="cm-variable">l</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-08T01:03:12.724+0000" title="Nov 8, 2016, 2:03 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/537e18b6147aa838f600001b/train/python/5821240a32ed69c9dc0000b3">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54cd5ea807ba216c9e0000a3/groups/5821246032ed6936400000a8">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">justify</span>(<span class="cm-variable">text</span>, <span class="cm-variable">width</span>):
    <span class="cm-variable">j</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
    <span class="cm-variable">l</span> <span class="cm-operator">=</span> []
    <span class="cm-variable">f</span> <span class="cm-operator">=</span> <span class="cm-variable">width</span>
    <span class="cm-keyword">for</span> <span class="cm-variable">w</span> <span class="cm-keyword">in</span> <span class="cm-variable">text</span>.<span class="cm-property">split</span>():
        <span class="cm-variable">c</span> <span class="cm-operator">=</span> <span class="cm-builtin">len</span>(<span class="cm-variable">l</span>) <span class="cm-operator">-</span> <span class="cm-number">1</span>
        <span class="cm-keyword">if</span> <span class="cm-builtin">len</span>(<span class="cm-variable">w</span>) <span class="cm-operator">+</span> <span class="cm-variable">c</span> <span class="cm-operator">&gt;=</span> <span class="cm-variable">f</span>:
            <span class="cm-keyword">if</span> <span class="cm-variable">c</span>:
                <span class="cm-variable">q</span>, <span class="cm-variable">r</span> <span class="cm-operator">=</span> <span class="cm-builtin">divmod</span>(<span class="cm-variable">f</span>, <span class="cm-variable">c</span>)
                <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-keyword">in</span> <span class="cm-builtin">range</span>(<span class="cm-variable">c</span>):
                    <span class="cm-variable">j</span> <span class="cm-operator">+=</span> <span class="cm-variable">l</span>[<span class="cm-variable">i</span>] <span class="cm-operator">+</span> <span class="cm-string">" "</span> <span class="cm-operator">*</span> <span class="cm-variable">q</span>
                    <span class="cm-keyword">if</span> <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">r</span>: <span class="cm-variable">j</span> <span class="cm-operator">+=</span> <span class="cm-string">" "</span>
            <span class="cm-variable">j</span> <span class="cm-operator">+=</span> <span class="cm-variable">l</span>[<span class="cm-variable">c</span>] <span class="cm-operator">+</span> <span class="cm-string">"\n"</span>
            <span class="cm-variable">l</span> <span class="cm-operator">=</span> []
            <span class="cm-variable">f</span> <span class="cm-operator">=</span> <span class="cm-variable">width</span>
        <span class="cm-variable">l</span> <span class="cm-operator">+=</span> [<span class="cm-variable">w</span>]
        <span class="cm-variable">f</span> <span class="cm-operator">-=</span> <span class="cm-builtin">len</span>(<span class="cm-variable">w</span>)
    <span class="cm-keyword">return</span> <span class="cm-variable">j</span> <span class="cm-operator">+</span> <span class="cm-string">" "</span>.<span class="cm-property">join</span>(<span class="cm-variable">l</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-08T00:59:48.073+0000" title="Nov 8, 2016, 1:59 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/537e18b6147aa838f600001b/train/python/58211604ecfc5bc436000d23">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54cd5ea807ba216c9e0000a3/groups/582123a1b81f70c0d50000ab">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/55c04b4cc56a697bb0000048">Scramblies</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Scramblies</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">scramble</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Bool</span>
<span class="cm-variable">scramble</span> <span class="cm-variable">s1</span> <span class="cm-variable">s2</span> <span class="cm-keyword">=</span> <span class="cm-variable">sortedSubsequece</span> (<span class="cm-variable">sort</span> <span class="cm-variable">s2</span>) (<span class="cm-variable">sort</span> <span class="cm-variable">s1</span>) <span class="cm-keyword">where</span>
  <span class="cm-variable">sortedSubsequece</span> <span class="cm-string">""</span> <span class="cm-keyword">_</span> <span class="cm-keyword">=</span> <span class="cm-builtin">True</span>
  <span class="cm-variable">sortedSubsequece</span> (<span class="cm-variable">h</span><span class="cm-keyword">:</span><span class="cm-variable">t</span>) <span class="cm-variable">s</span> <span class="cm-keyword">=</span> <span class="cm-keyword">case</span> <span class="cm-builtin">dropWhile</span> (<span class="cm-builtin">/=</span><span class="cm-variable">h</span>) <span class="cm-variable">s</span> <span class="cm-keyword">of</span>
    [] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">False</span>
    (<span class="cm-keyword">_</span><span class="cm-keyword">:</span><span class="cm-variable">r</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable">sortedSubsequece</span> <span class="cm-variable">t</span> <span class="cm-variable">r</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T22:04:04.905+0000" title="Nov 6, 2016, 11:04 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55c04b4cc56a697bb0000048/train/haskell/581fa6111bf8ba647c000175">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5696020b56d67d92cc00000a/groups/581fa8faf5ef5918e1001330">Discuss</a></li></ul><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">scramble</span>(<span class="cm-variable">s1</span>,<span class="cm-variable">s2</span>):
    <span class="cm-variable">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>.<span class="cm-property">join</span>(<span class="cm-builtin">sorted</span>(<span class="cm-variable">s1</span>))
    <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>
    <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-builtin">sorted</span>(<span class="cm-variable">s2</span>):
        <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-variable">s</span>.<span class="cm-property">find</span>(<span class="cm-variable">c</span>, <span class="cm-variable">i</span>) <span class="cm-operator">+</span> <span class="cm-number">1</span>
        <span class="cm-keyword">if</span> <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-number">1</span>: <span class="cm-keyword">return</span> <span class="cm-keyword">False</span>
    <span class="cm-keyword">return</span> <span class="cm-keyword">True</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-08T00:01:03.858+0000" title="Nov 8, 2016, 1:01 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55c04b4cc56a697bb0000048/train/python/5821159d32ed69010e000016">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55f13ac410a4a6fa0c000022/groups/582115c370ca28e17c000173">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">scramble</span>(<span class="cm-variable">s1</span>,<span class="cm-variable">s2</span>):
    <span class="cm-variable">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>.<span class="cm-property">join</span>(<span class="cm-builtin">sorted</span>(<span class="cm-variable">s1</span>))
    <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>
    <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-builtin">sorted</span>(<span class="cm-variable">s2</span>):
        <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-variable">s</span>.<span class="cm-property">find</span>(<span class="cm-variable">c</span>, <span class="cm-variable">i</span>) <span class="cm-operator">+</span> <span class="cm-number">1</span>
        <span class="cm-keyword">if</span> <span class="cm-keyword">not</span> <span class="cm-variable">i</span>: <span class="cm-keyword">return</span> <span class="cm-keyword">False</span>
    <span class="cm-keyword">return</span> <span class="cm-keyword">True</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T23:54:35.678+0000" title="Nov 8, 2016, 12:54 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55c04b4cc56a697bb0000048/train/python/5821030becfc5beccb00010f">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55f13ac410a4a6fa0c000022/groups/58211441b81f70c0d5000002">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5541f58a944b85ce6d00006a">Product of consecutive Fib numbers</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">productFib</span>(<span class="cm-variable">prod</span>):
    <span class="cm-variable">a</span>, <span class="cm-variable">b</span>, <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>, <span class="cm-number">1</span>, <span class="cm-number">0</span>
    <span class="cm-keyword">while</span> <span class="cm-variable">n</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">prod</span>:
        <span class="cm-variable">a</span>, <span class="cm-variable">b</span> <span class="cm-operator">=</span> <span class="cm-variable">b</span>, <span class="cm-variable">a</span> <span class="cm-operator">+</span> <span class="cm-variable">b</span>
        <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-variable">a</span> <span class="cm-operator">*</span> <span class="cm-variable">b</span>
    <span class="cm-keyword">return</span> [<span class="cm-variable">a</span>, <span class="cm-variable">b</span>, <span class="cm-variable">n</span> <span class="cm-operator">==</span> <span class="cm-variable">prod</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T22:39:36.387+0000" title="Nov 7, 2016, 11:39 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5541f58a944b85ce6d00006a/train/python/5820fe072fd4206d380004e9">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5544e02c93ad59cef4000016/groups/582102cb70ca2857780010a5">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/525f039017c7cd0e1a000a26">Palindrome chain length</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">palindrome_chain_length</span>(<span class="cm-variable">n</span>):
    <span class="cm-variable">m</span> <span class="cm-operator">=</span> <span class="cm-builtin">int</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">n</span>)[:: <span class="cm-operator">-</span><span class="cm-number">1</span>])
    <span class="cm-keyword">return</span> <span class="cm-variable">n</span> <span class="cm-operator">-</span> <span class="cm-variable">m</span> <span class="cm-keyword">and</span> <span class="cm-number">1</span> <span class="cm-operator">+</span> <span class="cm-variable">palindrome_chain_length</span>(<span class="cm-variable">n</span> <span class="cm-operator">+</span> <span class="cm-variable">m</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T22:14:25.664+0000" title="Nov 7, 2016, 11:14 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/525f039017c7cd0e1a000a26/train/python/5820f802ecfc5beccb00006e">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54610f90c71d2c785a000050/groups/5820fccfffe619016b000044">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5384df88aa6fc164bb000e7d">Don't Eat the Last Cake!</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">class</span> <span class="cm-def">Player</span>:
  <span class="cm-keyword">def</span> <span class="cm-def">__init__</span>(<span class="cm-variable-2">self</span>, <span class="cm-variable">cakes</span>): <span class="cm-keyword">pass</span>
  <span class="cm-keyword">def</span> <span class="cm-def">firstmove</span>(<span class="cm-variable-2">self</span>, <span class="cm-variable">cakes</span>):
    <span class="cm-keyword">return</span> <span class="cm-variable">cakes</span> <span class="cm-operator">&gt;</span> <span class="cm-number">1</span> <span class="cm-keyword">and</span> <span class="cm-variable">cakes</span> <span class="cm-operator">%</span> <span class="cm-number">4</span> <span class="cm-operator">!=</span> <span class="cm-number">2</span>
  <span class="cm-keyword">def</span> <span class="cm-def">move</span>(<span class="cm-variable-2">self</span>, <span class="cm-variable">cakes</span>, <span class="cm-variable">last</span>):
    <span class="cm-variable">r</span> <span class="cm-operator">=</span> <span class="cm-variable">cakes</span> <span class="cm-operator">%</span> <span class="cm-number">4</span>
    <span class="cm-keyword">return</span> (<span class="cm-number">3</span>, <span class="cm-number">1</span>)[<span class="cm-variable">r</span> <span class="cm-operator">/</span> <span class="cm-number">2</span>] <span class="cm-keyword">if</span> <span class="cm-variable">r</span> <span class="cm-keyword">or</span> <span class="cm-variable">last</span> <span class="cm-operator">&lt;</span> <span class="cm-number">3</span> <span class="cm-keyword">else</span> <span class="cm-number">2</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T21:31:46.804+0000" title="Nov 7, 2016, 10:31 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5384df88aa6fc164bb000e7d/train/python/5820d27e9dcdc0139c000023">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/53d7bb3b093f99f301000a6b/groups/5820f2cc92800897de000112">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>3 kyu</span></div></div><a href="/kata/54808fc8ab03a23e82000a1f">Data Types à la Carte</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-meta">{-# LANGUAGE TypeOperators, DeriveFunctor, MultiParamTypeClasses, FlexibleInstances, FlexibleContexts, OverlappingInstances #-}</span>
<span class="cm-keyword">module</span> <span class="cm-variable-2">ALaCarte</span> <span class="cm-keyword">where</span>

<span class="cm-comment">-- Definitions</span>
<span class="cm-keyword">data</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">In</span> (<span class="cm-variable">f</span> (<span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span>))

<span class="cm-comment">-- We define a separate data type for each constructor we want to use</span>
<span class="cm-comment">-- then we can combine them together using the (:+:) operator to make</span>
<span class="cm-comment">-- our data types à la carte.</span>

<span class="cm-keyword">data</span> <span class="cm-variable-2">Lit</span> <span class="cm-variable">a</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Lit</span> <span class="cm-builtin">Int</span>
<span class="cm-keyword">data</span> <span class="cm-variable-2">Add</span> <span class="cm-variable">a</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Add</span> <span class="cm-variable">a</span> <span class="cm-variable">a</span>

<span class="cm-comment">-- Coproduct</span>
<span class="cm-keyword">data</span> (<span class="cm-variable">f</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable">g</span>) <span class="cm-variable">e</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Inl</span> (<span class="cm-variable">f</span> <span class="cm-variable">e</span>) <span class="cm-variable">|</span> <span class="cm-variable-2">Inr</span> (<span class="cm-variable">g</span> <span class="cm-variable">e</span>)
<span class="cm-keyword">infixr</span> <span class="cm-number">1</span> <span class="cm-variable-2">:+:</span>

<span class="cm-comment">-- By defining functor instances we can write a generic fold operator</span>
<span class="cm-comment">-- which will be useful to evaluate our expressions.</span>

<span class="cm-keyword">instance</span> <span class="cm-builtin">Functor</span> <span class="cm-variable-2">Lit</span> <span class="cm-keyword">where</span>
  <span class="cm-builtin">fmap</span> <span class="cm-variable">f</span> (<span class="cm-variable-2">Lit</span> <span class="cm-variable">x</span>) <span class="cm-keyword">=</span> <span class="cm-variable-2">Lit</span> <span class="cm-variable">x</span>

<span class="cm-keyword">instance</span> <span class="cm-builtin">Functor</span> <span class="cm-variable-2">Add</span> <span class="cm-keyword">where</span>
  <span class="cm-builtin">fmap</span> <span class="cm-variable">f</span> (<span class="cm-variable-2">Add</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span>) <span class="cm-keyword">=</span> <span class="cm-variable-2">Add</span> (<span class="cm-variable">f</span> <span class="cm-variable">x</span>) (<span class="cm-variable">f</span> <span class="cm-variable">y</span>)

<span class="cm-keyword">instance</span> (<span class="cm-builtin">Functor</span> <span class="cm-variable">f</span>, <span class="cm-builtin">Functor</span> <span class="cm-variable">g</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-builtin">Functor</span> (<span class="cm-variable">f</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable">g</span>) <span class="cm-keyword">where</span>
  <span class="cm-builtin">fmap</span> <span class="cm-variable">f</span> (<span class="cm-variable-2">Inl</span> <span class="cm-variable">a</span>) <span class="cm-keyword">=</span> <span class="cm-variable-2">Inl</span> (<span class="cm-builtin">fmap</span> <span class="cm-variable">f</span> <span class="cm-variable">a</span>)
  <span class="cm-builtin">fmap</span> <span class="cm-variable">f</span> (<span class="cm-variable-2">Inr</span> <span class="cm-variable">b</span>) <span class="cm-keyword">=</span> <span class="cm-variable-2">Inr</span> (<span class="cm-builtin">fmap</span> <span class="cm-variable">f</span> <span class="cm-variable">b</span>)

<span class="cm-variable">foldExpr</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Functor</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> (<span class="cm-variable">f</span> <span class="cm-variable">a</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">a</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">a</span>
<span class="cm-variable">foldExpr</span> <span class="cm-variable">f</span> (<span class="cm-variable-2">In</span> <span class="cm-variable">e</span>) <span class="cm-keyword">=</span> <span class="cm-variable">f</span> (<span class="cm-builtin">fmap</span> (<span class="cm-variable">foldExpr</span> <span class="cm-variable">f</span>) <span class="cm-variable">e</span>)

<span class="cm-comment">-- Now we can write a simple interpreter. Your definitions should correspond</span>
<span class="cm-comment">-- closely with the definition for the old interpreter given in the description.</span>

<span class="cm-keyword">class</span> <span class="cm-builtin">Functor</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Eval</span> <span class="cm-variable">f</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">evalAlgebra</span> <span class="cm-keyword">::</span> <span class="cm-variable">f</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Eval</span> <span class="cm-variable-2">Lit</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">evalAlgebra</span> (<span class="cm-variable-2">Lit</span> <span class="cm-variable">x</span>) <span class="cm-keyword">=</span> <span class="cm-variable">x</span>

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Eval</span> <span class="cm-variable-2">Add</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">evalAlgebra</span> (<span class="cm-variable-2">Add</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span>) <span class="cm-keyword">=</span> <span class="cm-variable">x</span> <span class="cm-builtin">+</span> <span class="cm-variable">y</span>

<span class="cm-keyword">instance</span> (<span class="cm-variable-2">Eval</span> <span class="cm-variable">f</span>, <span class="cm-variable-2">Eval</span> <span class="cm-variable">g</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Eval</span> (<span class="cm-variable">f</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable">g</span>) <span class="cm-keyword">where</span>
  <span class="cm-variable">evalAlgebra</span> (<span class="cm-variable-2">Inl</span> <span class="cm-variable">l</span>) <span class="cm-keyword">=</span> <span class="cm-variable">evalAlgebra</span> <span class="cm-variable">l</span>
  <span class="cm-variable">evalAlgebra</span> (<span class="cm-variable-2">Inr</span> <span class="cm-variable">r</span>) <span class="cm-keyword">=</span> <span class="cm-variable">evalAlgebra</span> <span class="cm-variable">r</span>
  
<span class="cm-variable">eval</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Eval</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">eval</span> <span class="cm-keyword">=</span> <span class="cm-variable">foldExpr</span> <span class="cm-variable">evalAlgebra</span>

<span class="cm-comment">-- HINT: Use foldExpr</span>

<span class="cm-comment">-- The problem is that it is painful to write expressions. </span>
<span class="cm-comment">-- This is how you would write 5+6</span>

<span class="cm-variable">pain</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Expr</span> (<span class="cm-variable-2">Lit</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable-2">Add</span>)
<span class="cm-variable">pain</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">In</span> (<span class="cm-variable-2">Inr</span> (<span class="cm-variable-2">Add</span> (<span class="cm-variable-2">In</span> (<span class="cm-variable-2">Inl</span> (<span class="cm-variable-2">Lit</span> <span class="cm-number">5</span>))) (<span class="cm-variable-2">In</span> (<span class="cm-variable-2">Inl</span> (<span class="cm-variable-2">Lit</span> <span class="cm-number">6</span>)))))

<span class="cm-comment">-- Injection</span>
<span class="cm-comment">-- To ease writing expressions, we will now define a type class</span>
<span class="cm-comment">-- which will choose the right constructors for us. Think of the sub :&lt;: sup to say that</span>
<span class="cm-comment">-- sub is a subtype of sup. </span>

<span class="cm-comment">-- It might also help to think of :+: as the cons operator for a type level list.</span>
<span class="cm-comment">-- Then the type class can be viewed as searching for the correct injection by</span>
<span class="cm-comment">-- searching through the list for the correct type.</span>

<span class="cm-keyword">class</span> (<span class="cm-builtin">Functor</span> <span class="cm-variable">sub</span>, <span class="cm-builtin">Functor</span> <span class="cm-variable">sup</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable">sub</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">sup</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">inj</span> <span class="cm-keyword">::</span> <span class="cm-variable">sub</span> <span class="cm-variable">a</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">sup</span> <span class="cm-variable">a</span>


<span class="cm-comment">-- Reflexivity</span>
<span class="cm-keyword">instance</span> <span class="cm-builtin">Functor</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">f</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">inj</span> <span class="cm-keyword">=</span> <span class="cm-builtin">id</span>

<span class="cm-keyword">instance</span> (<span class="cm-builtin">Functor</span> <span class="cm-variable">f</span>, <span class="cm-builtin">Functor</span> <span class="cm-variable">g</span>) <span class="cm-keyword">=&gt;</span>  <span class="cm-variable">f</span> <span class="cm-variable-2">:&lt;:</span> (<span class="cm-variable">f</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable">g</span>) <span class="cm-keyword">where</span>
  <span class="cm-variable">inj</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Inl</span>

<span class="cm-keyword">instance</span> (<span class="cm-builtin">Functor</span> <span class="cm-variable">f</span>, <span class="cm-builtin">Functor</span> <span class="cm-variable">g</span>, <span class="cm-builtin">Functor</span> <span class="cm-variable">h</span>, <span class="cm-variable">f</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">g</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable">f</span> <span class="cm-variable-2">:&lt;:</span> (<span class="cm-variable">h</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable">g</span>) <span class="cm-keyword">where</span>
  <span class="cm-variable">inj</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Inr</span> <span class="cm-builtin">.</span> <span class="cm-variable">inj</span>
  
<span class="cm-comment">-- Note: This part requires overlapping instances, this is safe as long as :+: associates to the right.</span>
<span class="cm-comment">-- A modern implementation would use type families. </span>

<span class="cm-comment">-- Then we can use this type class to write smart constructors.</span>

<span class="cm-variable">inject</span> <span class="cm-keyword">::</span> (<span class="cm-variable">g</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">f</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable">g</span> (<span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span>
<span class="cm-variable">inject</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">In</span> <span class="cm-builtin">.</span> <span class="cm-variable">inj</span>

<span class="cm-variable">lit</span> <span class="cm-keyword">::</span> (<span class="cm-variable-2">Lit</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">f</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span>
<span class="cm-variable">lit</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-variable">inject</span> (<span class="cm-variable-2">Lit</span> <span class="cm-variable">n</span>)

<span class="cm-variable">add</span> <span class="cm-keyword">::</span> (<span class="cm-variable-2">Add</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">f</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span>
<span class="cm-variable">add</span> <span class="cm-variable">e1</span> <span class="cm-variable">e2</span> <span class="cm-keyword">=</span> <span class="cm-variable">inject</span> (<span class="cm-variable-2">Add</span> <span class="cm-variable">e1</span> <span class="cm-variable">e2</span>)

<span class="cm-comment">-- Then as long as we specify the type, writing expressions is easy.</span>

<span class="cm-variable">expr</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Expr</span> (<span class="cm-variable-2">Add</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable-2">Lit</span>)
<span class="cm-variable">expr</span> <span class="cm-keyword">=</span> <span class="cm-variable">add</span> (<span class="cm-variable">lit</span> <span class="cm-number">5</span>) (<span class="cm-variable">lit</span> <span class="cm-number">6</span>)

<span class="cm-comment">-- &gt; eval expr</span>
<span class="cm-comment">-- 11</span>

<span class="cm-comment">-- We can add multiplication very easily.</span>

<span class="cm-keyword">data</span> <span class="cm-variable-2">Mult</span> <span class="cm-variable">a</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">Mult</span> <span class="cm-variable">a</span> <span class="cm-variable">a</span> <span class="cm-keyword">deriving</span> <span class="cm-builtin">Functor</span>

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Eval</span> <span class="cm-variable-2">Mult</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">evalAlgebra</span> (<span class="cm-variable-2">Mult</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span>) <span class="cm-keyword">=</span> <span class="cm-variable">x</span> <span class="cm-builtin">*</span> <span class="cm-variable">y</span>

<span class="cm-variable">mult</span> <span class="cm-keyword">::</span> (<span class="cm-variable-2">Mult</span> <span class="cm-variable-2">:&lt;:</span> <span class="cm-variable">f</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span>
<span class="cm-variable">mult</span> <span class="cm-variable">e1</span> <span class="cm-variable">e2</span> <span class="cm-keyword">=</span> <span class="cm-variable">inject</span> (<span class="cm-variable-2">Mult</span> <span class="cm-variable">e1</span> <span class="cm-variable">e2</span>)

<span class="cm-comment">-- We must specify the type of expressions</span>
<span class="cm-variable">expr2</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Expr</span> (<span class="cm-variable-2">Mult</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable-2">Add</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable-2">Lit</span>)
<span class="cm-variable">expr2</span> <span class="cm-keyword">=</span> <span class="cm-variable">mult</span> (<span class="cm-variable">add</span> (<span class="cm-variable">lit</span> <span class="cm-number">5</span>) (<span class="cm-variable">lit</span> <span class="cm-number">6</span>)) (<span class="cm-variable">lit</span> <span class="cm-number">2</span>)

<span class="cm-comment">-- &gt; eval expr</span>
<span class="cm-comment">-- 22</span>

<span class="cm-comment">-- Adding a new interpreter</span>
<span class="cm-comment">-- To add a pretty printer, we define a new type class in much the</span>
<span class="cm-comment">-- same way as for the first interpreter. </span>

<span class="cm-keyword">class</span> <span class="cm-builtin">Functor</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Pretty</span> <span class="cm-variable">f</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">prettyAlgebra</span> <span class="cm-keyword">::</span> <span class="cm-variable">f</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>

<span class="cm-variable">pretty</span> <span class="cm-keyword">::</span> <span class="cm-variable-2">Pretty</span> <span class="cm-variable">f</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Expr</span> <span class="cm-variable">f</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">pretty</span> <span class="cm-keyword">=</span> <span class="cm-variable">foldExpr</span> <span class="cm-variable">prettyAlgebra</span>

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Pretty</span> <span class="cm-variable-2">Lit</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">prettyAlgebra</span> (<span class="cm-variable-2">Lit</span> <span class="cm-variable">x</span>) <span class="cm-keyword">=</span> <span class="cm-builtin">show</span> <span class="cm-variable">x</span>

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Pretty</span> <span class="cm-variable-2">Add</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">prettyAlgebra</span> (<span class="cm-variable-2">Add</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span>) <span class="cm-keyword">=</span> <span class="cm-string">'('</span> <span class="cm-keyword">:</span> <span class="cm-variable">x</span> <span class="cm-builtin">++</span> <span class="cm-string">"+"</span> <span class="cm-builtin">++</span> <span class="cm-variable">y</span> <span class="cm-builtin">++</span> <span class="cm-string">")"</span>

<span class="cm-keyword">instance</span> <span class="cm-variable-2">Pretty</span> <span class="cm-variable-2">Mult</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">prettyAlgebra</span> (<span class="cm-variable-2">Mult</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span>) <span class="cm-keyword">=</span> <span class="cm-string">'('</span> <span class="cm-keyword">:</span> <span class="cm-variable">x</span> <span class="cm-builtin">++</span> <span class="cm-string">"*"</span> <span class="cm-builtin">++</span> <span class="cm-variable">y</span> <span class="cm-builtin">++</span> <span class="cm-string">")"</span>

<span class="cm-keyword">instance</span> (<span class="cm-variable-2">Pretty</span> <span class="cm-variable">f</span>, <span class="cm-variable-2">Pretty</span> <span class="cm-variable">g</span>) <span class="cm-keyword">=&gt;</span> <span class="cm-variable-2">Pretty</span> (<span class="cm-variable">f</span> <span class="cm-variable-2">:+:</span> <span class="cm-variable">g</span>) <span class="cm-keyword">where</span>
  <span class="cm-variable">prettyAlgebra</span> (<span class="cm-variable-2">Inl</span> <span class="cm-variable">l</span>) <span class="cm-keyword">=</span> <span class="cm-variable">prettyAlgebra</span> <span class="cm-variable">l</span>
  <span class="cm-variable">prettyAlgebra</span> (<span class="cm-variable-2">Inr</span> <span class="cm-variable">r</span>) <span class="cm-keyword">=</span> <span class="cm-variable">prettyAlgebra</span> <span class="cm-variable">r</span>
 
<span class="cm-comment">-- &gt; pretty expr1</span>
<span class="cm-comment">-- "(5+6)"</span>
<span class="cm-comment">-- &gt; pretty expr2</span>
<span class="cm-comment">-- "((5+6)*2)"</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T08:26:43.689+0000" title="Nov 7, 2016, 9:26 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54808fc8ab03a23e82000a1f/train/haskell/5820260e70ca28e346000064">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5481629af4aa9b9e3c000051/groups/58203acf70ca28b67d000002">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/52423db9add6f6fc39000354">Conway's Game of Life - Unlimited Edition</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">UnlimitedGameOfLife</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">UnlimitedGameOfLife.</span><span class="cm-variable-2">Preloaded</span> (<span class="cm-variable">htmlize</span>)
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">getGeneration</span> <span class="cm-keyword">::</span> [[<span class="cm-builtin">Int</span>]] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [[<span class="cm-builtin">Int</span>]]
<span class="cm-variable">getGeneration</span> <span class="cm-keyword">=</span> (<span class="cm-builtin">!!</span>) <span class="cm-builtin">.</span> <span class="cm-builtin">iterate</span> (<span class="cm-keyword">\</span><span class="cm-variable">b</span> <span class="cm-keyword">-&gt;</span>
  <span class="cm-keyword">case</span> <span class="cm-builtin">iterate</span> (<span class="cm-variable">transpose</span> <span class="cm-builtin">.</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">.</span> <span class="cm-builtin">dropWhile</span> (<span class="cm-builtin">all</span> (<span class="cm-builtin">==</span><span class="cm-number">0</span>)))
    [[<span class="cm-builtin">fromEnum</span> (<span class="cm-builtin">sum</span> [<span class="cm-variable">e</span> <span class="cm-builtin">!!</span> (<span class="cm-variable">i</span><span class="cm-builtin">+</span><span class="cm-variable">k</span>) <span class="cm-builtin">!!</span> (<span class="cm-variable">j</span><span class="cm-builtin">+</span><span class="cm-variable">l</span>) <span class="cm-variable">|</span> <span class="cm-variable">k</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">o</span>, <span class="cm-variable">l</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">o</span>] `<span class="cm-builtin">elem</span>`
              [[<span class="cm-number">3</span>],[<span class="cm-number">3</span>,<span class="cm-number">4</span>]]<span class="cm-builtin">!!</span>(<span class="cm-variable">e</span><span class="cm-builtin">!!</span><span class="cm-variable">i</span><span class="cm-builtin">!!</span><span class="cm-variable">j</span>))
          <span class="cm-variable">|</span> <span class="cm-variable">j</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-number">1</span> <span class="cm-keyword">..</span> <span class="cm-variable">m</span><span class="cm-builtin">+</span><span class="cm-number">2</span>]]
        <span class="cm-variable">|</span> <span class="cm-keyword">let</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> <span class="cm-variable">b</span>
              <span class="cm-variable">m</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> (<span class="cm-variable">b</span><span class="cm-builtin">!!</span><span class="cm-number">0</span>)
              <span class="cm-variable">e</span> <span class="cm-keyword">=</span> <span class="cm-builtin">iterate</span> (<span class="cm-variable">transpose</span> <span class="cm-builtin">.</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">.</span> <span class="cm-builtin">map</span> ([<span class="cm-number">0</span>,<span class="cm-number">0</span>]<span class="cm-builtin">++</span>)) <span class="cm-variable">b</span> <span class="cm-builtin">!!</span> <span class="cm-number">4</span>
              <span class="cm-variable">o</span> <span class="cm-keyword">=</span> [<span class="cm-builtin">-</span><span class="cm-number">1</span>,<span class="cm-number">0</span>,<span class="cm-number">1</span>],
      <span class="cm-variable">i</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-number">1</span> <span class="cm-keyword">..</span> <span class="cm-variable">n</span><span class="cm-builtin">+</span><span class="cm-number">2</span>]] <span class="cm-builtin">!!</span> <span class="cm-number">4</span>
  <span class="cm-keyword">of</span>
    [] <span class="cm-keyword">-&gt;</span> [[]]
    <span class="cm-variable">r</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">r</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T05:50:16.389+0000" title="Nov 7, 2016, 6:50 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52423db9add6f6fc39000354/train/haskell/582015f34a0963cb270000f9">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55076b6d84439fc64d000125/groups/582016574a0963c662000117">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">UnlimitedGameOfLife</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">UnlimitedGameOfLife.</span><span class="cm-variable-2">Preloaded</span> (<span class="cm-variable">htmlize</span>)
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">getGeneration</span> <span class="cm-keyword">::</span> [[<span class="cm-builtin">Int</span>]] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [[<span class="cm-builtin">Int</span>]]
<span class="cm-variable">getGeneration</span> <span class="cm-variable">b</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">iterate</span> (<span class="cm-keyword">\</span><span class="cm-variable">b</span> <span class="cm-keyword">-&gt;</span>
  <span class="cm-keyword">case</span> <span class="cm-builtin">iterate</span> (<span class="cm-variable">transpose</span> <span class="cm-builtin">.</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">.</span> <span class="cm-builtin">dropWhile</span> (<span class="cm-builtin">all</span> (<span class="cm-builtin">==</span><span class="cm-number">0</span>)))
    [[<span class="cm-builtin">fromEnum</span> (<span class="cm-builtin">sum</span> [<span class="cm-variable">e</span> <span class="cm-builtin">!!</span> (<span class="cm-variable">i</span><span class="cm-builtin">+</span><span class="cm-variable">k</span>) <span class="cm-builtin">!!</span> (<span class="cm-variable">j</span><span class="cm-builtin">+</span><span class="cm-variable">l</span>) <span class="cm-variable">|</span> <span class="cm-variable">k</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">o</span>, <span class="cm-variable">l</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">o</span>] `<span class="cm-builtin">elem</span>`
              [[<span class="cm-number">3</span>],[<span class="cm-number">3</span>,<span class="cm-number">4</span>]]<span class="cm-builtin">!!</span>(<span class="cm-variable">e</span><span class="cm-builtin">!!</span><span class="cm-variable">i</span><span class="cm-builtin">!!</span><span class="cm-variable">j</span>))
          <span class="cm-variable">|</span> <span class="cm-variable">j</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-number">1</span> <span class="cm-keyword">..</span> <span class="cm-variable">m</span><span class="cm-builtin">+</span><span class="cm-number">2</span>]]
        <span class="cm-variable">|</span> <span class="cm-keyword">let</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> <span class="cm-variable">b</span>
              <span class="cm-variable">m</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> (<span class="cm-variable">b</span><span class="cm-builtin">!!</span><span class="cm-number">0</span>)
              <span class="cm-variable">e</span> <span class="cm-keyword">=</span> <span class="cm-builtin">iterate</span> (<span class="cm-variable">transpose</span> <span class="cm-builtin">.</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">.</span> <span class="cm-builtin">map</span> ([<span class="cm-number">0</span>,<span class="cm-number">0</span>]<span class="cm-builtin">++</span>)) <span class="cm-variable">b</span> <span class="cm-builtin">!!</span> <span class="cm-number">4</span>
              <span class="cm-variable">o</span> <span class="cm-keyword">=</span> [<span class="cm-builtin">-</span><span class="cm-number">1</span>,<span class="cm-number">0</span>,<span class="cm-number">1</span>],
      <span class="cm-variable">i</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-number">1</span> <span class="cm-keyword">..</span> <span class="cm-variable">n</span><span class="cm-builtin">+</span><span class="cm-number">2</span>]] <span class="cm-builtin">!!</span> <span class="cm-number">4</span>
  <span class="cm-keyword">of</span>
    [] <span class="cm-keyword">-&gt;</span> [[]]
    <span class="cm-variable">r</span> <span class="cm-keyword">-&gt;</span> <span class="cm-variable">r</span>) <span class="cm-variable">b</span> <span class="cm-builtin">!!</span> <span class="cm-variable">n</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T05:47:57.490+0000" title="Nov 7, 2016, 6:47 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52423db9add6f6fc39000354/train/haskell/5820152d7a3a63b33f0001d6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55076b6d84439fc64d000125/groups/582015b07a3a6361120001bd">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">UnlimitedGameOfLife</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">UnlimitedGameOfLife.</span><span class="cm-variable-2">Preloaded</span> (<span class="cm-variable">htmlize</span>)
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">getGeneration</span> <span class="cm-keyword">::</span> [[<span class="cm-builtin">Int</span>]] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [[<span class="cm-builtin">Int</span>]]
<span class="cm-variable">getGeneration</span> <span class="cm-variable">b</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">iterate</span> (<span class="cm-keyword">\</span><span class="cm-variable">b</span> <span class="cm-keyword">-&gt;</span>
  <span class="cm-keyword">let</span> <span class="cm-variable">r</span> <span class="cm-keyword">=</span> <span class="cm-builtin">iterate</span> (<span class="cm-variable">transpose</span> <span class="cm-builtin">.</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">.</span> <span class="cm-builtin">dropWhile</span> (<span class="cm-builtin">all</span> (<span class="cm-builtin">==</span><span class="cm-number">0</span>)))
        [[<span class="cm-builtin">fromEnum</span> (<span class="cm-builtin">sum</span> [<span class="cm-variable">e</span> <span class="cm-builtin">!!</span> (<span class="cm-variable">i</span><span class="cm-builtin">+</span><span class="cm-variable">k</span>) <span class="cm-builtin">!!</span> (<span class="cm-variable">j</span><span class="cm-builtin">+</span><span class="cm-variable">l</span>) <span class="cm-variable">|</span> <span class="cm-variable">k</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">o</span>, <span class="cm-variable">l</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">o</span>] `<span class="cm-builtin">elem</span>`
                  [[<span class="cm-number">3</span>],[<span class="cm-number">3</span>,<span class="cm-number">4</span>]]<span class="cm-builtin">!!</span>(<span class="cm-variable">e</span><span class="cm-builtin">!!</span><span class="cm-variable">i</span><span class="cm-builtin">!!</span><span class="cm-variable">j</span>))
              <span class="cm-variable">|</span> <span class="cm-variable">j</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-number">1</span> <span class="cm-keyword">..</span> <span class="cm-variable">m</span><span class="cm-builtin">+</span><span class="cm-number">2</span>]]
            <span class="cm-variable">|</span> <span class="cm-keyword">let</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> <span class="cm-variable">b</span>
                  <span class="cm-variable">m</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> (<span class="cm-variable">b</span><span class="cm-builtin">!!</span><span class="cm-number">0</span>)
                  <span class="cm-variable">e</span> <span class="cm-keyword">=</span> <span class="cm-builtin">iterate</span> (<span class="cm-variable">transpose</span> <span class="cm-builtin">.</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">.</span> <span class="cm-builtin">map</span> ([<span class="cm-number">0</span>,<span class="cm-number">0</span>]<span class="cm-builtin">++</span>)) <span class="cm-variable">b</span> <span class="cm-builtin">!!</span> <span class="cm-number">4</span>
                  <span class="cm-variable">o</span> <span class="cm-keyword">=</span> [<span class="cm-builtin">-</span><span class="cm-number">1</span>,<span class="cm-number">0</span>,<span class="cm-number">1</span>],
          <span class="cm-variable">i</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-number">1</span> <span class="cm-keyword">..</span> <span class="cm-variable">n</span><span class="cm-builtin">+</span><span class="cm-number">2</span>]] <span class="cm-builtin">!!</span> <span class="cm-number">4</span>
      <span class="cm-keyword">in</span> <span class="cm-keyword">if</span> <span class="cm-builtin">null</span> <span class="cm-variable">r</span> <span class="cm-keyword">then</span> [[]] <span class="cm-keyword">else</span> <span class="cm-variable">r</span>) <span class="cm-variable">b</span> <span class="cm-builtin">!!</span> <span class="cm-variable">n</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T05:41:51.100+0000" title="Nov 7, 2016, 6:41 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52423db9add6f6fc39000354/train/haskell/581fff933829bef8e0000095">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55076b6d84439fc64d000125/groups/5820144570ca2846b6000058">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/521c2db8ddc89b9b7a0000c1">Snail</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">snail</span>(<span class="cm-variable">array</span>):
    <span class="cm-keyword">return</span> <span class="cm-variable">array</span>[<span class="cm-number">0</span>] <span class="cm-operator">+</span> <span class="cm-variable">snail</span>(
            <span class="cm-builtin">list</span>(<span class="cm-builtin">map</span>(<span class="cm-builtin">list</span>, (<span class="cm-builtin">zip</span>(<span class="cm-operator">*</span><span class="cm-builtin">map</span>(<span class="cm-builtin">reversed</span>, <span class="cm-variable">array</span>[<span class="cm-number">1</span> :])))))
        ) <span class="cm-keyword">if</span> <span class="cm-variable">array</span> <span class="cm-keyword">else</span> []</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T03:15:17.899+0000" title="Nov 7, 2016, 4:15 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/521c2db8ddc89b9b7a0000c1/train/python/581fe8b170ca28d925000296">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54aebf4d1ea50a119c0001a9/groups/581ff1fb3c550813fe000975">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5508249a98b3234f420000fb">First Variation on Caesar Cipher</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">CaesarCipher</span> <span class="cm-keyword">where</span>

<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-builtin">Char</span>

<span class="cm-variable">shift</span> <span class="cm-variable">s</span> <span class="cm-variable">n</span> <span class="cm-variable">c</span> <span class="cm-keyword">=</span> <span class="cm-variable">chr</span> ((<span class="cm-builtin">mod</span> (<span class="cm-variable">ord</span> <span class="cm-variable">c</span> <span class="cm-builtin">-</span> <span class="cm-variable">s</span> <span class="cm-builtin">+</span> <span class="cm-variable">n</span>) <span class="cm-number">26</span>) <span class="cm-builtin">+</span> <span class="cm-variable">s</span>)

<span class="cm-variable">trans</span> <span class="cm-variable">n</span> <span class="cm-variable">c</span> <span class="cm-keyword">=</span>
  <span class="cm-keyword">if</span> <span class="cm-variable">isAsciiUpper</span> <span class="cm-variable">c</span> <span class="cm-keyword">then</span> <span class="cm-variable">shift</span> <span class="cm-number">65</span> <span class="cm-variable">n</span> <span class="cm-variable">c</span>
  <span class="cm-keyword">else</span> <span class="cm-keyword">if</span> <span class="cm-variable">isAsciiLower</span> <span class="cm-variable">c</span> <span class="cm-keyword">then</span> <span class="cm-variable">shift</span> <span class="cm-number">97</span> <span class="cm-variable">n</span> <span class="cm-variable">c</span>
  <span class="cm-keyword">else</span> <span class="cm-variable">c</span>

<span class="cm-variable">chunks</span> <span class="cm-number">0</span> <span class="cm-keyword">_</span> <span class="cm-keyword">_</span> <span class="cm-keyword">=</span> []
<span class="cm-variable">chunks</span> <span class="cm-variable">i</span> <span class="cm-variable">n</span> <span class="cm-variable">l</span> <span class="cm-keyword">=</span> <span class="cm-variable">s</span> <span class="cm-keyword">:</span> <span class="cm-variable">chunks</span> (<span class="cm-variable">i</span><span class="cm-builtin">-</span><span class="cm-number">1</span>) <span class="cm-variable">n</span> <span class="cm-variable">e</span> <span class="cm-keyword">where</span> (<span class="cm-variable">s</span>,<span class="cm-variable">e</span>) <span class="cm-keyword">=</span> <span class="cm-builtin">splitAt</span> <span class="cm-variable">n</span> <span class="cm-variable">l</span>

<span class="cm-variable">demovingShift</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">String</span>] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">demovingShift</span> <span class="cm-variable">l</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">zipWith</span> <span class="cm-variable">trans</span> [<span class="cm-builtin">-</span><span class="cm-variable">n</span>,<span class="cm-builtin">-</span><span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span><span class="cm-keyword">..</span>] (<span class="cm-builtin">concat</span> <span class="cm-variable">l</span>)

<span class="cm-variable">movingShift</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">String</span>]
<span class="cm-variable">movingShift</span> <span class="cm-variable">s</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-variable">chunks</span> <span class="cm-number">5</span> (<span class="cm-builtin">div</span> (<span class="cm-builtin">length</span> <span class="cm-variable">s</span> <span class="cm-builtin">+</span> <span class="cm-number">4</span>) <span class="cm-number">5</span>) (<span class="cm-builtin">zipWith</span> <span class="cm-variable">trans</span> [<span class="cm-variable">n</span><span class="cm-keyword">..</span>] <span class="cm-variable">s</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T02:27:07.250+0000" title="Nov 7, 2016, 3:27 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5508249a98b3234f420000fb/train/haskell/581fdc7b55c3d2d83c0001bd">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/557dcc24893d4ba20b000073/groups/581fe6c97a3a636112000087">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/52f787eb172a8b4ae1000a34">Number of trailing zeros of N!</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Zeros</span> <span class="cm-keyword">where</span>

<span class="cm-variable">zeros</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">zeros</span> <span class="cm-number">0</span> <span class="cm-keyword">=</span> <span class="cm-number">0</span>
<span class="cm-variable">zeros</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-variable">m</span> <span class="cm-builtin">+</span> <span class="cm-variable">zeros</span> <span class="cm-variable">m</span> <span class="cm-keyword">where</span> <span class="cm-variable">m</span> <span class="cm-keyword">=</span> <span class="cm-builtin">div</span> <span class="cm-variable">n</span> <span class="cm-number">5</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-07T01:41:21.437+0000" title="Nov 7, 2016, 2:41 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52f787eb172a8b4ae1000a34/train/haskell/581fda8b6d52ee01290000a5">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/541d5ea6070d5f6d8400004b/groups/581fdbc41bf8ba0e24000c9f">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/53ea3ad17b5dfe1946000278">Sierpinski's Gasket</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Sierpinsky</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">sierpinsky</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integral</span> <span class="cm-variable">a</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable">a</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">sierpinsky</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-variable">intercalate</span> <span class="cm-string">"\n"</span>
  [<span class="cm-variable">intersperse</span> <span class="cm-string">' '</span>  [<span class="cm-keyword">if</span> <span class="cm-variable">b</span> <span class="cm-keyword">then</span> <span class="cm-string">' '</span> <span class="cm-keyword">else</span> <span class="cm-string">'L'</span> <span class="cm-variable">|</span> <span class="cm-variable">b</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">r</span>] <span class="cm-variable">|</span>
    <span class="cm-variable">r</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">genericTake</span> (<span class="cm-number">2</span><span class="cm-builtin">^</span><span class="cm-variable">n</span>) (<span class="cm-builtin">iterate</span> (<span class="cm-keyword">\</span><span class="cm-variable">l</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">zipWith</span> (<span class="cm-builtin">==</span>) (<span class="cm-builtin">True</span><span class="cm-keyword">:</span><span class="cm-variable">l</span>) (<span class="cm-variable">l</span><span class="cm-builtin">++</span>[<span class="cm-builtin">True</span>])) [<span class="cm-builtin">False</span>])]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T23:55:49.533+0000" title="Nov 7, 2016, 12:55 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/53ea3ad17b5dfe1946000278/train/haskell/581fbcb27a3a635dfc00031d">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5428f0cd89fb59aaeb000026/groups/581fc3137a3a631928000586">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5208f99aee097e6552000148">Break camelCase</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">BreakCamelCase</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-builtin">Char</span>

<span class="cm-variable">solution</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">solution</span> <span class="cm-string">""</span> <span class="cm-keyword">=</span> <span class="cm-string">""</span>
<span class="cm-variable">solution</span> (<span class="cm-variable">h</span><span class="cm-keyword">:</span><span class="cm-variable">t</span>) <span class="cm-keyword">=</span> <span class="cm-variable">h</span> <span class="cm-keyword">:</span> <span class="cm-builtin">concat</span> [<span class="cm-keyword">if</span> <span class="cm-variable">isUpper</span> <span class="cm-variable">c</span> <span class="cm-keyword">then</span> [<span class="cm-string">' '</span>,<span class="cm-variable">c</span>] <span class="cm-keyword">else</span> [<span class="cm-variable">c</span>] <span class="cm-variable">|</span> <span class="cm-variable">c</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">t</span>]
<span class="cm-comment">-- Kata poorly described. Initially I interpreted it in a way which</span>
<span class="cm-comment">-- led me to implementing an IMHO better camel breaker:</span>
<span class="cm-comment">--  f s = concat</span>
<span class="cm-comment">--    [if isLower c &amp;&amp; isUpper n then c:" " else [c] | (c,n) &lt;- zip (f s) (tail s ++ "_")]</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T23:27:42.190+0000" title="Nov 7, 2016, 12:27 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5208f99aee097e6552000148/train/haskell/581fb79155c3d28e20000051">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5516ef64a5808b316800010e/groups/581fbc711bf8ba647c000c24">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/5629db57620258aa9d000014">Strings Mix</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Mixin</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">mix</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>]
<span class="cm-variable">mix</span> <span class="cm-variable">s1</span> <span class="cm-variable">s2</span> <span class="cm-keyword">=</span> <span class="cm-variable">intercalate</span> <span class="cm-string">"/"</span> (<span class="cm-builtin">map</span> <span class="cm-builtin">snd</span> (<span class="cm-variable">sort</span>
  [(<span class="cm-builtin">-</span><span class="cm-variable">n</span>, <span class="cm-variable">p</span> <span class="cm-keyword">:</span> <span class="cm-string">":"</span> <span class="cm-builtin">++</span> <span class="cm-builtin">replicate</span> <span class="cm-variable">n</span> <span class="cm-variable">c</span>) <span class="cm-variable">|</span>
    <span class="cm-variable">c</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-string">'a'</span><span class="cm-keyword">..</span><span class="cm-string">'z'</span>],
    <span class="cm-keyword">let</span> [<span class="cm-variable">x</span>,<span class="cm-variable">y</span>] <span class="cm-keyword">=</span> <span class="cm-builtin">map</span> (<span class="cm-builtin">length</span> <span class="cm-builtin">.</span> (<span class="cm-builtin">filter</span> (<span class="cm-builtin">==</span><span class="cm-variable">c</span>))) [<span class="cm-variable">s1</span>,<span class="cm-variable">s2</span>],
    <span class="cm-builtin">max</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span> <span class="cm-builtin">&gt;</span> <span class="cm-number">1</span>,
    <span class="cm-keyword">let</span> (<span class="cm-variable">n</span>,<span class="cm-variable">p</span>) <span class="cm-keyword">=</span> <span class="cm-keyword">case</span> <span class="cm-builtin">compare</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span> <span class="cm-keyword">of</span>
          <span class="cm-builtin">LT</span> <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">y</span>,<span class="cm-string">'2'</span>)
          <span class="cm-builtin">EQ</span> <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">x</span>,<span class="cm-string">'='</span>)
          <span class="cm-builtin">GT</span> <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">x</span>,<span class="cm-string">'1'</span>)]))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T23:02:55.679+0000" title="Nov 7, 2016, 12:02 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5629db57620258aa9d000014/train/haskell/581fb57e5acfe5fd86000087">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5629df24a7c536882c000079/groups/581fb6a655c3d2d83c00005b">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Mixin</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">mix</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>]
<span class="cm-variable">mix</span> <span class="cm-variable">s1</span> <span class="cm-variable">s2</span> <span class="cm-keyword">=</span> <span class="cm-variable">intercalate</span> <span class="cm-string">"/"</span> (<span class="cm-builtin">map</span> <span class="cm-builtin">snd</span> (<span class="cm-variable">sort</span>
  [(<span class="cm-builtin">-</span><span class="cm-builtin">length</span> <span class="cm-variable">s</span>, <span class="cm-variable">s</span>) <span class="cm-variable">|</span>
    <span class="cm-variable">c</span> <span class="cm-keyword">&lt;-</span> [<span class="cm-string">'a'</span><span class="cm-keyword">..</span><span class="cm-string">'z'</span>],
    <span class="cm-keyword">let</span> [<span class="cm-variable">x</span>,<span class="cm-variable">y</span>] <span class="cm-keyword">=</span> <span class="cm-builtin">map</span> (<span class="cm-builtin">length</span> <span class="cm-builtin">.</span> (<span class="cm-builtin">filter</span> (<span class="cm-builtin">==</span><span class="cm-variable">c</span>))) [<span class="cm-variable">s1</span>,<span class="cm-variable">s2</span>],
    <span class="cm-builtin">max</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span> <span class="cm-builtin">&gt;</span> <span class="cm-number">1</span>,
    <span class="cm-keyword">let</span> <span class="cm-variable">s</span> <span class="cm-keyword">=</span> <span class="cm-keyword">case</span> <span class="cm-builtin">compare</span> <span class="cm-variable">x</span> <span class="cm-variable">y</span> <span class="cm-keyword">of</span>
          <span class="cm-builtin">LT</span> <span class="cm-keyword">-&gt;</span> <span class="cm-string">"2:"</span> <span class="cm-builtin">++</span> <span class="cm-builtin">replicate</span> <span class="cm-variable">y</span> <span class="cm-variable">c</span>
          <span class="cm-builtin">EQ</span> <span class="cm-keyword">-&gt;</span> <span class="cm-string">"=:"</span> <span class="cm-builtin">++</span> <span class="cm-builtin">replicate</span> <span class="cm-variable">x</span> <span class="cm-variable">c</span>
          <span class="cm-builtin">GT</span> <span class="cm-keyword">-&gt;</span> <span class="cm-string">"1:"</span> <span class="cm-builtin">++</span> <span class="cm-builtin">replicate</span> <span class="cm-variable">x</span> <span class="cm-variable">c</span>]))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T22:51:35.423+0000" title="Nov 6, 2016, 11:51 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5629db57620258aa9d000014/train/haskell/581fa9f15acfe5b0aa00000a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5629df24a7c536882c000079/groups/581fb4067a3a630df8000b04">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/521ef596c106a935c0000519">(Ready for) Prime Time</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">PrimeTime</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">prime</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Int</span>]
<span class="cm-variable">prime</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-variable">nubBy</span> (<span class="cm-keyword">\</span><span class="cm-variable">a</span> <span class="cm-variable">b</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">elem</span> <span class="cm-number">0</span> [<span class="cm-builtin">mod</span> <span class="cm-variable">a</span> <span class="cm-variable">b</span>, <span class="cm-builtin">mod</span> <span class="cm-variable">b</span> <span class="cm-variable">a</span>]) [<span class="cm-number">2</span><span class="cm-keyword">..</span><span class="cm-variable">n</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T22:08:12.140+0000" title="Nov 6, 2016, 11:08 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/521ef596c106a935c0000519/train/haskell/581fa9635acfe5d5d4000005">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54a8606fe1288dcae600022b/groups/581fa9d57a3a630df8000aa2">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/513e08acc600c94f01000001">RGB To Hex Conversion</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">rgb</span>(<span class="cm-variable">r</span>, <span class="cm-variable">g</span>, <span class="cm-variable">b</span>):
    <span class="cm-keyword">return</span> <span class="cm-string">""</span>.<span class="cm-property">join</span>(<span class="cm-string">"%02X"</span> <span class="cm-operator">%</span> <span class="cm-builtin">min</span>(<span class="cm-builtin">max</span>(<span class="cm-variable">c</span>, <span class="cm-number">0</span>), <span class="cm-number">255</span>) <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> (<span class="cm-variable">r</span>, <span class="cm-variable">g</span>, <span class="cm-variable">b</span>))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T21:44:34.460+0000" title="Nov 6, 2016, 10:44 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/513e08acc600c94f01000001/train/python/581fa16270ca284cac000172">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54bd821b518b8d73630000a0/groups/581fa4481bf8ba61f9000188">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5552101f47fc5178b1000050">Playing with digits</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">dig_pow</span>(<span class="cm-variable">n</span>, <span class="cm-variable">p</span>):
    <span class="cm-variable">q</span>, <span class="cm-variable">r</span> <span class="cm-operator">=</span> <span class="cm-builtin">divmod</span>(<span class="cm-builtin">sum</span>(<span class="cm-builtin">int</span>(<span class="cm-variable">d</span>) <span class="cm-operator">*</span><span class="cm-operator">*</span> (<span class="cm-variable">p</span> <span class="cm-operator">+</span> <span class="cm-variable">i</span>) <span class="cm-keyword">for</span> <span class="cm-variable">i</span>, <span class="cm-variable">d</span> <span class="cm-keyword">in</span> <span class="cm-builtin">enumerate</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">n</span>))), <span class="cm-variable">n</span>)
    <span class="cm-keyword">return</span> <span class="cm-operator">-</span><span class="cm-number">1</span> <span class="cm-keyword">if</span> <span class="cm-variable">r</span> <span class="cm-keyword">else</span> <span class="cm-variable">q</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T14:58:22.910+0000" title="Nov 6, 2016, 3:58 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5552101f47fc5178b1000050/train/python/581f436551c983e4d9000031">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/555212a93254791a20000021/groups/581f452639dc423f04000b41">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/546f922b54af40e1e90001da">Replace With Alphabet Position</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">alphabet_position</span>(<span class="cm-variable">text</span>):
    <span class="cm-keyword">return</span> <span class="cm-string">" "</span>.<span class="cm-property">join</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">n</span>) <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-variable">text</span>.<span class="cm-property">upper</span>() <span class="cm-keyword">for</span> <span class="cm-variable">n</span> <span class="cm-keyword">in</span> [<span class="cm-builtin">ord</span>(<span class="cm-variable">c</span>) <span class="cm-operator">-</span> <span class="cm-number">64</span>] <span class="cm-keyword">if</span> <span class="cm-number">0</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">n</span> <span class="cm-operator">&lt;</span> <span class="cm-number">27</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T14:46:53.857+0000" title="Nov 6, 2016, 3:46 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/546f922b54af40e1e90001da/train/python/581f3cb11267579b020001d3">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/546f92300e7b08fe6100001c/groups/581f427b12675765a00001cb">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/563f037412e5ada593000114">Money, Money, Money</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">import</span> <span class="cm-variable">math</span>
<span class="cm-keyword">def</span> <span class="cm-def">calculate_years</span>(<span class="cm-variable">principal</span>, <span class="cm-variable">interest</span>, <span class="cm-variable">tax</span>, <span class="cm-variable">desired</span>):
    <span class="cm-keyword">return</span> <span class="cm-variable">math</span>.<span class="cm-property">ceil</span>(<span class="cm-variable">math</span>.<span class="cm-property">log</span>(<span class="cm-number">1.0</span> <span class="cm-operator">*</span> <span class="cm-variable">desired</span> <span class="cm-operator">/</span> <span class="cm-variable">principal</span>, <span class="cm-number">1</span> <span class="cm-operator">+</span> <span class="cm-variable">interest</span> <span class="cm-operator">*</span> (<span class="cm-number">1</span> <span class="cm-operator">-</span> <span class="cm-variable">tax</span>)))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T10:21:16.458+0000" title="Nov 6, 2016, 11:21 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/563f037412e5ada593000114/train/python/581f00d4c5512aff9b00000e">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/563f4002a22b9345bf0000a4/groups/56bfde0eb5106ecec30015b7">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/54d418bd099d650fa000032d">Vampire Numbers</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">vampire_test</span>(<span class="cm-variable">x</span>, <span class="cm-variable">y</span>):
    <span class="cm-keyword">return</span> <span class="cm-variable">x</span> <span class="cm-operator">*</span> <span class="cm-variable">y</span> <span class="cm-keyword">and</span> <span class="cm-builtin">sorted</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">x</span>) <span class="cm-operator">+</span> <span class="cm-builtin">str</span>(<span class="cm-variable">y</span>)) <span class="cm-operator">==</span> <span class="cm-builtin">sorted</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">x</span> <span class="cm-operator">*</span> <span class="cm-variable">y</span>))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T10:05:53.502+0000" title="Nov 6, 2016, 11:05 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54d418bd099d650fa000032d/train/python/581f001939dc42312900001a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54d423487344a0b2f3000241/groups/581f00871bbdd02192000203">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">vampire_test</span>(<span class="cm-variable">x</span>, <span class="cm-variable">y</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">sorted</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">x</span>) <span class="cm-operator">+</span> <span class="cm-builtin">str</span>(<span class="cm-variable">y</span>)) <span class="cm-operator">==</span> <span class="cm-builtin">sorted</span>(<span class="cm-builtin">str</span>(<span class="cm-variable">x</span> <span class="cm-operator">*</span> <span class="cm-variable">y</span>))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T09:59:57.629+0000" title="Nov 6, 2016, 10:59 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54d418bd099d650fa000032d/train/python/581efd679676dde2c600011a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54d423487344a0b2f3000241/groups/54d43db1099d650e7c00062c">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/541c8630095125aba6000c00">Sum of Digits / Digital Root</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">digital_root</span>(<span class="cm-variable">n</span>):
    <span class="cm-keyword">return</span> <span class="cm-variable">n</span> <span class="cm-keyword">if</span> <span class="cm-variable">n</span> <span class="cm-operator">&lt;</span> <span class="cm-number">10</span> <span class="cm-keyword">else</span> <span class="cm-variable">digital_root</span>(<span class="cm-builtin">sum</span>(<span class="cm-builtin">int</span>(<span class="cm-variable">d</span>) <span class="cm-keyword">for</span> <span class="cm-variable">d</span> <span class="cm-keyword">in</span> <span class="cm-builtin">str</span>(<span class="cm-variable">n</span>)))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T09:45:23.545+0000" title="Nov 6, 2016, 10:45 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/541c8630095125aba6000c00/train/python/581efaa77b0314b040000058">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/541c8b5e7e4b4c61e2000153/groups/57e765a328d6fb3dad000104">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/554e4a2f232cdd87d9000038">Complementary DNA</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">DNA_strand</span>(<span class="cm-variable">dna</span>):
    <span class="cm-keyword">return</span> <span class="cm-string">""</span>.<span class="cm-property">join</span>(<span class="cm-builtin">dict</span>(<span class="cm-variable">A</span> <span class="cm-operator">=</span> <span class="cm-string">"T"</span>, <span class="cm-variable">C</span> <span class="cm-operator">=</span> <span class="cm-string">"G"</span>, <span class="cm-variable">G</span> <span class="cm-operator">=</span> <span class="cm-string">"C"</span>, <span class="cm-variable">T</span> <span class="cm-operator">=</span> <span class="cm-string">"A"</span>)[<span class="cm-variable">c</span>] <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-variable">dna</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T08:43:41.643+0000" title="Nov 6, 2016, 9:43 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/554e4a2f232cdd87d9000038/train/python/581ee8d7be116e5f9a0000b7">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/554e4dbd33d156cfbf0000ff/groups/581eed4f5f594065760000aa">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/577bd8d4ae2807c64b00045b">Two fighters, one winner.</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">declare_winner</span>(<span class="cm-variable">fighter1</span>, <span class="cm-variable">fighter2</span>, <span class="cm-variable">first_attacker</span>):
    <span class="cm-variable">a</span> <span class="cm-operator">=</span> [<span class="cm-variable">fighter1</span>, <span class="cm-variable">fighter2</span>]
    <span class="cm-keyword">if</span> <span class="cm-variable">a</span>[<span class="cm-number">1</span>].<span class="cm-property">name</span> <span class="cm-operator">==</span> <span class="cm-variable">first_attacker</span>: <span class="cm-variable">a</span>.<span class="cm-property">reverse</span>()
    <span class="cm-keyword">while</span> <span class="cm-keyword">True</span>:
        <span class="cm-variable">a</span>[<span class="cm-number">1</span>].<span class="cm-property">health</span> <span class="cm-operator">-=</span> <span class="cm-variable">a</span>[<span class="cm-number">0</span>].<span class="cm-property">damage_per_attack</span>
        <span class="cm-keyword">if</span> <span class="cm-variable">a</span>[<span class="cm-number">1</span>].<span class="cm-property">health</span> <span class="cm-operator">&lt;=</span> <span class="cm-number">0</span>: <span class="cm-keyword">break</span>
        <span class="cm-variable">a</span>.<span class="cm-property">reverse</span>()
    <span class="cm-keyword">return</span> <span class="cm-variable">a</span>[<span class="cm-number">0</span>].<span class="cm-property">name</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T08:23:17.359+0000" title="Nov 6, 2016, 9:23 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/577bd8d4ae2807c64b00045b/train/python/581ee1405f59406576000075">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/577bd9c8b9498e84a200028a/groups/581ee8844ffc4e1ddd0000f5">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/576757b1df89ecf5bd00073b">Build Tower</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">tower_builder</span>(<span class="cm-variable">n_floors</span>):
    <span class="cm-keyword">return</span> [
        <span class="cm-variable">p</span> <span class="cm-operator">+</span> (<span class="cm-number">2</span> <span class="cm-operator">*</span> <span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>) <span class="cm-operator">*</span> <span class="cm-string">"*"</span> <span class="cm-operator">+</span> <span class="cm-variable">p</span>
        <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-keyword">in</span> <span class="cm-builtin">range</span>(<span class="cm-variable">n_floors</span>)
        <span class="cm-keyword">for</span> <span class="cm-variable">p</span> <span class="cm-keyword">in</span> [(<span class="cm-variable">n_floors</span> <span class="cm-operator">-</span> <span class="cm-number">1</span> <span class="cm-operator">-</span> <span class="cm-variable">i</span>) <span class="cm-operator">*</span> <span class="cm-string">" "</span>]]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T07:40:57.992+0000" title="Nov 6, 2016, 8:40 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/576757b1df89ecf5bd00073b/train/python/581edc44be116e5e8e000062">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/576759f777d8bbedb5000b2c/groups/581ee0bb4ffc4e1ddd0000cc">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/555eded1ad94b00403000071">Sum of the first nth term of Series</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">series_sum</span>(<span class="cm-variable">n</span>):
    <span class="cm-keyword">return</span> <span class="cm-builtin">format</span>(<span class="cm-builtin">sum</span>(<span class="cm-number">1</span> <span class="cm-operator">/</span> (<span class="cm-number">3</span> <span class="cm-operator">*</span> <span class="cm-variable">k</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>) <span class="cm-keyword">for</span> <span class="cm-variable">k</span> <span class="cm-keyword">in</span> <span class="cm-builtin">range</span>(<span class="cm-variable">n</span>)), <span class="cm-string">".2f"</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T03:47:04.511+0000" title="Nov 6, 2016, 4:47 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/555eded1ad94b00403000071/train/python/581ea58ba6f757b39000014d">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55743cc6e115ab939500000c/groups/581ea7c2d2cb42db48000058">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/56a5d994ac971f1ac500003e">Consecutive strings</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">longest_consec</span>(<span class="cm-variable">strarr</span>, <span class="cm-variable">k</span>):
    <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-builtin">len</span>(<span class="cm-variable">strarr</span>)
    <span class="cm-keyword">return</span> <span class="cm-builtin">max</span>(
        <span class="cm-builtin">map</span>(<span class="cm-keyword">lambda</span> <span class="cm-variable">i</span>: <span class="cm-string">""</span>.<span class="cm-property">join</span>(<span class="cm-variable">strarr</span>[<span class="cm-variable">i</span> : <span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-variable">k</span>]), <span class="cm-builtin">range</span>(<span class="cm-variable">n</span> <span class="cm-operator">-</span> <span class="cm-variable">k</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>)),
        <span class="cm-variable">key</span> <span class="cm-operator">=</span> <span class="cm-builtin">len</span>) <span class="cm-keyword">if</span> <span class="cm-number">0</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">k</span> <span class="cm-operator">&lt;=</span> <span class="cm-variable">n</span> <span class="cm-keyword">else</span> <span class="cm-string">""</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T03:35:24.580+0000" title="Nov 6, 2016, 4:35 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56a5d994ac971f1ac500003e/train/python/581e9b4ba6f757fb5500018f">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56a5da92af136c8210000051/groups/581ea5111bbdd0e1ab00036b">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/558fc85d8fd1938afb000014">Sum of two lowest positive integers</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">sum_two_smallest_numbers</span>(<span class="cm-variable">numbers</span>):
    <span class="cm-variable">a</span> <span class="cm-operator">=</span> <span class="cm-variable">b</span> <span class="cm-operator">=</span> <span class="cm-builtin">float</span>(<span class="cm-string">"inf"</span>)
    <span class="cm-keyword">for</span> <span class="cm-variable">n</span> <span class="cm-keyword">in</span> <span class="cm-variable">numbers</span>:
        <span class="cm-keyword">if</span> <span class="cm-variable">n</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">a</span>: <span class="cm-variable">a</span>, <span class="cm-variable">b</span> <span class="cm-operator">=</span> <span class="cm-variable">b</span>, <span class="cm-variable">n</span>
        <span class="cm-keyword">elif</span> <span class="cm-variable">n</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">b</span>: <span class="cm-variable">b</span> <span class="cm-operator">=</span> <span class="cm-variable">n</span>
    <span class="cm-keyword">return</span> <span class="cm-variable">a</span> <span class="cm-operator">+</span> <span class="cm-variable">b</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T02:52:56.404+0000" title="Nov 6, 2016, 3:52 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/558fc85d8fd1938afb000014/train/python/581e98caa6f7576f740000bd">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/57a075cf8ac8e75966000109/groups/581e9b114ffc4e85d80001c6">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/54df2067ecaa226eca000229">Gauß needs help! (Sums of a lot of numbers).</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">f</span>(<span class="cm-variable">n</span>):
    <span class="cm-keyword">return</span> <span class="cm-variable">n</span> <span class="cm-operator">*</span> (<span class="cm-variable">n</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>) <span class="cm-operator">/</span> <span class="cm-number">2</span> <span class="cm-keyword">if</span> <span class="cm-builtin">isinstance</span>(<span class="cm-variable">n</span>, <span class="cm-builtin">int</span>) <span class="cm-keyword">and</span> <span class="cm-variable">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-keyword">else</span> <span class="cm-keyword">None</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T02:41:14.986+0000" title="Nov 6, 2016, 3:41 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54df2067ecaa226eca000229/train/python/581e96c92228a3d01900140e">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5727935fec3550ea1f00001d/groups/5728bf6761cecabcf5000033">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/55908aad6620c066bc00002a">Exes and Ohs</a></div><h6>Python:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="python"><span class="cm-keyword">def</span> <span class="cm-def">xo</span>(<span class="cm-variable">s</span>):
    <span class="cm-variable">x</span> <span class="cm-operator">=</span> <span class="cm-variable">o</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>
    <span class="cm-keyword">for</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-variable">s</span>:
        <span class="cm-keyword">if</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-string">"Xx"</span>: <span class="cm-variable">x</span> <span class="cm-operator">+=</span> <span class="cm-number">1</span>
        <span class="cm-keyword">if</span> <span class="cm-variable">c</span> <span class="cm-keyword">in</span> <span class="cm-string">"Oo"</span>: <span class="cm-variable">o</span> <span class="cm-operator">+=</span> <span class="cm-number">1</span>
    <span class="cm-keyword">return</span> <span class="cm-variable">x</span> <span class="cm-operator">==</span> <span class="cm-variable">o</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-06T02:21:46.765+0000" title="Nov 6, 2016, 3:21 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55908aad6620c066bc00002a/train/python/581e91994ffc4e181f0002fb">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5595c5b5998756bf60000099/groups/581e93c95f59408a270000b6">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/56a4872cbb65f3a610000026">Rotate for a Max</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;

<span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">MaxRotate</span> 
{
    
    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">long</span> <span class="cm-variable">MaxRot</span> (<span class="cm-type">long</span> <span class="cm-variable">n</span>) 
    {
        <span class="cm-keyword">var</span> <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span> <span class="cm-operator">+</span> <span class="cm-variable">n</span>;
        <span class="cm-keyword">var</span> <span class="cm-def">l</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">System</span>.<span class="cm-variable">Collections</span>.<span class="cm-variable">Generic</span>.<span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">string</span><span class="cm-operator">&gt;</span>();
        <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">s</span>.<span class="cm-variable">Length</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
        {
          <span class="cm-variable">l</span>.<span class="cm-variable">Add</span>(<span class="cm-variable">s</span>);
          <span class="cm-variable">s</span> <span class="cm-operator">=</span> <span class="cm-variable">s</span>.<span class="cm-variable">Substring</span>(<span class="cm-number">0</span>, <span class="cm-variable">i</span>) <span class="cm-operator">+</span> <span class="cm-variable">s</span>.<span class="cm-variable">Substring</span>(<span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>) <span class="cm-operator">+</span> <span class="cm-variable">s</span>[<span class="cm-variable">i</span>];
        }
        <span class="cm-keyword">return</span> <span class="cm-type">long</span>.<span class="cm-variable">Parse</span>(<span class="cm-variable">l</span>.<span class="cm-variable">Max</span>());
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T04:52:47.268+0000" title="Nov 5, 2016, 5:52 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56a4872cbb65f3a610000026/train/csharp/581d5ba1353e6cba8f000159">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56a48c82272cb4fa68000046/groups/581d65ace411caac0700017e">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/56f3a1e899b386da78000732">Parts of a list</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Collections</span>.<span class="cm-variable">Generic</span>;
<span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;

<span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">PartList</span>
{
    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">string</span>[][] <span class="cm-variable">Partlist</span>(<span class="cm-type">string</span>[] <span class="cm-variable">arr</span>) 
    {
        <span class="cm-keyword">var</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">string</span>[]<span class="cm-operator">&gt;</span>();
        <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">1</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">arr</span>.<span class="cm-variable">Length</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
          <span class="cm-variable">r</span>.<span class="cm-variable">Add</span>(<span class="cm-keyword">new</span> [] { <span class="cm-type">string</span>.<span class="cm-variable">Join</span>(<span class="cm-string">" "</span>, <span class="cm-variable">arr</span>.<span class="cm-variable">Take</span>(<span class="cm-variable">i</span>)), <span class="cm-type">string</span>.<span class="cm-variable">Join</span>(<span class="cm-string">" "</span>, <span class="cm-variable">arr</span>.<span class="cm-variable">Skip</span>(<span class="cm-variable">i</span>)) });
        <span class="cm-keyword">return</span> <span class="cm-variable">r</span>.<span class="cm-variable">ToArray</span>();
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T04:06:52.207+0000" title="Nov 5, 2016, 5:06 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56f3a1e899b386da78000732/train/csharp/581d5765fafc8534a2000129">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56f3a71a210fa9f3010000cd/groups/581d5ae2aa8f521931000035">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/550498447451fbbd7600041c">Are they the "same"?</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;

<span class="cm-keyword">class</span> <span class="cm-def">AreTheySame</span>
{
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">bool</span> <span class="cm-variable">comp</span>(<span class="cm-type">int</span>[] <span class="cm-variable">a</span>, <span class="cm-type">int</span>[] <span class="cm-variable">b</span>)
  {
    <span class="cm-keyword">return</span> <span class="cm-variable">a</span> <span class="cm-operator">!=</span> <span class="cm-atom">null</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable">b</span> <span class="cm-operator">!=</span> <span class="cm-atom">null</span> <span class="cm-operator">&amp;&amp;</span>
      <span class="cm-variable">a</span>.<span class="cm-variable">Select</span>(<span class="cm-variable">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">x</span> <span class="cm-operator">*</span> <span class="cm-variable">x</span>).<span class="cm-variable">OrderBy</span>(<span class="cm-variable">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">x</span>).<span class="cm-variable">SequenceEqual</span>(<span class="cm-variable">b</span>.<span class="cm-variable">OrderBy</span>(<span class="cm-variable">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">x</span>));
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T03:50:58.344+0000" title="Nov 5, 2016, 4:50 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/550498447451fbbd7600041c/train/csharp/581d54cfe411cae14900012e">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/553548bd0aebe3f110000334/groups/581d5725e411caac07000131">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>;
<span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;

<span class="cm-keyword">class</span> <span class="cm-def">AreTheySame</span>
{
  <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">bool</span> <span class="cm-variable">comp</span>(<span class="cm-type">int</span>[] <span class="cm-variable">a</span>, <span class="cm-type">int</span>[] <span class="cm-variable">b</span>)
  {
    <span class="cm-keyword">if</span> (<span class="cm-variable">a</span> <span class="cm-operator">==</span> <span class="cm-atom">null</span> <span class="cm-operator">||</span> <span class="cm-variable">b</span> <span class="cm-operator">==</span> <span class="cm-atom">null</span>) <span class="cm-keyword">return</span> <span class="cm-atom">false</span>;
    <span class="cm-variable">Array</span>.<span class="cm-variable">Sort</span>(<span class="cm-variable">a</span>);
    <span class="cm-variable">Array</span>.<span class="cm-variable">Sort</span>(<span class="cm-variable">b</span>);
    <span class="cm-keyword">return</span> <span class="cm-variable">a</span>.<span class="cm-variable">Select</span>(<span class="cm-variable">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">x</span> <span class="cm-operator">*</span> <span class="cm-variable">x</span>).<span class="cm-variable">SequenceEqual</span>(<span class="cm-variable">b</span>);
  }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T03:39:48.217+0000" title="Nov 5, 2016, 4:39 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/550498447451fbbd7600041c/train/csharp/581d4c985f5940f4c1000112">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/553548bd0aebe3f110000334/groups/581d54a25a65431d4e000157">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5809575e166583acfa000083">SQL Basics: Simple table totaling.</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span>
  <span class="cm-keyword">RANK</span><span class="cm-bracket">(</span><span class="cm-bracket">)</span> <span class="cm-keyword">OVER</span> <span class="cm-bracket">(</span><span class="cm-keyword">ORDER</span> <span class="cm-keyword">BY</span> <span class="cm-keyword">SUM</span><span class="cm-bracket">(</span>points<span class="cm-bracket">)</span> <span class="cm-keyword">DESC</span><span class="cm-bracket">)</span> <span class="cm-keyword">rank</span><span class="cm-punctuation">,</span>
  <span class="cm-keyword">COALESCE</span><span class="cm-bracket">(</span><span class="cm-keyword">NULLIF</span><span class="cm-bracket">(</span>clan<span class="cm-punctuation">,</span> <span class="cm-string">''</span><span class="cm-bracket">)</span><span class="cm-punctuation">,</span> <span class="cm-string">'[no clan specified]'</span><span class="cm-bracket">)</span> clan<span class="cm-punctuation">,</span>
  <span class="cm-keyword">SUM</span><span class="cm-bracket">(</span>points<span class="cm-bracket">)</span> total_points<span class="cm-punctuation">,</span>
  <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> total_people
<span class="cm-keyword">FROM</span> people
<span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> clan</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T03:03:13.722+0000" title="Nov 5, 2016, 4:03 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5809575e166583acfa000083/train/sql/581d44d65a6543e53f0000d7">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/580aa9d92e6eb8bc3f0000a4/groups/581d4c0b353e6cfbcc000128">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/5802e32dd8c944e562000020">SQL Basics: Simple JOIN</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> products.<span class="cm-operator">*</span><span class="cm-punctuation">,</span> companies<span class="cm-variable-2">.name</span> company_name
<span class="cm-keyword">FROM</span> products<span class="cm-punctuation">,</span> companies
<span class="cm-keyword">WHERE</span> company_id <span class="cm-operator">=</span> companies<span class="cm-variable-2">.id</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T02:32:21.613+0000" title="Nov 5, 2016, 3:32 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5802e32dd8c944e562000020/train/sql/581d4456353e6cba8f0000cd">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5802e74a7db1adfa9200000a/groups/581d44bffafc858dd60000e0">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5811501c2d35672d4f000146">SQL Basics: Simple WITH</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-builtin">WITH</span> special_sales <span class="cm-keyword">AS</span>
  <span class="cm-bracket">(</span><span class="cm-keyword">SELECT</span> <span class="cm-operator">*</span> <span class="cm-keyword">FROM</span> sales <span class="cm-keyword">WHERE</span> price <span class="cm-operator">&gt;</span> <span class="cm-number">90</span><span class="cm-bracket">)</span>
<span class="cm-keyword">SELECT</span> <span class="cm-operator">*</span>
<span class="cm-keyword">FROM</span> departments
<span class="cm-keyword">WHERE</span> <span class="cm-keyword">id</span> <span class="cm-keyword">IN</span> <span class="cm-bracket">(</span><span class="cm-keyword">SELECT</span> department_id <span class="cm-keyword">FROM</span> special_sales<span class="cm-bracket">)</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T02:30:04.636+0000" title="Nov 5, 2016, 3:30 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5811501c2d35672d4f000146/train/sql/581bf6f6c221fbabee000064">Refactor</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5226eb40316b56c8d500030f">Pascal's Triangle</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">PascalsTriangle</span> <span class="cm-keyword">where</span>
      
<span class="cm-variable">pascalsTriangle</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Int</span>]
<span class="cm-variable">pascalsTriangle</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">concat</span> <span class="cm-builtin">$</span> <span class="cm-builtin">take</span> <span class="cm-variable">n</span> <span class="cm-builtin">$</span> <span class="cm-builtin">iterate</span> (<span class="cm-keyword">\</span><span class="cm-variable">r</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">zipWith</span> (<span class="cm-builtin">+</span>) (<span class="cm-variable">r</span><span class="cm-builtin">++</span>[<span class="cm-number">0</span>]) (<span class="cm-number">0</span><span class="cm-keyword">:</span><span class="cm-variable">r</span>)) [<span class="cm-number">1</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-05T02:24:09.357+0000" title="Nov 5, 2016, 3:24 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5226eb40316b56c8d500030f/train/haskell/581d41effafc85cfd90000a7">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/557702e18256b4a9a600004e/groups/581d42d15f5940da1a0000ea">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5427db696f30afd74b0006a3">Bowling score calculator</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Bowling</span> <span class="cm-keyword">where</span>

<span class="cm-keyword">data</span> <span class="cm-variable-2">State</span> <span class="cm-keyword">=</span> <span class="cm-variable-2">First</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Second</span> <span class="cm-builtin">Int</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Spare</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Strike</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Latent</span> <span class="cm-builtin">Int</span> <span class="cm-variable">|</span> <span class="cm-variable-2">Hombone</span>

<span class="cm-variable">bowlingScore</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Int</span>] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">bowlingScore</span> <span class="cm-variable">rolls</span> <span class="cm-keyword">=</span> (<span class="cm-keyword">\</span>(<span class="cm-keyword">_</span>,<span class="cm-variable">x</span>,<span class="cm-keyword">_</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable">x</span>) <span class="cm-builtin">$</span> <span class="cm-builtin">foldl</span>
  (<span class="cm-keyword">\</span>(<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable">s</span>) <span class="cm-variable">c</span> <span class="cm-keyword">-&gt;</span> <span class="cm-keyword">case</span> (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable">s</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">of</span>
    (<span class="cm-number">0</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Hombone</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-number">0</span>,<span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>,<span class="cm-variable-2">First</span>)
    (<span class="cm-number">0</span>,<span class="cm-variable">a</span>,<span class="cm-variable">s</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-number">0</span>,<span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-variable">c</span>,<span class="cm-variable">s</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">First</span>,<span class="cm-number">10</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Strike</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">First</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Second</span> <span class="cm-variable">c</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Second</span> <span class="cm-variable">p</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-variable">c</span>, <span class="cm-keyword">if</span> <span class="cm-variable">p</span><span class="cm-builtin">+</span><span class="cm-variable">c</span><span class="cm-builtin">&gt;</span><span class="cm-number">9</span> <span class="cm-keyword">then</span> <span class="cm-variable-2">Spare</span> <span class="cm-keyword">else</span> <span class="cm-variable-2">First</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Spare</span>,<span class="cm-number">10</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Strike</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Spare</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Second</span> <span class="cm-variable">c</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Strike</span>,<span class="cm-number">10</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Hombone</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Strike</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Latent</span> <span class="cm-variable">c</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Latent</span> <span class="cm-variable">p</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-keyword">if</span> <span class="cm-variable">p</span><span class="cm-builtin">+</span><span class="cm-variable">c</span><span class="cm-builtin">&gt;</span><span class="cm-number">9</span> <span class="cm-keyword">then</span> <span class="cm-variable-2">Spare</span> <span class="cm-keyword">else</span> <span class="cm-variable-2">First</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Hombone</span>,<span class="cm-number">10</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span><span class="cm-builtin">-</span><span class="cm-number">1</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">3</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Hombone</span>)
    (<span class="cm-variable">n</span>,<span class="cm-variable">a</span>,<span class="cm-variable-2">Hombone</span>,<span class="cm-variable">c</span>) <span class="cm-keyword">-&gt;</span> (<span class="cm-variable">n</span>, <span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">3</span><span class="cm-builtin">*</span><span class="cm-variable">c</span>, <span class="cm-variable-2">Latent</span> <span class="cm-variable">c</span>))
  (<span class="cm-number">10</span>, <span class="cm-number">0</span>, <span class="cm-variable-2">First</span>)
  <span class="cm-variable">rolls</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T05:55:07.563+0000" title="Nov 4, 2016, 6:55 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5427db696f30afd74b0006a3/train/haskell/581bfb5fc8ee95039e001d9a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54281d55929cdb2101000125/groups/581c22c05cfa835405000486">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>8 kyu</span></div></div><a href="/kata/5809b9ef88b750ab180001ec">1. Find all active students</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> <span class="cm-operator">*</span> <span class="cm-keyword">FROM</span> students <span class="cm-keyword">WHERE</span> IsActive</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T02:44:49.237+0000" title="Nov 4, 2016, 3:44 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5809b9ef88b750ab180001ec/train/sql/581bf58ecc9799e4b2000b39">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5809bed03866a33a4e000036/groups/580a002ef195db0fab000275">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>8 kyu</span></div></div><a href="/kata/5809508cc47d327c12000084">SQL Basics: Simple WHERE and ORDER BY</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> <span class="cm-operator">*</span> <span class="cm-keyword">FROM</span> people <span class="cm-keyword">WHERE</span> age <span class="cm-operator">&gt;</span> <span class="cm-number">50</span> <span class="cm-keyword">ORDER</span> <span class="cm-keyword">BY</span> age <span class="cm-keyword">DESC</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T02:41:50.196+0000" title="Nov 4, 2016, 3:41 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5809508cc47d327c12000084/train/sql/581bf4d89ad9fffb0400023d">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58095651d6c956bd180000d0/groups/58095651d6c956bd180000d2">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>8 kyu</span></div></div><a href="/kata/58111670e10b53be31000108">SQL Basics: Simple DISTINCT</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> <span class="cm-keyword">DISTINCT</span> age <span class="cm-keyword">FROM</span> people</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T02:38:48.684+0000" title="Nov 4, 2016, 3:38 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/58111670e10b53be31000108/train/sql/581bf48ecc9799e4b2000b30">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/581117c37d259259520000d5/groups/5811321e2d3567d13e000056">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5811597e9d278beb04000038">SQL Basics: Group By Day</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span>
  <span class="cm-keyword">CAST</span><span class="cm-bracket">(</span>created_at <span class="cm-keyword">AS</span> <span class="cm-builtin">DATE</span><span class="cm-bracket">)</span> "day"<span class="cm-punctuation">,</span>
  description<span class="cm-punctuation">,</span>
  <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> <span class="cm-keyword">count</span>
<span class="cm-keyword">FROM</span> events
<span class="cm-keyword">WHERE</span> <span class="cm-keyword">name</span> <span class="cm-operator">=</span> <span class="cm-string">'trained'</span>
<span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> <span class="cm-keyword">day</span><span class="cm-punctuation">,</span> description
<span class="cm-keyword">ORDER</span> <span class="cm-keyword">BY</span> <span class="cm-keyword">day</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T02:20:48.376+0000" title="Nov 4, 2016, 3:20 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5811597e9d278beb04000038/train/sql/581be891de29fe7cb20013f2">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58115c0eba6d227c2600000a/groups/581bf42ac8ee9521e30013b2">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5811315e04adbbdb5000050e">SQL Basics: Simple NULL handling</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span>
  <span class="cm-keyword">id</span><span class="cm-punctuation">,</span>
  <span class="cm-keyword">COALESCE</span><span class="cm-bracket">(</span><span class="cm-keyword">NULLIF</span><span class="cm-bracket">(</span><span class="cm-keyword">name</span><span class="cm-punctuation">,</span> <span class="cm-string">''</span><span class="cm-bracket">)</span><span class="cm-punctuation">,</span> <span class="cm-string">'[product name not found]'</span><span class="cm-bracket">)</span> "name"<span class="cm-punctuation">,</span>
  price<span class="cm-punctuation">,</span>
  <span class="cm-keyword">COALESCE</span><span class="cm-bracket">(</span><span class="cm-keyword">NULLIF</span><span class="cm-bracket">(</span>card_name<span class="cm-punctuation">,</span> <span class="cm-string">''</span><span class="cm-bracket">)</span><span class="cm-punctuation">,</span> <span class="cm-string">'[card name not found]'</span><span class="cm-bracket">)</span> card_name<span class="cm-punctuation">,</span>
  card_number<span class="cm-punctuation">,</span>
  transaction_date
<span class="cm-keyword">FROM</span> eusales
<span class="cm-keyword">WHERE</span> price <span class="cm-operator">&gt;</span> <span class="cm-number">50</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T01:45:28.252+0000" title="Nov 4, 2016, 2:45 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5811315e04adbbdb5000050e/train/sql/581be12fc8ee9504b0000182">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5811340bdf5b1ec8ca00000c/groups/581be8489ad9ffd1340003b6">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/58164ddf890632ce00000220">SQL Basics: Simple HAVING </a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> age<span class="cm-punctuation">,</span> <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> total_people
<span class="cm-keyword">FROM</span> people
<span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> age
<span class="cm-keyword">HAVING</span> <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T01:12:27.755+0000" title="Nov 4, 2016, 2:12 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/58164ddf890632ce00000220/train/sql/581be009b4adbd7c6800020a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/581656d6c798a7a44000004e/groups/5816cc84dae5a52ed40001ad">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/58094559c47d323ebd000035">SQL Basics: Simple JOIN and RANK</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span>
  people.<span class="cm-operator">*</span><span class="cm-punctuation">,</span>
  <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> sale_count<span class="cm-punctuation">,</span>
  <span class="cm-keyword">RANK</span><span class="cm-bracket">(</span><span class="cm-bracket">)</span> <span class="cm-keyword">OVER</span> <span class="cm-bracket">(</span><span class="cm-keyword">ORDER</span> <span class="cm-keyword">BY</span> <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> sale_rank
<span class="cm-keyword">FROM</span> people <span class="cm-keyword">JOIN</span> sales <span class="cm-keyword">ON</span> people<span class="cm-variable-2">.id</span> <span class="cm-operator">=</span> people_id
<span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> people<span class="cm-variable-2">.id</span><span class="cm-punctuation">,</span> people_id</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T01:07:26.567+0000" title="Nov 4, 2016, 2:07 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/58094559c47d323ebd000035/train/sql/581bdb8e9ad9ff1ae9000d02">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58094ce03f04bf0e6100009c/groups/581bdfb2b4adbd585600025a">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/5270f22f862516c686000161">Base64 Encoding</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">let</span> <span class="cm-def">C</span> <span class="cm-operator">=</span> <span class="cm-variable">String</span>.<span class="cm-property">fromCharCode</span>(<span class="cm-meta">...</span>[<span class="cm-meta">...</span><span class="cm-variable">Array</span>(<span class="cm-number">64</span>).<span class="cm-property">keys</span>()].<span class="cm-property">map</span>(<span class="cm-def">n</span> <span class="cm-operator">=&gt;</span>
  <span class="cm-variable-2">n</span> <span class="cm-operator">&lt;</span> <span class="cm-number">26</span> <span class="cm-operator">?</span> <span class="cm-variable-2">n</span> <span class="cm-operator">+</span> <span class="cm-number">65</span> : <span class="cm-variable-2">n</span> <span class="cm-operator">&lt;</span> <span class="cm-number">52</span> <span class="cm-operator">?</span> <span class="cm-variable-2">n</span> <span class="cm-operator">+</span> <span class="cm-number">71</span> : <span class="cm-variable-2">n</span> <span class="cm-operator">&lt;</span> <span class="cm-number">62</span> <span class="cm-operator">?</span> <span class="cm-variable-2">n</span> <span class="cm-operator">-</span> <span class="cm-number">4</span> : <span class="cm-variable-2">n</span> <span class="cm-operator">&lt;</span> <span class="cm-number">63</span> <span class="cm-operator">?</span> <span class="cm-number">43</span> : <span class="cm-number">47</span>))
<span class="cm-variable">Object</span>.<span class="cm-property">assign</span>(<span class="cm-variable">String</span>.<span class="cm-property">prototype</span>, {
    <span class="cm-property">toBase64</span>()
    {
      <span class="cm-keyword">return</span> <span class="cm-keyword">this</span>.<span class="cm-property">replace</span>(<span class="cm-string-2">/.{1,3}/g</span>, <span class="cm-def">s</span> <span class="cm-operator">=&gt;</span>
        {
          <span class="cm-keyword">let</span>
            [<span class="cm-def">x</span>, <span class="cm-def">y</span>, <span class="cm-def">z</span>] <span class="cm-operator">=</span> [<span class="cm-meta">...</span><span class="cm-variable-2">s</span>].<span class="cm-property">map</span>(<span class="cm-def">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">x</span>.<span class="cm-property">charCodeAt</span>())
            <span class="cm-variable">b</span> <span class="cm-operator">=</span> <span class="cm-variable">C</span>[<span class="cm-variable-2">x</span> <span class="cm-operator">&gt;&gt;</span> <span class="cm-number">2</span>] <span class="cm-operator">+</span>
              <span class="cm-variable">C</span>[(<span class="cm-variable-2">x</span> <span class="cm-operator">%</span> <span class="cm-number">4</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-number">4</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">y</span> <span class="cm-operator">&gt;&gt;</span> <span class="cm-number">4</span>)] <span class="cm-operator">+</span>
              <span class="cm-variable">C</span>[(<span class="cm-variable-2">y</span> <span class="cm-operator">%</span> <span class="cm-number">16</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-number">2</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">z</span> <span class="cm-operator">&gt;&gt;</span> <span class="cm-number">6</span>)] <span class="cm-operator">+</span>
              <span class="cm-variable">C</span>[<span class="cm-variable-2">z</span> <span class="cm-operator">%</span> <span class="cm-number">64</span>]
            <span class="cm-variable">l</span> <span class="cm-operator">=</span> <span class="cm-variable-2">s</span>.<span class="cm-property">length</span> <span class="cm-operator">%</span> <span class="cm-number">3</span>
          <span class="cm-keyword">return</span> <span class="cm-variable">l</span> <span class="cm-operator">?</span> <span class="cm-variable">b</span>.<span class="cm-property">slice</span>(<span class="cm-number">0</span>, <span class="cm-variable">l</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>) <span class="cm-operator">+</span> <span class="cm-string">"=="</span>.<span class="cm-property">slice</span>(<span class="cm-number">0</span>, <span class="cm-operator">-</span><span class="cm-variable">l</span>) : <span class="cm-variable">b</span>
        })
    },
    <span class="cm-property">fromBase64</span>()
    {
      <span class="cm-keyword">return</span> <span class="cm-keyword">this</span>.<span class="cm-property">replace</span>(<span class="cm-string-2">/.{4}/g</span>, <span class="cm-def">s</span> <span class="cm-operator">=&gt;</span>
        {
          <span class="cm-keyword">let</span> [<span class="cm-def">a</span>, <span class="cm-def">b</span>, <span class="cm-def">c</span>, <span class="cm-def">d</span>] <span class="cm-operator">=</span> [<span class="cm-meta">...</span><span class="cm-variable-2">s</span>].<span class="cm-property">map</span>(<span class="cm-def">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">C</span>.<span class="cm-property">indexOf</span>(<span class="cm-variable-2">x</span>))
          <span class="cm-keyword">return</span> <span class="cm-variable">String</span>.<span class="cm-property">fromCharCode</span>(<span class="cm-meta">...</span>[
              (<span class="cm-variable-2">a</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-number">2</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">b</span> <span class="cm-operator">&gt;&gt;</span> <span class="cm-number">4</span>),
              (<span class="cm-variable-2">b</span> <span class="cm-operator">%</span> <span class="cm-number">16</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-number">4</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">c</span> <span class="cm-operator">&gt;&gt;</span> <span class="cm-number">2</span>),
              (<span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">4</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-number">6</span>) <span class="cm-operator">+</span> <span class="cm-variable-2">d</span>
            ].<span class="cm-property">filter</span>(<span class="cm-def">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">x</span> <span class="cm-operator">&gt;=</span> <span class="cm-number">0</span>))
        })
    }
  })</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-04T00:44:07.694+0000" title="Nov 4, 2016, 1:44 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5270f22f862516c686000161/train/javascript/581bb3019ad9ff987300024a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5270f22f862516c686000164/groups/581bd9ffde29fe30500001c0">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/55983863da40caa2c900004e">Next bigger number with the same digits</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">nextBigger</span>(<span class="cm-def">n</span>){
  <span class="cm-keyword">let</span>
    <span class="cm-def">a</span> <span class="cm-operator">=</span> [],
    <span class="cm-def">d</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">n</span>)
  {
    <span class="cm-keyword">let</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-variable-2">n</span> <span class="cm-operator">%</span> <span class="cm-number">10</span>
    <span class="cm-variable-2">n</span> <span class="cm-operator">=</span> <span class="cm-variable">Math</span>.<span class="cm-property">floor</span>(<span class="cm-variable-2">n</span> <span class="cm-operator">/</span> <span class="cm-number">10</span>)
    <span class="cm-keyword">if</span> (<span class="cm-variable-2">r</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">d</span>)
      <span class="cm-keyword">return</span> <span class="cm-operator">+</span>(<span class="cm-variable-2">n</span> <span class="cm-operator">+</span> (<span class="cm-variable-2">a</span>.<span class="cm-property">splice</span>(<span class="cm-variable-2">a</span>.<span class="cm-property">findIndex</span>(<span class="cm-def">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">r</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">x</span>), <span class="cm-number">1</span>, <span class="cm-variable-2">r</span>) <span class="cm-operator">+</span> <span class="cm-variable-2">a</span>.<span class="cm-property">join</span>(<span class="cm-string">""</span>)))
    <span class="cm-keyword">else</span> <span class="cm-variable-2">a</span>.<span class="cm-property">push</span>(<span class="cm-variable-2">d</span> <span class="cm-operator">=</span> <span class="cm-variable-2">r</span>)
  }
  <span class="cm-keyword">return</span> <span class="cm-operator">-</span><span class="cm-number">1</span>
}
</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-03T02:01:01.484+0000" title="Nov 3, 2016, 3:01 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55983863da40caa2c900004e/train/javascript/581a9a30a32ec182aa000053">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55984e63be3bb762bc000138/groups/581a9a731ef8eea9e5000048">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">nextBigger</span>(<span class="cm-def">n</span>){
  <span class="cm-keyword">let</span>
    <span class="cm-def">a</span> <span class="cm-operator">=</span> [],
    <span class="cm-def">d</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">n</span>)
  {
    <span class="cm-keyword">let</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-variable-2">n</span> <span class="cm-operator">%</span> <span class="cm-number">10</span>
    <span class="cm-variable-2">n</span> <span class="cm-operator">=</span> <span class="cm-variable">Math</span>.<span class="cm-property">floor</span>(<span class="cm-variable-2">n</span> <span class="cm-operator">/</span> <span class="cm-number">10</span>)
    <span class="cm-keyword">if</span> (<span class="cm-variable-2">r</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">d</span>)
      <span class="cm-keyword">return</span> <span class="cm-operator">+</span>(<span class="cm-variable-2">n</span> <span class="cm-operator">+</span> (<span class="cm-variable-2">a</span>.<span class="cm-property">splice</span>(<span class="cm-variable-2">a</span>.<span class="cm-property">findIndex</span>(<span class="cm-def">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">r</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">x</span>), <span class="cm-number">1</span>, <span class="cm-variable-2">r</span>)[<span class="cm-number">0</span>] <span class="cm-operator">+</span> <span class="cm-variable-2">a</span>.<span class="cm-property">join</span>(<span class="cm-string">""</span>)))
    <span class="cm-keyword">else</span> <span class="cm-variable-2">a</span>.<span class="cm-property">push</span>(<span class="cm-variable-2">d</span> <span class="cm-operator">=</span> <span class="cm-variable-2">r</span>)
  }
  <span class="cm-keyword">return</span> <span class="cm-operator">-</span><span class="cm-number">1</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-03T01:58:09.271+0000" title="Nov 3, 2016, 2:58 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55983863da40caa2c900004e/train/javascript/581a91e349b2c03b3c00000c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55984e63be3bb762bc000138/groups/581a99bd49b2c0ca02000044">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/54b72c16cd7f5154e9000457">Decode the Morse code, advanced</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">decodeBits</span>(<span class="cm-def">bits</span>) {
  <span class="cm-variable-2">bits</span> <span class="cm-operator">+=</span> <span class="cm-number">0</span>
  <span class="cm-keyword">let</span>
    <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-variable-2">bits</span>.<span class="cm-property">indexOf</span>(<span class="cm-number">1</span>),
    <span class="cm-def">j</span> <span class="cm-operator">=</span> <span class="cm-variable-2">bits</span>.<span class="cm-property">indexOf</span>(<span class="cm-number">0</span>, <span class="cm-variable-2">i</span>),
    <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">j</span> <span class="cm-operator">-</span> <span class="cm-variable-2">i</span>
  <span class="cm-keyword">if</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">%</span> <span class="cm-number">3</span> <span class="cm-operator">&lt;</span> <span class="cm-number">1</span>)
  {
    <span class="cm-keyword">let</span> <span class="cm-def">k</span> <span class="cm-operator">=</span> <span class="cm-variable-2">n</span> <span class="cm-operator">/</span> <span class="cm-number">3</span>
    <span class="cm-keyword">if</span> ([<span class="cm-string-2">`0${</span><span class="cm-string">"1"</span>.<span class="cm-property">repeat</span>(<span class="cm-variable-2">k</span>)<span class="cm-string-2">}</span><span class="cm-string-2">0`</span>, <span class="cm-string-2">`1${</span><span class="cm-string">"0"</span>.<span class="cm-property">repeat</span>(<span class="cm-variable-2">k</span>)<span class="cm-string-2">}</span><span class="cm-string-2">1`</span>, <span class="cm-string">"0"</span>.<span class="cm-property">repeat</span>(<span class="cm-number">7</span> <span class="cm-operator">*</span> <span class="cm-variable-2">k</span>) <span class="cm-operator">+</span> <span class="cm-number">1</span>]
      .<span class="cm-property">some</span>(<span class="cm-def">s</span> <span class="cm-operator">=&gt;</span> <span class="cm-operator">~</span><span class="cm-variable-2">bits</span>.<span class="cm-property">indexOf</span>(<span class="cm-variable-2">s</span>, <span class="cm-variable-2">j</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>)))
      <span class="cm-variable-2">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">k</span>
  }
  <span class="cm-keyword">return</span> [
      [<span class="cm-string">"1"</span>.<span class="cm-property">repeat</span>(<span class="cm-number">3</span> <span class="cm-operator">*</span> <span class="cm-variable-2">n</span>), <span class="cm-string">"-"</span>],
      [<span class="cm-string">"1"</span>.<span class="cm-property">repeat</span>(<span class="cm-variable-2">n</span>), <span class="cm-string">"."</span>],
      [<span class="cm-string">"0"</span>.<span class="cm-property">repeat</span>(<span class="cm-number">7</span> <span class="cm-operator">*</span> <span class="cm-variable-2">n</span>), <span class="cm-string">"   "</span>],
      [<span class="cm-string">"0"</span>.<span class="cm-property">repeat</span>(<span class="cm-number">3</span> <span class="cm-operator">*</span> <span class="cm-variable-2">n</span>), <span class="cm-string">" "</span>],
      [<span class="cm-number">0</span>, <span class="cm-string">""</span>]
    ].<span class="cm-property">reduce</span>((<span class="cm-def">b</span>, [<span class="cm-def">s</span>, <span class="cm-def">r</span>]) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">b</span>.<span class="cm-property">replace</span>(<span class="cm-variable">RegExp</span>(<span class="cm-variable-2">s</span>, <span class="cm-string">"g"</span>), <span class="cm-variable-2">r</span>), <span class="cm-variable-2">bits</span>)
}

<span class="cm-keyword">function</span> <span class="cm-def">decodeMorse</span>(<span class="cm-def">morseCode</span>) {
  <span class="cm-keyword">return</span> <span class="cm-variable-2">morseCode</span>
    .<span class="cm-property">split</span>(<span class="cm-string">"   "</span>)
    .<span class="cm-property">map</span>(<span class="cm-def">w</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">w</span>.<span class="cm-property">split</span>(<span class="cm-string">" "</span>).<span class="cm-property">map</span>(<span class="cm-def">c</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">MORSE_CODE</span>[<span class="cm-variable-2">c</span>]).<span class="cm-property">join</span>(<span class="cm-string">""</span>))
    .<span class="cm-property">join</span>(<span class="cm-string">" "</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-03T01:19:24.816+0000" title="Nov 3, 2016, 2:19 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54b72c16cd7f5154e9000457/train/javascript/581a7a40e835f6f47c000330">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54d3b1b1c7f988a3f400017c/groups/581a90ba1ef8ee9ae0000002">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/54b724efac3d5402db00065e">Decode the Morse code </a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-variable">decodeMorse</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span>(<span class="cm-def">morseCode</span>){
  <span class="cm-keyword">return</span> <span class="cm-variable-2">morseCode</span>
    .<span class="cm-property">trim</span>()
    .<span class="cm-property">split</span>(<span class="cm-string">"   "</span>)
    .<span class="cm-property">map</span>(<span class="cm-def">w</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">w</span>.<span class="cm-property">split</span>(<span class="cm-string">" "</span>).<span class="cm-property">map</span>(<span class="cm-def">c</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">MORSE_CODE</span>[<span class="cm-variable-2">c</span>]).<span class="cm-property">join</span>(<span class="cm-string">""</span>))
    .<span class="cm-property">join</span>(<span class="cm-string">" "</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T23:36:59.466+0000" title="Nov 3, 2016, 12:36 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54b724efac3d5402db00065e/train/javascript/581a6e713280d61ccb0008ee">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/54be2a15518b8dcff90001f2/groups/5612f91b3755976c99000006">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/526dad7f8c0eb5c4640000a4">Vector class</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">var</span> <span class="cm-def">Vector</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">components</span>) {
  <span class="cm-variable">Object</span>.<span class="cm-property">assign</span>(<span class="cm-keyword">this</span>, {
    <span class="cm-property">c</span>: <span class="cm-variable-2">components</span>,
    <span class="cm-property">add</span>({<span class="cm-def">c</span>})
    {
      <span class="cm-keyword">if</span> (<span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">length</span> <span class="cm-operator">!=</span> <span class="cm-variable-2">c</span>.<span class="cm-property">length</span>) <span class="cm-keyword">throw</span> <span class="cm-number">0</span>
      <span class="cm-keyword">return</span> <span class="cm-keyword">new</span> <span class="cm-variable">Vector</span>(<span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">map</span>((<span class="cm-def">x</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">x</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span>[<span class="cm-variable-2">i</span>]))
    },
    <span class="cm-property">subtract</span>({<span class="cm-def">c</span>})
    {
      <span class="cm-keyword">if</span> (<span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">length</span> <span class="cm-operator">!=</span> <span class="cm-variable-2">c</span>.<span class="cm-property">length</span>) <span class="cm-keyword">throw</span> <span class="cm-number">0</span>
      <span class="cm-keyword">return</span> <span class="cm-keyword">new</span> <span class="cm-variable">Vector</span>(<span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">map</span>((<span class="cm-def">x</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">x</span> <span class="cm-operator">-</span> <span class="cm-variable-2">c</span>[<span class="cm-variable-2">i</span>]))
    },
    <span class="cm-property">dot</span>({<span class="cm-def">c</span>})
    {
      <span class="cm-keyword">if</span> (<span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">length</span> <span class="cm-operator">!=</span> <span class="cm-variable-2">c</span>.<span class="cm-property">length</span>) <span class="cm-keyword">throw</span> <span class="cm-number">0</span>
      <span class="cm-keyword">return</span> <span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">reduce</span>((<span class="cm-def">s</span>, <span class="cm-def">x</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">s</span> <span class="cm-operator">+</span> <span class="cm-variable-2">x</span> <span class="cm-operator">*</span> <span class="cm-variable-2">c</span>[<span class="cm-variable-2">i</span>], <span class="cm-number">0</span>)
    },
    <span class="cm-property">norm</span>: () <span class="cm-operator">=&gt;</span> <span class="cm-variable">Math</span>.<span class="cm-property">sqrt</span>(<span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">reduce</span>((<span class="cm-def">s</span>, <span class="cm-def">x</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">s</span> <span class="cm-operator">+</span> <span class="cm-variable-2">x</span> <span class="cm-operator">*</span> <span class="cm-variable-2">x</span>)),
    <span class="cm-property">toString</span>: () <span class="cm-operator">=&gt;</span> <span class="cm-string-2">`(${</span><span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">join</span>()<span class="cm-string-2">}</span><span class="cm-string-2">)`</span>,
    <span class="cm-property">equals</span>: ({<span class="cm-def">c</span>}) <span class="cm-operator">=&gt;</span>
      <span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">reduce</span>((<span class="cm-def">b</span>, <span class="cm-def">x</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">b</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable-2">x</span> <span class="cm-operator">==</span> <span class="cm-variable-2">c</span>[<span class="cm-variable-2">i</span>], <span class="cm-keyword">this</span>.<span class="cm-property">c</span>.<span class="cm-property">length</span> <span class="cm-operator">==</span> <span class="cm-variable-2">c</span>.<span class="cm-property">length</span>)
  })
};</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T18:48:10.230+0000" title="Nov 2, 2016, 7:48 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/526dad7f8c0eb5c4640000a4/train/javascript/581a1cb03280d6f9bc000014">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/526dad7f8c0eb5c4640000a7/groups/581a3501d3ea2d2c96000300">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/5324945e2ece5e1f32000370">Sum Strings as Numbers</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) {
  <span class="cm-keyword">let</span>
    <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">j</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">i</span> <span class="cm-operator">+</span> <span class="cm-variable-2">j</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span>)
    <span class="cm-variable-2">c</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">i</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">i</span>]) <span class="cm-operator">+</span> (<span class="cm-variable-2">j</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">j</span>]),
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>,
    <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
  <span class="cm-keyword">return</span> <span class="cm-variable-2">s</span>.<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>) <span class="cm-operator">||</span> <span class="cm-string">"0"</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T17:03:49.937+0000" title="Nov 2, 2016, 6:03 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/581a1c34d3ea2db8ab0000ea">Refactor</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) {
  <span class="cm-keyword">let</span>
    <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">j</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">i</span> <span class="cm-operator">+</span> <span class="cm-variable-2">j</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span>)
    <span class="cm-variable-2">c</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">i</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">i</span>]) <span class="cm-operator">+</span> (<span class="cm-variable-2">j</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">j</span>]),
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>,
    <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
  <span class="cm-keyword">return</span> <span class="cm-variable-2">s</span>.<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>) <span class="cm-operator">||</span> <span class="cm-string">"0"</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T03:41:56.336+0000" title="Nov 2, 2016, 4:41 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/5819606a704cccc978000370">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5324945e2ece5e1f32000373/groups/5819608a3280d6a3760006e6">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) {
  <span class="cm-keyword">let</span>
    <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">j</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">i</span> <span class="cm-operator">+</span> <span class="cm-variable-2">j</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>)
    <span class="cm-variable-2">c</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">i</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">i</span>]) <span class="cm-operator">+</span> (<span class="cm-variable-2">j</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">j</span>]),
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>,
    <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
  <span class="cm-keyword">return</span> <span class="cm-variable-2">s</span>.<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>) <span class="cm-operator">||</span> <span class="cm-string">"0"</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T03:39:38.919+0000" title="Nov 2, 2016, 4:39 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/58195d8e73b9865c6d00010e">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5324945e2ece5e1f32000373/groups/5819603981bcd0d8bc00015f">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) {
  <span class="cm-keyword">let</span>
    <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">m</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">+</span> <span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>)
    <span class="cm-variable-2">c</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">n</span>] : <span class="cm-number">0</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">m</span>] : <span class="cm-number">0</span>),
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>,
    <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
  <span class="cm-keyword">return</span> (<span class="cm-operator">+</span><span class="cm-variable-2">c</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>).<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>) <span class="cm-operator">||</span> <span class="cm-string">"0"</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T03:15:40.123+0000" title="Nov 2, 2016, 4:15 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/5819595d81bcd0cb780009a3">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5324945e2ece5e1f32000373/groups/58195a73c929ba19e70000f2">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) {
  <span class="cm-keyword">let</span>
    <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">m</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
  <span class="cm-keyword">while</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">||</span> <span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>)
    <span class="cm-variable-2">c</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">n</span>] : <span class="cm-number">0</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">m</span>] : <span class="cm-number">0</span>),
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>,
    <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
  <span class="cm-keyword">return</span> (<span class="cm-operator">+</span><span class="cm-variable-2">c</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>).<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T03:08:50.071+0000" title="Nov 2, 2016, 4:08 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/5819589a3280d6a3760006ac">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5324945e2ece5e1f32000373/groups/581958911ebee7d0370000f3">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) {
  <span class="cm-keyword">let</span>
    <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">m</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
    <span class="cm-keyword">while</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">||</span> <span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>)
      <span class="cm-variable-2">c</span> <span class="cm-operator">+=</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">n</span>] : <span class="cm-number">0</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">m</span>] : <span class="cm-number">0</span>),
      <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>,
      <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
    <span class="cm-keyword">return</span> (<span class="cm-operator">+</span><span class="cm-variable-2">c</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>).<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T03:07:54.273+0000" title="Nov 2, 2016, 4:07 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/581957fe73b98648b30000d6">Refactor</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">sumStrings</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>) { 
  <span class="cm-keyword">let</span>
    <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span>.<span class="cm-property">length</span>,
    <span class="cm-def">m</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span>.<span class="cm-property">length</span>,
    <span class="cm-def">c</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>,
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-string">""</span>
    <span class="cm-keyword">while</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">||</span> <span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span>)
    {
      <span class="cm-keyword">let</span> <span class="cm-def">x</span> <span class="cm-operator">=</span> (<span class="cm-variable-2">n</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">a</span>[<span class="cm-operator">--</span><span class="cm-variable-2">n</span>] : <span class="cm-number">0</span>) <span class="cm-operator">+</span> (<span class="cm-variable-2">m</span> <span class="cm-operator">&gt;</span> <span class="cm-number">0</span> <span class="cm-operator">?</span> <span class="cm-operator">+</span><span class="cm-variable-2">b</span>[<span class="cm-operator">--</span><span class="cm-variable-2">m</span>] : <span class="cm-number">0</span>) <span class="cm-operator">+</span> <span class="cm-variable-2">c</span>
      <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">x</span> <span class="cm-operator">%</span> <span class="cm-number">10</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>
      <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">x</span> <span class="cm-operator">&gt;</span> <span class="cm-number">9</span>
    }
    <span class="cm-keyword">return</span> (<span class="cm-operator">+</span><span class="cm-variable-2">c</span> <span class="cm-operator">+</span> <span class="cm-variable-2">s</span>).<span class="cm-property">replace</span>(<span class="cm-string-2">/0*/</span>, <span class="cm-string">""</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-02T02:59:46.574+0000" title="Nov 2, 2016, 3:59 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5324945e2ece5e1f32000370/train/javascript/58194ff2c6ab1b7e710000f5">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5324945e2ece5e1f32000373/groups/581956f23280d6a376000699">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/523a86aa4230ebb5420001e1">Where my anagrams at?</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Anagram</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">anagrams</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">String</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">String</span>]
<span class="cm-variable">anagrams</span> <span class="cm-variable">w</span> <span class="cm-variable">ws</span> <span class="cm-keyword">=</span> [<span class="cm-variable">s</span> <span class="cm-variable">|</span> <span class="cm-variable">s</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">ws</span>, <span class="cm-variable">sort</span> <span class="cm-variable">s</span> <span class="cm-builtin">==</span> <span class="cm-variable">sort</span> <span class="cm-variable">w</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-01T20:05:54.780+0000" title="Nov 1, 2016, 9:05 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/523a86aa4230ebb5420001e1/train/haskell/5818f4a321a333c36100066c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/546110ca0b3c70e15a00007a/groups/5818f5b6892ea510a00001c2">Discuss</a></li></ul><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">anagrams</span>(<span class="cm-def">word</span>, <span class="cm-def">words</span>) {
  <span class="cm-keyword">let</span> <span class="cm-def">m</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Map</span>
  <span class="cm-keyword">for</span> (<span class="cm-keyword">let</span> <span class="cm-def">c</span> <span class="cm-keyword">of</span> <span class="cm-variable-2">word</span>) <span class="cm-variable-2">m</span>.<span class="cm-property">set</span>(<span class="cm-variable-2">c</span>, (<span class="cm-variable-2">m</span>.<span class="cm-property">get</span>(<span class="cm-variable-2">c</span>) <span class="cm-operator">||</span> <span class="cm-number">0</span>) <span class="cm-operator">+</span> <span class="cm-number">1</span>)
  <span class="cm-keyword">return</span> <span class="cm-variable-2">words</span>.<span class="cm-property">filter</span>(<span class="cm-def">w</span> <span class="cm-operator">=&gt;</span>
    {
      <span class="cm-keyword">let</span> <span class="cm-def">l</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Map</span>(<span class="cm-variable-2">m</span>)
      <span class="cm-keyword">for</span> (<span class="cm-keyword">let</span> <span class="cm-def">c</span> <span class="cm-keyword">of</span> <span class="cm-variable-2">w</span>)
      {
        <span class="cm-keyword">let</span> <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable-2">l</span>.<span class="cm-property">get</span>(<span class="cm-variable-2">c</span>)
        <span class="cm-keyword">if</span> (<span class="cm-variable-2">n</span>) <span class="cm-variable-2">l</span>.<span class="cm-property">set</span>(<span class="cm-variable-2">c</span>, <span class="cm-variable-2">n</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>)
        <span class="cm-keyword">else</span> <span class="cm-keyword">return</span>
      }
      <span class="cm-keyword">return</span> <span class="cm-operator">!</span>[<span class="cm-meta">...</span><span class="cm-variable-2">l</span>].<span class="cm-property">some</span>(<span class="cm-def">e</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">e</span>[<span class="cm-number">1</span>])
    })
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-01T22:08:41.377+0000" title="Nov 1, 2016, 11:08 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/523a86aa4230ebb5420001e1/train/javascript/5818f623d231b0bcb2000974">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/523a86aa4230ebb5420001e4/groups/581912734bfbe07c9b000028">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5418a1dd6d8216e18a0012b2">Validate Credit Card Number</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Validate</span> <span class="cm-keyword">where</span>

<span class="cm-variable">validate</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integer</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Bool</span>
<span class="cm-variable">validate</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">sum</span>
      [([<span class="cm-keyword">\</span><span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">x</span> <span class="cm-builtin">+</span> <span class="cm-variable">x</span> `<span class="cm-builtin">div</span>` <span class="cm-number">5</span>, <span class="cm-builtin">id</span>] <span class="cm-builtin">!!</span> (<span class="cm-builtin">mod</span> <span class="cm-variable">i</span> <span class="cm-number">2</span>)) <span class="cm-variable">d</span> <span class="cm-variable">|</span> (<span class="cm-variable">d</span>, <span class="cm-variable">i</span>) <span class="cm-keyword">&lt;-</span> <span class="cm-builtin">zip</span> <span class="cm-variable">s</span> [<span class="cm-builtin">length</span> <span class="cm-variable">s</span> <span class="cm-keyword">..</span>]]
    `<span class="cm-builtin">mod</span>` <span class="cm-number">10</span> <span class="cm-builtin">==</span> <span class="cm-number">0</span>
  <span class="cm-keyword">where</span> <span class="cm-variable">s</span> <span class="cm-keyword">=</span> [<span class="cm-builtin">read</span> [<span class="cm-variable">c</span>] <span class="cm-variable">|</span> <span class="cm-variable">c</span> <span class="cm-keyword">&lt;-</span> <span class="cm-builtin">show</span> <span class="cm-variable">n</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-01T04:25:15.468+0000" title="Nov 1, 2016, 5:25 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5418a1dd6d8216e18a0012b2/train/haskell/581818d2d4f64fdbfe000014">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5418c2901d3bf380da00025c/groups/58181932930fcc865d000016">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Validate</span> <span class="cm-keyword">where</span>

<span class="cm-variable">validate</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integer</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Bool</span>
<span class="cm-variable">validate</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">sum</span>
      [([<span class="cm-keyword">\</span><span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">x</span> <span class="cm-builtin">+</span> <span class="cm-variable">x</span> `<span class="cm-builtin">div</span>` <span class="cm-number">5</span>, <span class="cm-builtin">id</span>] <span class="cm-builtin">!!</span> (<span class="cm-builtin">mod</span> <span class="cm-variable">i</span> <span class="cm-number">2</span>)) <span class="cm-variable">d</span> <span class="cm-variable">|</span> (<span class="cm-variable">d</span>, <span class="cm-variable">i</span>) <span class="cm-keyword">&lt;-</span> <span class="cm-builtin">zip</span> <span class="cm-variable">s</span> [<span class="cm-builtin">length</span> <span class="cm-variable">s</span> <span class="cm-keyword">..</span>]]
    `<span class="cm-builtin">mod</span>` <span class="cm-number">10</span> <span class="cm-builtin">==</span> <span class="cm-number">0</span>
  <span class="cm-keyword">where</span> <span class="cm-variable">s</span> <span class="cm-keyword">=</span> [<span class="cm-builtin">read</span> [<span class="cm-variable">c</span>] <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-variable">|</span> <span class="cm-variable">c</span> <span class="cm-keyword">&lt;-</span> <span class="cm-builtin">show</span> <span class="cm-variable">n</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-01T04:11:45.420+0000" title="Nov 1, 2016, 5:11 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5418a1dd6d8216e18a0012b2/train/haskell/58180e32930fcc464c0004e3">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5418c2901d3bf380da00025c/groups/581816c6e7f45733370000fc">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/54d7660d2daf68c619000d95">Common Denominators</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">CommonDenominators</span> <span class="cm-keyword">where</span>

<span class="cm-keyword">type</span> <span class="cm-variable-2">Ratio</span> <span class="cm-variable">a</span> <span class="cm-keyword">=</span> (<span class="cm-variable">a</span>, <span class="cm-variable">a</span>) <span class="cm-comment">-- Data.Ratio not suitable for this kata</span>

<span class="cm-variable">convertFracs</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integral</span> <span class="cm-variable">a</span> <span class="cm-keyword">=&gt;</span> [<span class="cm-variable-2">Ratio</span> <span class="cm-variable">a</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-variable-2">Ratio</span> <span class="cm-variable">a</span>]
<span class="cm-variable">convertFracs</span> <span class="cm-variable">xs</span> <span class="cm-keyword">=</span> [(<span class="cm-variable">a</span><span class="cm-builtin">*</span><span class="cm-variable">d</span> `<span class="cm-builtin">div</span>` <span class="cm-variable">b</span>, <span class="cm-variable">d</span>) <span class="cm-variable">|</span> (<span class="cm-variable">a</span>,<span class="cm-variable">b</span>) <span class="cm-keyword">&lt;-</span> <span class="cm-variable">xs</span>] <span class="cm-keyword">where</span>
  <span class="cm-variable">d</span> <span class="cm-keyword">=</span> <span class="cm-builtin">foldl</span> (<span class="cm-keyword">\</span><span class="cm-variable">a</span> (<span class="cm-keyword">_</span>,<span class="cm-variable">b</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-variable">a</span><span class="cm-builtin">*</span><span class="cm-variable">b</span> `<span class="cm-builtin">div</span>` <span class="cm-builtin">gcd</span> <span class="cm-variable">a</span> <span class="cm-variable">b</span>) <span class="cm-number">1</span> <span class="cm-variable">xs</span>
  <span class="cm-builtin">gcd</span> <span class="cm-variable">a</span> <span class="cm-number">0</span> <span class="cm-keyword">=</span> <span class="cm-variable">a</span>
  <span class="cm-builtin">gcd</span> <span class="cm-variable">a</span> <span class="cm-variable">b</span> <span class="cm-keyword">=</span> <span class="cm-builtin">gcd</span> <span class="cm-variable">b</span> (<span class="cm-builtin">mod</span> <span class="cm-variable">a</span> <span class="cm-variable">b</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-31T07:41:20.951+0000" title="Oct 31, 2016, 8:41 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54d7660d2daf68c619000d95/train/haskell/5816f268dae5a5f67b000087">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/552d6700051d23b33b00000b/groups/5816f5d4dae5a59eaa0000ae">Discuss</a></li></ul><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">convertFrac</span>(<span class="cm-def">lst</span>){
  <span class="cm-keyword">function</span> <span class="cm-def">gcd</span>(<span class="cm-def">a</span>, <span class="cm-def">b</span>)
  {
    <span class="cm-keyword">return</span> <span class="cm-variable-2">b</span> <span class="cm-operator">?</span> <span class="cm-variable-2">gcd</span>(<span class="cm-variable-2">b</span>, <span class="cm-variable-2">a</span> <span class="cm-operator">%</span> <span class="cm-variable-2">b</span>) : <span class="cm-variable-2">a</span>
  }
  <span class="cm-keyword">let</span> <span class="cm-def">d</span> <span class="cm-operator">=</span> <span class="cm-variable-2">lst</span>.<span class="cm-property">reduce</span>((<span class="cm-def">a</span>, [, <span class="cm-def">b</span>]) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">a</span> <span class="cm-operator">*</span> <span class="cm-variable-2">b</span> <span class="cm-operator">/</span> <span class="cm-variable-2">gcd</span>(<span class="cm-variable-2">a</span>, <span class="cm-variable-2">b</span>), <span class="cm-number">1</span>)
  <span class="cm-keyword">return</span> <span class="cm-variable-2">lst</span>.<span class="cm-property">map</span>(([<span class="cm-def">a</span>, <span class="cm-def">b</span>]) <span class="cm-operator">=&gt;</span> <span class="cm-string-2">`(${</span><span class="cm-variable-2">d</span> <span class="cm-operator">*</span> <span class="cm-variable-2">a</span> <span class="cm-operator">/</span> <span class="cm-variable-2">b</span><span class="cm-string-2">}</span><span class="cm-string-2">,${</span><span class="cm-variable-2">d</span><span class="cm-string-2">}</span><span class="cm-string-2">)`</span>).<span class="cm-property">join</span>(<span class="cm-string">""</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-01T03:29:02.638+0000" title="Nov 1, 2016, 4:29 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/54d7660d2daf68c619000d95/train/javascript/581809497855d4daae0013f7">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/553a2e5fe6cd7e1c65000054/groups/58180c1c7855d4ce2e0019bf">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5274d9d3ebc3030802000165">Two Joggers</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">var</span> <span class="cm-def">nbrOfLaps</span> <span class="cm-operator">=</span> <span class="cm-keyword">function</span> (<span class="cm-def">x</span>, <span class="cm-def">y</span>) {
  <span class="cm-keyword">function</span> <span class="cm-def">gcd</span>(<span class="cm-def">a</span>, <span class="cm-def">b</span>)
  {
    <span class="cm-keyword">return</span> <span class="cm-variable-2">b</span> <span class="cm-operator">?</span> <span class="cm-variable-2">gcd</span>(<span class="cm-variable-2">b</span>, <span class="cm-variable-2">a</span> <span class="cm-operator">%</span> <span class="cm-variable-2">b</span>) : <span class="cm-variable-2">a</span>
  }
  <span class="cm-keyword">let</span> <span class="cm-def">z</span> <span class="cm-operator">=</span> <span class="cm-variable-2">gcd</span>(<span class="cm-variable-2">x</span>, <span class="cm-variable-2">y</span>)
  <span class="cm-keyword">return</span> [<span class="cm-variable-2">y</span> <span class="cm-operator">/</span> <span class="cm-variable-2">z</span>, <span class="cm-variable-2">x</span> <span class="cm-operator">/</span> <span class="cm-variable-2">z</span>]
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-11-01T03:16:24.262+0000" title="Nov 1, 2016, 4:16 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5274d9d3ebc3030802000165/train/javascript/581807d3930fccaa57000346">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5274d9d3ebc3030802000168/groups/58180911e7f457017b000188">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/5254ca2719453dcc0b00027d">Permutations</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">permutations</span>(<span class="cm-def">string</span>) {
  <span class="cm-keyword">return</span> <span class="cm-variable-2">string</span> <span class="cm-operator">?</span> [<span class="cm-meta">...</span><span class="cm-keyword">new</span> <span class="cm-variable">Set</span>([].<span class="cm-property">concat</span>(<span class="cm-meta">...</span><span class="cm-variable">permutations</span>(<span class="cm-variable-2">string</span>.<span class="cm-property">slice</span>(<span class="cm-number">1</span>)).<span class="cm-property">map</span>(
      <span class="cm-def">s</span> <span class="cm-operator">=&gt;</span> [<span class="cm-meta">...</span><span class="cm-variable">Array</span>(<span class="cm-variable-2">string</span>.<span class="cm-property">length</span>).<span class="cm-property">keys</span>()].<span class="cm-property">map</span>(<span class="cm-def">i</span> <span class="cm-operator">=&gt;</span>
        {
          <span class="cm-keyword">let</span> <span class="cm-def">a</span> <span class="cm-operator">=</span> [<span class="cm-meta">...</span><span class="cm-variable-2">s</span>]
          <span class="cm-variable-2">a</span>.<span class="cm-property">splice</span>(<span class="cm-variable-2">i</span>, <span class="cm-number">0</span>, <span class="cm-variable-2">string</span>[<span class="cm-number">0</span>])
          <span class="cm-keyword">return</span> <span class="cm-variable-2">a</span>.<span class="cm-property">join</span>(<span class="cm-string">""</span>)
        }
    ))))] : [<span class="cm-string">""</span>]
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-31T01:26:01.437+0000" title="Oct 31, 2016, 2:26 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5254ca2719453dcc0b00027d/train/javascript/5816968025cd2ae26100001a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5254ca2719453dcc0b000280/groups/58169dc925cd2aec0a000057">Discuss</a></li></ul><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">Permutations</span> (<span class="cm-variable">permutations</span>) <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span> (<span class="cm-variable">nub</span>,<span class="cm-variable">inits</span>,<span class="cm-variable">tails</span>)

<span class="cm-variable">permutations</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">String</span>]
<span class="cm-variable">permutations</span> [] <span class="cm-keyword">=</span> [<span class="cm-string">""</span>]
<span class="cm-variable">permutations</span> (<span class="cm-variable">h</span><span class="cm-keyword">:</span><span class="cm-variable">t</span>) <span class="cm-keyword">=</span> <span class="cm-variable">nub</span> <span class="cm-builtin">$</span> <span class="cm-builtin">concat</span>
  [<span class="cm-builtin">zipWith</span> ((<span class="cm-builtin">.</span>(<span class="cm-variable">h</span><span class="cm-keyword">:</span>)) <span class="cm-builtin">.</span> (<span class="cm-builtin">++</span>)) (<span class="cm-variable">inits</span> <span class="cm-variable">p</span>) (<span class="cm-variable">tails</span> <span class="cm-variable">p</span>) <span class="cm-variable">|</span> <span class="cm-variable">p</span> <span class="cm-keyword">&lt;-</span> <span class="cm-variable">permutations</span> <span class="cm-variable">t</span>]</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-31T08:12:29.862+0000" title="Oct 31, 2016, 9:12 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5254ca2719453dcc0b00027d/train/haskell/5816f6780e80c5e075000a74">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/557681063bd2652114000042/groups/5816fd273db6c6dd5e000031">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/51c8e37cee245da6b40000bd">Strip Comments</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">solution</span>(<span class="cm-def">input</span>, <span class="cm-def">markers</span>){
  <span class="cm-keyword">return</span> <span class="cm-variable-2">input</span>
    .<span class="cm-property">split</span>(<span class="cm-string">"\n"</span>)
    .<span class="cm-property">map</span>(<span class="cm-def">s</span> <span class="cm-operator">=&gt;</span> (<span class="cm-variable-2">s</span> <span class="cm-operator">+</span> <span class="cm-string">" "</span>).<span class="cm-property">slice</span>(<span class="cm-number">0</span>, [<span class="cm-meta">...</span><span class="cm-variable-2">s</span>].<span class="cm-property">findIndex</span>(<span class="cm-def">c</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">markers</span>.<span class="cm-property">includes</span>(<span class="cm-variable-2">c</span>))).<span class="cm-property">trimRight</span>())
    .<span class="cm-property">join</span>(<span class="cm-string">"\n"</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-31T00:44:49.965+0000" title="Oct 31, 2016, 1:44 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/51c8e37cee245da6b40000bd/train/javascript/581684a2f54413c4e7000c99">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/51c8e7f3049befd8ca0000bd/groups/5816940df54413cb23000018">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/53db96041f1a7d32dc0004d2">Did I Finish my Sudoku?</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">doneOrNot</span>(<span class="cm-def">board</span>){
  <span class="cm-keyword">let</span> <span class="cm-def">s</span> <span class="cm-operator">=</span> [<span class="cm-number">0</span>, <span class="cm-number">3</span>, <span class="cm-number">6</span>]
  <span class="cm-keyword">return</span> <span class="cm-variable-2">board</span>.<span class="cm-property">concat</span>(
      [<span class="cm-meta">...</span><span class="cm-variable">Array</span>(<span class="cm-number">9</span>).<span class="cm-property">keys</span>()].<span class="cm-property">map</span>(<span class="cm-def">i</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">board</span>.<span class="cm-property">map</span>(<span class="cm-def">l</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">l</span>[<span class="cm-variable-2">i</span>])),
      [].<span class="cm-property">concat</span>(<span class="cm-meta">...</span><span class="cm-variable-2">s</span>.<span class="cm-property">map</span>(<span class="cm-def">i</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">s</span>.<span class="cm-property">map</span>(<span class="cm-def">j</span> <span class="cm-operator">=&gt;</span> [].<span class="cm-property">concat</span>(
        <span class="cm-meta">...</span><span class="cm-variable-2">board</span>.<span class="cm-property">map</span>(<span class="cm-def">l</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">l</span>.<span class="cm-property">slice</span>(<span class="cm-variable-2">j</span>, <span class="cm-variable-2">j</span> <span class="cm-operator">+</span> <span class="cm-number">3</span>)).<span class="cm-property">slice</span>(<span class="cm-variable-2">i</span>, <span class="cm-variable-2">i</span> <span class="cm-operator">+</span> <span class="cm-number">3</span>))))))
    .<span class="cm-property">every</span>(<span class="cm-def">a</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">a</span>.<span class="cm-property">sort</span>().<span class="cm-property">every</span>((<span class="cm-def">e</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">e</span> <span class="cm-operator">&gt;</span> <span class="cm-variable-2">i</span>)) <span class="cm-operator">?</span> <span class="cm-string">'Finished!'</span> : <span class="cm-string">'Try again!'</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T22:45:51.520+0000" title="Oct 30, 2016, 11:45 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/53db96041f1a7d32dc0004d2/train/javascript/5816775dc2a518857e000139">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/552d2e9d4e364273d90001db/groups/5816786381f76dcc5b002c52">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">doneOrNot</span>(<span class="cm-def">board</span>){
  <span class="cm-keyword">let</span>
    <span class="cm-def">a</span> <span class="cm-operator">=</span> [<span class="cm-meta">...</span><span class="cm-variable">Array</span>(<span class="cm-number">9</span>).<span class="cm-property">keys</span>()],
    <span class="cm-def">s</span> <span class="cm-operator">=</span> [<span class="cm-number">0</span>, <span class="cm-number">3</span>, <span class="cm-number">6</span>]
  <span class="cm-keyword">return</span> <span class="cm-variable-2">board</span>.<span class="cm-property">concat</span>(
      <span class="cm-variable-2">a</span>.<span class="cm-property">map</span>(<span class="cm-def">i</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">board</span>.<span class="cm-property">map</span>(<span class="cm-def">l</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">l</span>[<span class="cm-variable-2">i</span>])),
      [].<span class="cm-property">concat</span>(<span class="cm-meta">...</span><span class="cm-variable-2">s</span>.<span class="cm-property">map</span>(<span class="cm-def">i</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">s</span>.<span class="cm-property">map</span>(<span class="cm-def">j</span> <span class="cm-operator">=&gt;</span> [].<span class="cm-property">concat</span>(
        <span class="cm-meta">...</span><span class="cm-variable-2">board</span>.<span class="cm-property">map</span>(<span class="cm-def">l</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">l</span>.<span class="cm-property">slice</span>(<span class="cm-variable-2">j</span>, <span class="cm-variable-2">j</span> <span class="cm-operator">+</span> <span class="cm-number">3</span>)).<span class="cm-property">slice</span>(<span class="cm-variable-2">i</span>, <span class="cm-variable-2">i</span> <span class="cm-operator">+</span> <span class="cm-number">3</span>))))))
    .<span class="cm-property">every</span>(<span class="cm-def">q</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">a</span>.<span class="cm-property">every</span>(<span class="cm-def">e</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">q</span>.<span class="cm-property">includes</span>(<span class="cm-variable-2">e</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>))) <span class="cm-operator">?</span> <span class="cm-string">'Finished!'</span> : <span class="cm-string">'Try again!'</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T22:36:41.805+0000" title="Oct 30, 2016, 11:36 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/53db96041f1a7d32dc0004d2/train/javascript/581652c835c0296e0800011d">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/552d2e9d4e364273d90001db/groups/5816760c88ca965c39000390">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/52f78966747862fc9a0009ae">Reverse polish notation calculator</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">calc</span>(<span class="cm-def">expr</span>) {
  <span class="cm-keyword">let</span> <span class="cm-def">s</span> <span class="cm-operator">=</span> []
  <span class="cm-keyword">for</span>(<span class="cm-keyword">let</span> <span class="cm-def">t</span> <span class="cm-keyword">of</span> <span class="cm-variable-2">expr</span>.<span class="cm-property">split</span>(<span class="cm-string">" "</span>))
  {
    <span class="cm-keyword">let</span> <span class="cm-def">r</span>,
      [<span class="cm-def">a</span>, <span class="cm-def">b</span>] <span class="cm-operator">=</span> <span class="cm-variable-2">s</span>
    <span class="cm-keyword">switch</span> (<span class="cm-variable-2">t</span>)
    {
      <span class="cm-keyword">case</span> <span class="cm-string">"+"</span>: <span class="cm-variable-2">r</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span> <span class="cm-operator">+</span> <span class="cm-variable-2">a</span>; <span class="cm-keyword">break</span>
      <span class="cm-keyword">case</span> <span class="cm-string">"-"</span>: <span class="cm-variable-2">r</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span> <span class="cm-operator">-</span> <span class="cm-variable-2">a</span>; <span class="cm-keyword">break</span>
      <span class="cm-keyword">case</span> <span class="cm-string">"*"</span>: <span class="cm-variable-2">r</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span> <span class="cm-operator">*</span> <span class="cm-variable-2">a</span>; <span class="cm-keyword">break</span>
      <span class="cm-keyword">case</span> <span class="cm-string">"/"</span>: <span class="cm-variable-2">r</span> <span class="cm-operator">=</span> <span class="cm-variable-2">b</span> <span class="cm-operator">/</span> <span class="cm-variable-2">a</span>; <span class="cm-keyword">break</span>
      <span class="cm-keyword">default</span>:
        <span class="cm-variable-2">s</span>.<span class="cm-property">unshift</span>(<span class="cm-operator">+</span><span class="cm-variable-2">t</span>)
        <span class="cm-keyword">continue</span>
    }
    <span class="cm-variable-2">s</span>.<span class="cm-property">splice</span>(<span class="cm-number">0</span>, <span class="cm-number">2</span>, <span class="cm-variable-2">r</span>)
  }
  <span class="cm-keyword">return</span> <span class="cm-variable-2">s</span>[<span class="cm-number">0</span>]
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T22:28:23.207+0000" title="Oct 30, 2016, 11:28 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52f78966747862fc9a0009ae/train/javascript/58166bd28906324b8b000067">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/52f78a367478624e93000a0e/groups/5816740d81f76d56ed000d8b">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div><a href="/kata/539a0e4d85e3425cb0000a88">A Chain adding function</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">add</span>(<span class="cm-def">n</span>){
  <span class="cm-keyword">let</span> <span class="cm-def">f</span> <span class="cm-operator">=</span> <span class="cm-def">m</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">add</span>(<span class="cm-variable-2">n</span> <span class="cm-operator">+</span> <span class="cm-variable-2">m</span>)
  <span class="cm-variable-2">f</span>.<span class="cm-property">valueOf</span> <span class="cm-operator">=</span> () <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">n</span>
  <span class="cm-keyword">return</span> <span class="cm-variable-2">f</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T20:05:26.500+0000" title="Oct 30, 2016, 9:05 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/539a0e4d85e3425cb0000a88/train/javascript/581651c388ca96edae000132">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/539a0e4e85e3425cb0000a8a/groups/5816528f89063243dd0004e8">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/51675d17e0c1bed195000001">Largest 5 digit number in a series</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">LargestDigits</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">digit5</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">digit5</span> <span class="cm-variable">xs</span> <span class="cm-keyword">=</span> <span class="cm-builtin">maximum</span> (<span class="cm-builtin">map</span> (<span class="cm-builtin">read</span> <span class="cm-builtin">.</span> <span class="cm-builtin">take</span> <span class="cm-number">5</span>) (<span class="cm-builtin">init</span> (<span class="cm-variable">tails</span> <span class="cm-variable">xs</span>)))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T15:12:16.811+0000" title="Oct 30, 2016, 4:12 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/51675d17e0c1bed195000001/train/haskell/58160bb6026d7760b900003c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/547c071d3ac5815b09000043/groups/58160de641e062b2fc00131f">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-blue-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>4 kyu</span></div></div><a href="/kata/5672682212c8ecf83e000050">Twice linear</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">DblLinear</span> <span class="cm-keyword">where</span> 
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">Set</span>

<span class="cm-variable">dblLinear</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Integer</span>
<span class="cm-variable">dblLinear</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-variable">findMin</span> <span class="cm-builtin">$</span> <span class="cm-builtin">iterate</span>
    (<span class="cm-keyword">\</span><span class="cm-variable">s</span> <span class="cm-keyword">-&gt;</span> <span class="cm-keyword">let</span> (<span class="cm-variable">a</span>,<span class="cm-variable">r</span>) <span class="cm-keyword">=</span> <span class="cm-variable">deleteFindMin</span> <span class="cm-variable">s</span> <span class="cm-keyword">in</span> <span class="cm-variable">insert</span> (<span class="cm-number">2</span><span class="cm-builtin">*</span><span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">1</span>) (<span class="cm-variable">insert</span> (<span class="cm-number">3</span><span class="cm-builtin">*</span><span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-number">1</span>) <span class="cm-variable">r</span>))
    (<span class="cm-variable">singleton</span> <span class="cm-number">1</span>)
  <span class="cm-builtin">!!</span> <span class="cm-variable">n</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T14:58:55.053+0000" title="Oct 30, 2016, 3:58 PM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5672682212c8ecf83e000050/train/haskell/5815fb9ec6b6d598ca001cde">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56726e3aedcb876f2600001b/groups/58160ab53bee6c1cc2000081">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5375f921003bf62192000746">Word a10n (abbreviation)</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">A9n</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">Function</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-builtin">Char</span>

<span class="cm-variable">abbreviate</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">abbreviate</span> <span class="cm-variable">str</span> <span class="cm-keyword">=</span> <span class="cm-builtin">concat</span> <span class="cm-builtin">$</span> <span class="cm-builtin">map</span>
  (<span class="cm-keyword">\</span><span class="cm-variable">w</span><span class="cm-keyword">@</span>(<span class="cm-variable">h</span><span class="cm-keyword">:</span><span class="cm-variable">t</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-keyword">let</span> <span class="cm-variable">l</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> <span class="cm-variable">t</span> <span class="cm-keyword">in</span> <span class="cm-keyword">if</span> <span class="cm-variable">l</span> <span class="cm-builtin">&gt;</span> <span class="cm-number">2</span> <span class="cm-keyword">then</span> <span class="cm-variable">h</span> <span class="cm-keyword">:</span> <span class="cm-builtin">show</span> (<span class="cm-variable">l</span> <span class="cm-builtin">-</span> <span class="cm-number">1</span>) <span class="cm-builtin">++</span> [<span class="cm-builtin">last</span> <span class="cm-variable">t</span>] <span class="cm-keyword">else</span> <span class="cm-variable">w</span>)
  (<span class="cm-variable">groupBy</span> (<span class="cm-variable">on</span> (<span class="cm-builtin">&amp;&amp;</span>) <span class="cm-variable">isLetter</span>) <span class="cm-variable">str</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T07:54:18.917+0000" title="Oct 30, 2016, 8:54 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5375f921003bf62192000746/train/haskell/5815a43ac7e37d1bd1000005">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5464d5f42570ecc45200013b/groups/5815a730c7e37d332000001d">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/559536379512a64472000053">Playing with passphrases</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">Kata.</span><span class="cm-variable-2">PlayPass</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-builtin">Char</span>

<span class="cm-variable">playPass</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span>  <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">playPass</span> <span class="cm-variable">s</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">reverse</span> <span class="cm-builtin">$</span> <span class="cm-builtin">map</span> <span class="cm-variable">f</span> <span class="cm-builtin">$</span> <span class="cm-builtin">zip</span> <span class="cm-variable">s</span> <span class="cm-builtin">$</span> <span class="cm-builtin">cycle</span> [<span class="cm-number">0</span>,<span class="cm-number">1</span>] <span class="cm-keyword">where</span>
  <span class="cm-variable">f</span> (<span class="cm-variable">c</span>,<span class="cm-variable">i</span>)
    <span class="cm-variable">|</span> <span class="cm-variable">isAscii</span> <span class="cm-variable">c</span> <span class="cm-builtin">&amp;&amp;</span> <span class="cm-variable">isLetter</span> <span class="cm-variable">c</span> <span class="cm-keyword">=</span> ([<span class="cm-variable">toUpper</span>, <span class="cm-variable">toLower</span>] <span class="cm-builtin">!!</span> <span class="cm-variable">i</span>) (<span class="cm-variable">chr</span> ((((<span class="cm-variable">ord</span> (<span class="cm-variable">toUpper</span> <span class="cm-variable">c</span>)) <span class="cm-builtin">-</span> <span class="cm-number">65</span> <span class="cm-builtin">+</span> <span class="cm-variable">n</span>) `<span class="cm-builtin">mod</span>` <span class="cm-number">26</span>) <span class="cm-builtin">+</span> <span class="cm-number">65</span>))
    <span class="cm-variable">|</span> <span class="cm-variable">isDigit</span> <span class="cm-variable">c</span> <span class="cm-keyword">=</span> <span class="cm-variable">intToDigit</span> (<span class="cm-number">9</span> <span class="cm-builtin">-</span> <span class="cm-variable">digitToInt</span> <span class="cm-variable">c</span>)
    <span class="cm-variable">|</span> <span class="cm-builtin">otherwise</span> <span class="cm-keyword">=</span> <span class="cm-variable">c</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T07:39:08.567+0000" title="Oct 30, 2016, 8:39 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/559536379512a64472000053/train/haskell/58159d1fac9de8158300005c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55954032f4dd101efa000061/groups/5815a3a2293defc826000022">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/56606694ec01347ce800001b">Is this a triangle?</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">isTriangle</span>(<span class="cm-def">a</span>,<span class="cm-def">b</span>,<span class="cm-def">c</span>)
{
   <span class="cm-keyword">return</span> <span class="cm-variable-2">a</span> <span class="cm-operator">+</span> <span class="cm-variable-2">b</span> <span class="cm-operator">&gt;</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable-2">b</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span> <span class="cm-operator">&gt;</span> <span class="cm-variable-2">a</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable-2">c</span> <span class="cm-operator">+</span> <span class="cm-variable-2">a</span> <span class="cm-operator">&gt;</span> <span class="cm-variable-2">b</span>;
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T01:56:24.688+0000" title="Oct 29, 2016, 3:56 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56606694ec01347ce800001b/train/javascript/5814018665d81ccf0a00015d">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5661cc7edaed5a2473000155/groups/56a19d4d9ee067e925000037">Discuss</a></li></ul><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-variable-2">Triangles</span> <span class="cm-keyword">where</span>

<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span> (<span class="cm-variable">sort</span>)

<span class="cm-variable">isTriangle</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Bool</span>
<span class="cm-variable">isTriangle</span> <span class="cm-variable">a</span> <span class="cm-variable">b</span> <span class="cm-variable">c</span> <span class="cm-keyword">=</span> <span class="cm-keyword">let</span> [<span class="cm-variable">x</span>,<span class="cm-variable">y</span>,<span class="cm-variable">z</span>] <span class="cm-keyword">=</span> <span class="cm-variable">sort</span> [<span class="cm-variable">a</span>,<span class="cm-variable">b</span>,<span class="cm-variable">c</span>] <span class="cm-keyword">in</span> <span class="cm-variable">x</span><span class="cm-builtin">+</span><span class="cm-variable">y</span><span class="cm-builtin">&gt;</span><span class="cm-variable">z</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T07:01:16.156+0000" title="Oct 30, 2016, 8:01 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56606694ec01347ce800001b/train/haskell/58159a7606512f69fa0002a1">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56865496339a3ba2b6000042/groups/58159abe06512f69fa0002a6">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5268af3872b786f006000228">Don't rely on luck.</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-variable">Math</span>.<span class="cm-property">floor</span> <span class="cm-operator">=</span> <span class="cm-def">_</span> <span class="cm-operator">=&gt;</span> <span class="cm-number">10</span>
<span class="cm-keyword">var</span> <span class="cm-def">guess</span> <span class="cm-operator">=</span> <span class="cm-number">10</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T06:47:16.142+0000" title="Oct 30, 2016, 7:47 AM GMT+1" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5268af3872b786f006000228/train/javascript/581596db3bc4ba61cd000116">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5268cb3d0d3f01ad23000332/groups/57aa0f9153ba33223e0000bd">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5264d2b162488dc400000001">Stop gninnipS My sdroW!</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">spinWords</span>(){
  <span class="cm-keyword">return</span> <span class="cm-variable-2">arguments</span>[<span class="cm-number">0</span>].<span class="cm-property">split</span>(<span class="cm-string">" "</span>).<span class="cm-property">map</span>(<span class="cm-def">w</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">w</span>.<span class="cm-property">length</span> <span class="cm-operator">&lt;</span> <span class="cm-number">5</span> <span class="cm-operator">?</span> <span class="cm-variable-2">w</span> : <span class="cm-variable-2">w</span>.<span class="cm-property">split</span>(<span class="cm-string">""</span>).<span class="cm-property">reverse</span>().<span class="cm-property">join</span>(<span class="cm-string">""</span>)).<span class="cm-property">join</span>(<span class="cm-string">" "</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T00:27:50.101+0000" title="Oct 30, 2016, 2:27 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5264d2b162488dc400000001/train/javascript/58153c546e3b4083930001b9">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5264d41ce218b86cb90000df/groups/58153ea86e3b407657000254">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/580918e24a85b05ad000010c">SQL Basics: Simple JOIN with COUNT</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> people.<span class="cm-operator">*</span><span class="cm-punctuation">,</span> <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> toy_count <span class="cm-keyword">FROM</span> people <span class="cm-keyword">JOIN</span> toys <span class="cm-keyword">ON</span> people<span class="cm-variable-2">.id</span> <span class="cm-operator">=</span> people_id <span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> people<span class="cm-variable-2">.id</span><span class="cm-punctuation">,</span> people<span class="cm-variable-2">.name</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T00:16:28.990+0000" title="Oct 30, 2016, 2:16 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/580918e24a85b05ad000010c/train/sql/58153976c5c463bc7b0000b6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58092882d6bd8d86e600006a/groups/58153be56e3b403a540009ff">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/58113a64e10b53ec36000293">SQL Basics: Simple EXISTS</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> <span class="cm-operator">*</span> <span class="cm-keyword">FROM</span> departments <span class="cm-keyword">WHERE</span> <span class="cm-keyword">EXISTS</span>
  <span class="cm-bracket">(</span><span class="cm-keyword">SELECT</span> <span class="cm-operator">*</span> <span class="cm-keyword">FROM</span> sales <span class="cm-keyword">WHERE</span> department_id <span class="cm-operator">=</span> departments<span class="cm-variable-2">.id</span> <span class="cm-keyword">AND</span> price <span class="cm-operator">&gt;</span> <span class="cm-number">98</span><span class="cm-bracket">)</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T00:05:48.982+0000" title="Oct 30, 2016, 2:05 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/58113a64e10b53ec36000293/train/sql/581538ca299b77075b0001a5">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58113a6b2956d794800000d8/groups/5815047b6f3dc639e3000055">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/58111f4ee10b5301a7000175">SQL Basics: Simple GROUP BY</a></div><h6>SQL:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="sql"><span class="cm-keyword">SELECT</span> age<span class="cm-punctuation">,</span> <span class="cm-keyword">COUNT</span><span class="cm-bracket">(</span><span class="cm-operator">*</span><span class="cm-bracket">)</span> <span class="cm-keyword">AS</span> people_count <span class="cm-keyword">FROM</span> people <span class="cm-keyword">GROUP</span> <span class="cm-keyword">BY</span> age</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-30T00:02:56.488+0000" title="Oct 30, 2016, 2:02 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/58111f4ee10b5301a7000175/train/sql/58153810d5fae4428e000042">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/58111f557d2592a0b90000ec/groups/5811336e9c044d81c10001e3">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/56b5afb4ed1f6d5fb0000991">Reverse or rotate?</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Revrot</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-builtin">Char</span>

<span class="cm-variable">revRot</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>]
<span class="cm-variable">revRot</span> <span class="cm-variable">strng</span> <span class="cm-variable">sz</span> <span class="cm-keyword">=</span> <span class="cm-keyword">if</span> <span class="cm-variable">sz</span> <span class="cm-builtin">==</span> <span class="cm-number">0</span> <span class="cm-keyword">then</span> <span class="cm-string">""</span> <span class="cm-keyword">else</span> <span class="cm-builtin">concat</span> <span class="cm-builtin">$</span> <span class="cm-builtin">map</span>
  (<span class="cm-keyword">\</span><span class="cm-variable">l</span><span class="cm-keyword">@</span>(<span class="cm-variable">h</span><span class="cm-keyword">:</span><span class="cm-variable">t</span>) <span class="cm-keyword">-&gt;</span> <span class="cm-keyword">if</span> <span class="cm-builtin">odd</span> <span class="cm-builtin">$</span> <span class="cm-builtin">sum</span> <span class="cm-builtin">$</span> <span class="cm-builtin">map</span> <span class="cm-variable">digitToInt</span> <span class="cm-variable">l</span> <span class="cm-keyword">then</span> <span class="cm-variable">t</span><span class="cm-builtin">++</span>[<span class="cm-variable">h</span>] <span class="cm-keyword">else</span> <span class="cm-builtin">reverse</span> <span class="cm-variable">l</span>)
  (<span class="cm-builtin">init</span> [<span class="cm-builtin">take</span> <span class="cm-variable">sz</span> <span class="cm-variable">l</span> <span class="cm-variable">|</span> (<span class="cm-variable">n</span>,<span class="cm-variable">l</span>) <span class="cm-keyword">&lt;-</span> <span class="cm-builtin">zip</span> [<span class="cm-number">0</span><span class="cm-keyword">..</span>] (<span class="cm-variable">tails</span> <span class="cm-variable">strng</span>), <span class="cm-builtin">mod</span> <span class="cm-variable">n</span> <span class="cm-variable">sz</span> <span class="cm-builtin">==</span> <span class="cm-number">0</span>])</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T23:12:26.277+0000" title="Oct 30, 2016, 1:12 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56b5afb4ed1f6d5fb0000991/train/haskell/58152405c5c4633e2b00000c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56b5b393ccc660b0e6000016/groups/58152cf8d5fae4e5e9000467">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/525e5a1cb735154b320002c8">Triangular Treasure</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Triangular</span> <span class="cm-keyword">where</span>

<span class="cm-variable">triangular</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integer</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Integer</span>
<span class="cm-variable">triangular</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-keyword">if</span> <span class="cm-variable">n</span> <span class="cm-builtin">&gt;</span> <span class="cm-number">0</span> <span class="cm-keyword">then</span> <span class="cm-variable">n</span> <span class="cm-builtin">*</span> (<span class="cm-variable">n</span> <span class="cm-builtin">+</span> <span class="cm-number">1</span>) `<span class="cm-builtin">div</span>` <span class="cm-number">2</span> <span class="cm-keyword">else</span> <span class="cm-number">0</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T22:34:21.272+0000" title="Oct 30, 2016, 12:34 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/525e5a1cb735154b320002c8/train/haskell/5815236b299b774a7f000028">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/547ba6f9731acba858000155/groups/547ba6f9731acba858000157">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/5656b6906de340bd1b0000ac">Two to One</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Longest</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">longest</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>] <span class="cm-keyword">-&gt;</span> [<span class="cm-builtin">Char</span>]
<span class="cm-variable">longest</span> <span class="cm-variable">s1</span> <span class="cm-variable">s2</span> <span class="cm-keyword">=</span> <span class="cm-builtin">map</span> <span class="cm-builtin">head</span> <span class="cm-builtin">$</span> <span class="cm-variable">group</span> <span class="cm-builtin">$</span> <span class="cm-variable">sort</span> (<span class="cm-variable">s1</span><span class="cm-builtin">++</span><span class="cm-variable">s2</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T22:31:52.887+0000" title="Oct 30, 2016, 12:31 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5656b6906de340bd1b0000ac/train/haskell/581522acd5fae4f95d0000ab">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/5656beed8f812efcda000002/groups/56a75a6f688b49238c000005">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5626b561280a42ecc50000d1">Take a Number And Sum Its Digits Raised To The Consecutive Powers And ....¡Eureka!!</a></div><h6>C#:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="csharp"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">SumDigPower</span> {
    
    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">long</span>[] <span class="cm-variable">SumDigPow</span>(<span class="cm-type">long</span> <span class="cm-variable">a</span>, <span class="cm-type">long</span> <span class="cm-variable">b</span>) 
    {
        <span class="cm-keyword">var</span> <span class="cm-def">r</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">System</span>.<span class="cm-variable">Collections</span>.<span class="cm-variable">Generic</span>.<span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">long</span><span class="cm-operator">&gt;</span>();
        <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">n</span> <span class="cm-operator">=</span> <span class="cm-variable">a</span>; <span class="cm-variable">n</span> <span class="cm-operator">&lt;=</span> <span class="cm-variable">b</span>; <span class="cm-variable">n</span><span class="cm-operator">++</span>)
        {
          <span class="cm-keyword">var</span> <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-variable">n</span>.<span class="cm-variable">ToString</span>();
          <span class="cm-keyword">var</span> <span class="cm-def">v</span> <span class="cm-operator">=</span> <span class="cm-number">0L</span>;
          <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">s</span>.<span class="cm-variable">Length</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)
            <span class="cm-variable">v</span> <span class="cm-operator">+=</span> (<span class="cm-type">long</span>) <span class="cm-variable">System</span>.<span class="cm-variable">Math</span>.<span class="cm-variable">Pow</span>(<span class="cm-type">char</span>.<span class="cm-variable">GetNumericValue</span>(<span class="cm-variable">s</span>[<span class="cm-variable">i</span>]), <span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>);
          <span class="cm-keyword">if</span> (<span class="cm-variable">v</span> <span class="cm-operator">==</span> <span class="cm-variable">n</span>) <span class="cm-variable">r</span>.<span class="cm-variable">Add</span>(<span class="cm-variable">n</span>);
        }
        <span class="cm-keyword">return</span> <span class="cm-variable">r</span>.<span class="cm-variable">ToArray</span>();
    }
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T03:40:28.239+0000" title="Oct 29, 2016, 5:40 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5626b561280a42ecc50000d1/train/csharp/581414cd56b21bc6b5001432">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/57348875694e19cdf8000023/groups/58141a4cc19087970100000d">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/55d5434f269c0c3f1b000058">Triple trouble</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">tripledouble</span>(<span class="cm-def">num1</span>, <span class="cm-def">num2</span>) {
  <span class="cm-keyword">return</span> <span class="cm-variable">Number</span>(<span class="cm-variable-2">num1</span>.<span class="cm-property">toString</span>().<span class="cm-property">split</span>(<span class="cm-string-2">/(.)\1\1/</span>)
    .<span class="cm-property">some</span>((<span class="cm-def">x</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">i</span> <span class="cm-operator">%</span> <span class="cm-number">2</span> <span class="cm-operator">&amp;&amp;</span> <span class="cm-variable-2">num2</span>.<span class="cm-property">toString</span>().<span class="cm-property">includes</span>(<span class="cm-variable-2">x</span>.<span class="cm-property">repeat</span>(<span class="cm-number">2</span>))))
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T03:01:27.163+0000" title="Oct 29, 2016, 5:01 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55d5434f269c0c3f1b000058/train/javascript/581407c6b77070ba1200004c">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55d5444aa2cb6fae7600015b/groups/5814110d65d81ccf0a0001e3">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/52b757663a95b11b3d00062d">WeIrD StRiNg CaSe</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">toWeirdCase</span>(<span class="cm-def">string</span>){
  <span class="cm-keyword">return</span> <span class="cm-variable-2">string</span>.<span class="cm-property">replace</span>(<span class="cm-string-2">/\b(\w+)\b/g</span>, <span class="cm-def">w</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">w</span>.<span class="cm-property">split</span>(<span class="cm-string">""</span>).<span class="cm-property">map</span>(
    (<span class="cm-def">c</span>, <span class="cm-def">i</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">c</span>[[<span class="cm-string">"toUpperCase"</span>, <span class="cm-string">"toLowerCase"</span>][<span class="cm-variable-2">i</span> <span class="cm-operator">%</span> <span class="cm-number">2</span>]]()).<span class="cm-property">join</span>(<span class="cm-string">""</span>))
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T02:18:46.380+0000" title="Oct 29, 2016, 4:18 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/52b757663a95b11b3d00062d/train/javascript/5814038ac190873d4d00020e">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/52b76f8536d582d13c0006af/groups/58140718c19087e151000245">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/556e0fccc392c527f20000c5">Fibonacci, Tribonacci and friends</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">Xbonacci</span>(<span class="cm-def">signature</span>,<span class="cm-def">n</span>){
  <span class="cm-keyword">let</span>
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">signature</span>
    <span class="cm-variable">r</span> <span class="cm-operator">=</span> []
  <span class="cm-keyword">for</span> (<span class="cm-keyword">let</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">n</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>) {
    <span class="cm-keyword">let</span> [<span class="cm-def">a</span>, <span class="cm-meta">...</span><span class="cm-def">t</span>] <span class="cm-operator">=</span> <span class="cm-variable-2">s</span>
    <span class="cm-variable">r</span>.<span class="cm-property">push</span>(<span class="cm-variable-2">a</span>)
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">t</span>.<span class="cm-property">concat</span>(<span class="cm-variable-2">t</span>.<span class="cm-property">reduce</span>((<span class="cm-def">x</span>, <span class="cm-def">y</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">x</span> <span class="cm-operator">+</span> <span class="cm-variable-2">y</span>, <span class="cm-variable-2">a</span>))
  }
  <span class="cm-keyword">return</span> <span class="cm-variable">r</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T01:52:58.639+0000" title="Oct 29, 2016, 3:52 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/556e0fccc392c527f20000c5/train/javascript/5813f8646e3b40aa79000a8f">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/556ec331b9dbc9fccc000052/groups/5814011f56b21b4af3000234">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/556deca17c58da83c00002db">Tribonacci Sequence</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">tribonacci</span>(<span class="cm-def">signature</span>,<span class="cm-def">n</span>){
  <span class="cm-keyword">let</span>
    <span class="cm-def">s</span> <span class="cm-operator">=</span> <span class="cm-variable-2">signature</span>
    <span class="cm-variable">r</span> <span class="cm-operator">=</span> []
  <span class="cm-keyword">for</span> (<span class="cm-keyword">let</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">n</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>) {
    <span class="cm-keyword">let</span> [<span class="cm-def">a</span>, <span class="cm-def">b</span>, <span class="cm-def">c</span>] <span class="cm-operator">=</span> <span class="cm-variable-2">s</span>
    <span class="cm-variable">r</span>.<span class="cm-property">push</span>(<span class="cm-variable-2">a</span>)
    <span class="cm-variable-2">s</span> <span class="cm-operator">=</span> [<span class="cm-variable-2">b</span>, <span class="cm-variable-2">c</span>, <span class="cm-variable-2">a</span> <span class="cm-operator">+</span> <span class="cm-variable-2">b</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span>]
  }
  <span class="cm-keyword">return</span> <span class="cm-variable">r</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T01:40:09.745+0000" title="Oct 29, 2016, 3:40 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/556deca17c58da83c00002db/train/javascript/5813fc9f6e3b406bad00024a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/556deea911c2362ce3000009/groups/5813fe14c190873cce000a86">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">tribonacci</span>(<span class="cm-def">signature</span>,<span class="cm-def">n</span>){
  <span class="cm-keyword">let</span>
    [<span class="cm-def">a</span>, <span class="cm-def">b</span>, <span class="cm-def">c</span>] <span class="cm-operator">=</span> <span class="cm-variable-2">signature</span>,
    <span class="cm-def">r</span> <span class="cm-operator">=</span> []
  <span class="cm-keyword">for</span> (<span class="cm-keyword">let</span> <span class="cm-def">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable-2">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable-2">n</span>; <span class="cm-variable-2">i</span><span class="cm-operator">++</span>) {
    <span class="cm-variable-2">r</span>.<span class="cm-property">push</span>(<span class="cm-variable-2">a</span>)
    <span class="cm-comment">//[a, b, c] = [b, c, a + b + c]</span>
    <span class="cm-variable-2">c</span> <span class="cm-operator">=</span> <span class="cm-variable-2">a</span> <span class="cm-operator">+</span> <span class="cm-variable-2">b</span> <span class="cm-operator">+</span> <span class="cm-variable-2">c</span>
    <span class="cm-variable-2">b</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">-</span> <span class="cm-variable-2">a</span> <span class="cm-operator">-</span> <span class="cm-variable-2">b</span>
    <span class="cm-variable-2">a</span> <span class="cm-operator">=</span> <span class="cm-variable-2">c</span> <span class="cm-operator">-</span> <span class="cm-variable-2">a</span> <span class="cm-operator">-</span> <span class="cm-variable-2">b</span>
  }
  <span class="cm-keyword">return</span> <span class="cm-variable-2">r</span>
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T01:31:34.998+0000" title="Oct 29, 2016, 3:31 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/556deca17c58da83c00002db/train/javascript/5813f82d6e3b405529000163">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/556deea911c2362ce3000009/groups/5813fc2f6e3b40aa79000aa2">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/554b4ac871d6813a03000035">Highest and Lowest</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">highAndLow</span>(<span class="cm-def">numbers</span>){
  <span class="cm-keyword">let</span> <span class="cm-def">a</span> <span class="cm-operator">=</span> <span class="cm-variable-2">numbers</span>.<span class="cm-property">split</span>(<span class="cm-string">" "</span>)
  <span class="cm-keyword">return</span> <span class="cm-variable-2">a</span>.<span class="cm-property">reduce</span>(
    ([<span class="cm-def">h</span>, <span class="cm-def">l</span>], <span class="cm-def">n</span>) <span class="cm-operator">=&gt;</span> { <span class="cm-keyword">let</span> <span class="cm-def">b</span> <span class="cm-operator">=</span> [<span class="cm-variable-2">h</span>, <span class="cm-variable-2">n</span>, <span class="cm-variable-2">l</span>].<span class="cm-property">sort</span>((<span class="cm-def">x</span>, <span class="cm-def">y</span>) <span class="cm-operator">=&gt;</span> <span class="cm-variable-2">y</span> <span class="cm-operator">-</span> <span class="cm-variable-2">x</span>); <span class="cm-variable-2">b</span>.<span class="cm-property">splice</span>(<span class="cm-number">1</span>, <span class="cm-number">1</span>); <span class="cm-keyword">return</span> <span class="cm-variable-2">b</span> },
    [<span class="cm-variable-2">a</span>[<span class="cm-number">0</span>], <span class="cm-variable-2">a</span>[<span class="cm-number">0</span>]]).<span class="cm-property">join</span>(<span class="cm-string">" "</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T01:14:32.570+0000" title="Oct 29, 2016, 3:14 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/554b4ac871d6813a03000035/train/javascript/5813f45656b21b4af30001be">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55565cd093eb1235210000a0/groups/5813f81cb770702ad3000009">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">highAndLow</span>(<span class="cm-def">numbers</span>){
  <span class="cm-keyword">let</span> <span class="cm-def">a</span> <span class="cm-operator">=</span> <span class="cm-variable-2">numbers</span>.<span class="cm-property">split</span>(<span class="cm-string">" "</span>)
  <span class="cm-keyword">return</span> <span class="cm-variable-2">a</span>.<span class="cm-property">reduce</span>(([<span class="cm-def">h</span>, <span class="cm-def">l</span>], <span class="cm-def">x</span>) <span class="cm-operator">=&gt;</span> [<span class="cm-variable">Math</span>.<span class="cm-property">max</span>(<span class="cm-variable-2">h</span>, <span class="cm-variable-2">x</span>), <span class="cm-variable">Math</span>.<span class="cm-property">min</span>(<span class="cm-variable-2">l</span>, <span class="cm-variable-2">x</span>)], [<span class="cm-variable-2">a</span>[<span class="cm-number">0</span>], <span class="cm-variable-2">a</span>[<span class="cm-number">0</span>]]).<span class="cm-property">join</span>(<span class="cm-string">" "</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T00:56:47.640+0000" title="Oct 29, 2016, 2:56 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/554b4ac871d6813a03000035/train/javascript/5813f14db77070ed72000340">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55565cd093eb1235210000a0/groups/5813f3d656b21bc6b5001336">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/55f8a9c06c018a0d6e000132">Regex validate PIN code</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">validatePIN</span> (<span class="cm-def">pin</span>) {
  <span class="cm-keyword">return</span> <span class="cm-string-2">/^(\d\d){2,3}$/</span>.<span class="cm-property">test</span>(<span class="cm-variable-2">pin</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T00:43:53.988+0000" title="Oct 29, 2016, 2:43 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/55f8a9c06c018a0d6e000132/train/javascript/5813eec76e3b40aa79000a56">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/55f8abdcb692958d4800000f/groups/5666fa46ee3c03c7f8000004">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/525f50e3b73515a6db000b83">Create Phone Number</a></div><h6>JavaScript:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">createPhoneNumber</span>(<span class="cm-def">numbers</span>){
  <span class="cm-keyword">return</span> <span class="cm-variable-2">numbers</span>.<span class="cm-property">join</span>(<span class="cm-string">""</span>).<span class="cm-property">replace</span>(<span class="cm-string-2">/(...)(...)/</span>, <span class="cm-string">"($1) $2-"</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T00:34:58.245+0000" title="Oct 29, 2016, 2:34 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/525f50e3b73515a6db000b83/train/javascript/5813ee4f6e3b40aa79000a50">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/525f50e3b73515a6db000b86/groups/5813eeb9f9588e22330002ce">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="javascript"><span class="cm-keyword">function</span> <span class="cm-def">createPhoneNumber</span>(<span class="cm-def">numbers</span>){
  <span class="cm-keyword">return</span> <span class="cm-variable-2">numbers</span>.<span class="cm-property">join</span>(<span class="cm-string">""</span>).<span class="cm-property">replace</span>(<span class="cm-string-2">/^(...)(...)/</span>, <span class="cm-string">"($1) $2-"</span>)
}</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-29T00:28:52.823+0000" title="Oct 29, 2016, 2:28 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/525f50e3b73515a6db000b83/train/javascript/5813ec2af9588efbdb000a45">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/525f50e3b73515a6db000b86/groups/5813ed67f9588e99cb0001c4">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5287e858c6b5a9678200083c">Does my number look big in this?</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Narcissistic</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">Tuple</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Control.</span><span class="cm-builtin">Applicative</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Control.</span><span class="cm-builtin">Monad</span>

<span class="cm-variable">narcissistic</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integral</span> <span class="cm-variable">n</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable">n</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Bool</span>
<span class="cm-variable">narcissistic</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">sum</span> (<span class="cm-builtin">map</span> (<span class="cm-builtin">^</span> <span class="cm-builtin">length</span> <span class="cm-variable">l</span>) <span class="cm-variable">l</span>) <span class="cm-builtin">==</span> <span class="cm-variable">n</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">l</span> <span class="cm-keyword">=</span> <span class="cm-variable">unfoldr</span> ((<span class="cm-builtin">*&gt;</span>) <span class="cm-builtin">&lt;$&gt;</span> (<span class="cm-variable">guard</span> <span class="cm-builtin">.</span> (<span class="cm-builtin">&gt;</span><span class="cm-number">0</span>)) <span class="cm-builtin">&lt;*&gt;</span> (<span class="cm-builtin">Just</span> <span class="cm-builtin">.</span> <span class="cm-variable">swap</span> <span class="cm-builtin">.</span> (`<span class="cm-builtin">divMod</span>` <span class="cm-number">10</span>))) <span class="cm-variable">n</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T22:54:55.718+0000" title="Oct 29, 2016, 12:54 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5287e858c6b5a9678200083c/train/haskell/5813d516b770702350000993">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/547a84e52d47f7b1b5000039/groups/5813d7ff65d81ccf0a000050">Discuss</a></li></ul><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-variable-2">Narcissistic</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">narcissistic</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Integral</span> <span class="cm-variable">n</span> <span class="cm-keyword">=&gt;</span> <span class="cm-variable">n</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Bool</span>
<span class="cm-variable">narcissistic</span> <span class="cm-variable">n</span> <span class="cm-keyword">=</span> <span class="cm-builtin">sum</span> (<span class="cm-builtin">map</span> (<span class="cm-builtin">^</span> <span class="cm-builtin">length</span> <span class="cm-variable">l</span>) <span class="cm-variable">l</span>) <span class="cm-builtin">==</span> <span class="cm-variable">n</span> <span class="cm-keyword">where</span>
  <span class="cm-variable">l</span> <span class="cm-keyword">=</span> <span class="cm-variable">unfoldr</span> <span class="cm-variable">popDigit</span> <span class="cm-variable">n</span>
  <span class="cm-variable">popDigit</span> <span class="cm-number">0</span> <span class="cm-keyword">=</span> <span class="cm-builtin">Nothing</span>
  <span class="cm-variable">popDigit</span> <span class="cm-variable">x</span> <span class="cm-keyword">=</span> <span class="cm-keyword">let</span> (<span class="cm-variable">a</span>,<span class="cm-variable">b</span>) <span class="cm-keyword">=</span> <span class="cm-builtin">divMod</span> <span class="cm-variable">x</span> <span class="cm-number">10</span> <span class="cm-keyword">in</span> <span class="cm-builtin">Just</span> (<span class="cm-variable">b</span>,<span class="cm-variable">a</span>)</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T22:38:26.461+0000" title="Oct 29, 2016, 12:38 AM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5287e858c6b5a9678200083c/train/haskell/5813c8e1b77070235000006a">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/547a84e52d47f7b1b5000039/groups/5813d3bef9588e99cb0000f2">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/563b662a59afc2b5120000c6">Growth of a Population</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Arge</span> <span class="cm-keyword">where</span>
<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">nbYear</span> <span class="cm-keyword">::</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Double</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">nbYear</span> <span class="cm-variable">p0</span> <span class="cm-variable">percent</span> <span class="cm-variable">aug</span> <span class="cm-variable">p</span> <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> <span class="cm-builtin">$</span> <span class="cm-builtin">takeWhile</span> (<span class="cm-builtin">&lt;</span><span class="cm-variable">p</span>) <span class="cm-builtin">$</span>
  <span class="cm-builtin">iterate</span> (<span class="cm-keyword">\</span><span class="cm-variable">x</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">floor</span> ((<span class="cm-builtin">fromIntegral</span> <span class="cm-variable">x</span>)<span class="cm-builtin">*</span>(<span class="cm-number">1</span><span class="cm-builtin">+</span><span class="cm-variable">percent</span><span class="cm-builtin">/</span><span class="cm-number">100</span>)) <span class="cm-builtin">+</span> <span class="cm-variable">aug</span>) <span class="cm-variable">p0</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T21:50:21.016+0000" title="Oct 28, 2016, 11:50 PM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/563b662a59afc2b5120000c6/train/haskell/5813c2fdc190872eb60004e6">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/563b6a3f59afc2d86f0000e4/groups/5813c84ab770702350000063">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-white-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div><a href="/kata/56747fd5cb988479af000028">Get the Middle Character</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">Getmiddle</span> <span class="cm-keyword">where</span>

<span class="cm-variable">getMiddle</span> <span class="cm-keyword">::</span> <span class="cm-builtin">String</span> <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">String</span>
<span class="cm-variable">getMiddle</span> <span class="cm-variable">s</span> <span class="cm-keyword">=</span>
  <span class="cm-keyword">let</span> (<span class="cm-variable">a</span>,<span class="cm-variable">b</span>) <span class="cm-keyword">=</span> <span class="cm-builtin">length</span> <span class="cm-variable">s</span> `<span class="cm-builtin">divMod</span>` <span class="cm-number">2</span>
  <span class="cm-keyword">in</span> <span class="cm-builtin">take</span> (<span class="cm-number">2</span><span class="cm-builtin">-</span><span class="cm-variable">b</span>) <span class="cm-builtin">$</span> <span class="cm-builtin">drop</span> (<span class="cm-variable">a</span><span class="cm-builtin">+</span><span class="cm-variable">b</span><span class="cm-builtin">-</span><span class="cm-number">1</span>) <span class="cm-variable">s</span></code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T21:19:19.982+0000" title="Oct 28, 2016, 11:19 PM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/56747fd5cb988479af000028/train/haskell/5813bf2df9588e99cb000017">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/567afbaf79d8aa48f2000044/groups/5813c100c190877efb000439">Discuss</a></li></ul></div><div class="list-item-solutions"><div class="item-title"><div class="small-hex is-extra-wide is-inline mr-15px is-yellow-rank" border="false"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><a href="/kata/5679aa472b8f57fb8c000047">Equal Sides Of An Array</a></div><h6>Haskell:</h6><div class="markdown prose max-w-none"><pre><code class="mb-5px" data-language="haskell"><span class="cm-keyword">module</span> <span class="cm-qualifier">Codewars.</span><span class="cm-qualifier">G964.</span><span class="cm-variable-2">FindEven</span> <span class="cm-keyword">where</span>

<span class="cm-keyword">import</span> <span class="cm-qualifier">Data.</span><span class="cm-variable-2">List</span>

<span class="cm-variable">findEvenIndex</span> <span class="cm-keyword">::</span> [<span class="cm-builtin">Int</span>] <span class="cm-keyword">-&gt;</span> <span class="cm-builtin">Int</span>
<span class="cm-variable">findEvenIndex</span> <span class="cm-variable">arr</span> <span class="cm-keyword">=</span>
  <span class="cm-builtin">maybe</span> (<span class="cm-builtin">-</span><span class="cm-number">1</span>) <span class="cm-builtin">id</span>
  <span class="cm-builtin">$</span> <span class="cm-variable">findIndex</span> <span class="cm-builtin">id</span>
  <span class="cm-builtin">$</span> <span class="cm-builtin">zipWith</span> (<span class="cm-builtin">==</span>)
    (<span class="cm-builtin">map</span> <span class="cm-builtin">sum</span> (<span class="cm-variable">inits</span> <span class="cm-variable">arr</span>))
    (<span class="cm-builtin">map</span> <span class="cm-builtin">sum</span> (<span class="cm-builtin">tail</span> (<span class="cm-variable">tails</span> <span class="cm-variable">arr</span>)))</code></pre></div><ul class="bulleted-text mt-2 mb-4"><li><time-ago datetime="2016-10-28T21:09:48.580+0000" title="Oct 28, 2016, 11:09 PM GMT+2" lang="en">5 years ago</time-ago></li><li><span class="bullet"></span><a class="is-alt" href="/kata/5679aa472b8f57fb8c000047/train/haskell/5813b961c190877efb0003d8">Refactor</a></li><li><span class="bullet"></span><a class="is-alt" href="/kata/reviews/56842367877f4411f5000016/groups/5813bea16e3b4087c2000605">Discuss</a></li></ul></div></div></div></div></main><div class="clearfix"></div></div><div class="clearfix"></div><footer class="p-3 text-ui-text mb-0 text-center w-auto h-50px" id="main_footer"><ul class="block list-none mx-auto mb-0 p-0 overflow-hidden space-x-5"><li class="inline-block">© 2021 Codewars</li><li class="inline-block"><a href="/about">About</a></li><li class="inline-block"><a href="https://dev.codewars.com" target="_blank">API</a></li><li class="inline-block"><a href="https://blog.codewars.com" target="_blank">Blog</a></li><li class="inline-block"><a href="/about/privacy">Privacy</a></li><li class="inline-block"><a href="/about/terms-of-service">Terms</a></li><li class="inline-block"><a data-content="info@codewars.com" href="mailto:info@codewars.com" id="contactUs" rel="popover">Contact</a></li><li class="poweredby_link inline-block"><a class="hover:text-current" data-tippy-content="Supercharge your technical hiring with developer assessments." data-tippy-placement="top" href="https://www.qualified.io?utm_source=codewars&amp;utm_medium=web&amp;utm_term=footer" target="_blank"><div class="flex items-baseline justify-center"><span class="pl-1 text-xs inline-block">powered by</span><img class="h-4 inline-block dark:hidden pl-1" src="/assets/logos/qualified-black-b052752a4beaf94810c9d982f495680e2a9eb207824764ef98240ccef15cfbb1.svg" /><img class="h-4 hidden dark:inline-block pl-1" src="/assets/logos/qualified-white-7cba1bde874154ee4f39d50aebd5b7e435f5b21af9884b236a60d9015039e7f0.svg" /></div></a></li></ul></footer><div class="modal" id="confirm_modal" style="display: none"><div class="modal-header"><div class="close" data-dismiss="modal"><i class="icon-moon-x"></i></div><h4>Confirm</h4><div class="clearfix"></div></div><div class="clearfix"></div><div class="modal-body view"></div><div class="modal-footer"><ul class="form-actions"><li class="cancel" data-dismiss="modal"><a class="btn">Cancel</a></li><li class="alt-confirm is-hidden"><a class="btn"></a></li><li class="confirm"><a class="btn is-green"><i class="icon-general-checkmark"></i>Confirm</a></li></ul></div></div></div><div class="is-hidden" data-turbolinks-permanent="" id="template_helpers"><script id="hidden_field" type="template">&lt;input data-bind-id="@id" data-bind-name="@name" data-bind-value="@value" type="hidden" /&gt;</script><script id="input_field" type="template">&lt;div data-bind-class="field_class"&gt;&lt;label data-bind-class="%required &amp;amp;&amp;amp; &amp;#39;required&amp;#39;" data-bind-for="@id" data-bind-if="%label"&gt;&lt;abbr data-bind-if="%required" title="required"&gt;* &lt;/abbr&gt;&lt;span data-bind-html="%label"&gt;&lt;/span&gt;&lt;/label&gt;&lt;div data-bind-class="field_value_class"&gt;&lt;input data-bind-id="@id" data-bind-name="@name" data-bind-type="%type || &amp;#39;text&amp;#39;" data-bind-value="@value | unescape_html || %defaultValue" /&gt;&lt;/div&gt;&lt;include data-bind-each="@errors"&gt;&lt;small data-bind-html="@"&gt;&lt;/small&gt;&lt;/include&gt;&lt;/div&gt;</script><script id="checkbox_field" type="template">&lt;div class="boolean" data-bind-class="field_class"&gt;&lt;div class="field_value"&gt;&lt;div&gt;&lt;input data-bind-name="@name" type="hidden" value="false" /&gt;&lt;label class="checkbox"&gt;&lt;input class="rounded bg-gray-400 dark:bg-gray-600 border-transparent focus:border-transparent focus:bg-gray-400 text-gray-700 focus:ring-1 focus:ring-offset-2 dark:ring-offset-1 focus:ring-gray-500 dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800 boolean" data-bind-checked="@value" data-bind-id="@id" data-bind-name="@name" type="checkbox" value="true" /&gt;&lt;span data-bind-html="%label || @label"&gt;&lt;/span&gt;&lt;/label&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</script><script id="markdown_field" type="template">&lt;div class="is-full-height" data-bind-class="field_class" data-bind-if="%style | eq::&amp;#39;full&amp;#39;"&gt;&lt;div class="markdown-editor is-full-height mb-0"&gt;&lt;div class="tabs is-full-height"&gt;&lt;dl class="tabs is-contained bg-k-40"&gt;&lt;dd class="is-active" data-tippy-content="Edit your message using markdown" data-tippy-placement="top"&gt;&lt;a data-bind-html="{{%label}}" data-bind-if="%label" data-tab="markdown"&gt;&lt;/a&gt;&lt;a data-bind-unless="%label" data-tab="markdown"&gt;&lt;i class="icon-moon-edit "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/dd&gt;&lt;dd data-tippy-content="Preview your comment" data-tippy-placement="right"&gt;&lt;a data-tab="preview"&gt;&lt;i class="icon-moon-preview "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/dd&gt;&lt;dd data-tippy-content="Edit in full-screen mode" data-tippy-placement="left"&gt;&lt;a class="js-expand"&gt;&lt;i class="icon-moon-expand "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;div class="clearfix"&gt;&lt;/div&gt;&lt;ul class="tabs-content is-full-height"&gt;&lt;li class="is-full-height is-active" data-tab="markdown"&gt;&lt;div class="text-editor-container is-full-height"&gt;&lt;textarea class="is-hidden" data-bind-id="@id" data-bind-name="@name" data-bind-value="@value"&gt;&lt;/textarea&gt;&lt;div class="text-editor js-editor has-shadow"&gt;&lt;/div&gt;&lt;div class="editor-msg-container is-hidden"&gt;&lt;div class="alert-box"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class="is-full-height" data-tab="preview"&gt;&lt;div class="panel bg-ui-section is-overflow-auto"&gt;&lt;div class="markdown prose max-w-none"&gt;&lt;p&gt;Your rendered &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank"&gt;github-flavored&lt;/a&gt; markdown will appear here.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-bind-class="field_class" data-bind-if="%style | ne::&amp;#39;full&amp;#39;"&gt;&lt;label data-bind-class="%required &amp;amp;&amp;amp; &amp;#39;required&amp;#39;" data-bind-for="@id" data-bind-if="%label"&gt;&lt;abbr data-bind-if="%required" title="required"&gt;* &lt;/abbr&gt;&lt;span data-bind-html="%label"&gt;&lt;/span&gt;&lt;/label&gt;&lt;div class="markdown-editor is-tall is-low-light" data-bind-class="%markdownEditorClass"&gt;&lt;div class="tabs"&gt;&lt;dl class="tabs is-contained"&gt;&lt;dd class="is-active" data-tippy-content="Edit your message using markdown" data-tippy-placement="top"&gt;&lt;a data-tab="markdown"&gt;&lt;i class="icon-moon-edit "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/dd&gt;&lt;dd data-tippy-content="Preview your comment" data-tippy-placement="right"&gt;&lt;a data-tab="preview"&gt;&lt;i class="icon-moon-preview "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/dd&gt;&lt;dd data-tippy-content="Edit in full-screen mode" data-tippy-placement="right"&gt;&lt;a class="js-expand"&gt;&lt;i class="icon-moon-expand "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;ul class="tabs-content"&gt;&lt;li class="is-full-height is-active" data-tab="markdown"&gt;&lt;div class="text-editor-container is-full-height"&gt;&lt;textarea class="is-hidden" data-bind-id="@id" data-bind-name="@name" data-bind-value="@value"&gt;&lt;/textarea&gt;&lt;div class="text-editor js-editor has-shadow"&gt;&lt;/div&gt;&lt;div class="editor-msg-container is-hidden"&gt;&lt;div class="alert-box"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class="is-full-height" data-tab="preview"&gt;&lt;div class="panel bg-ui-section is-overflow-auto"&gt;&lt;div class="markdown prose max-w-none"&gt;&lt;p&gt;Your rendered &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank"&gt;github-flavored&lt;/a&gt; markdown will appear here.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</script><script id="code_editor_field" type="template">&lt;div class="text-editor-container" data-bind-class="field_class" data-bind-id="{{@id}}_field"&gt;&lt;label data-bind-class="%required &amp;amp;&amp;amp; &amp;#39;required&amp;#39;" data-bind-for="@id" data-bind-if="%label"&gt;&lt;abbr data-bind-if="%required" title="required"&gt;* &lt;/abbr&gt;&lt;span data-bind-html="%label"&gt;&lt;/span&gt;&lt;/label&gt;&lt;textarea class="is-hidden" data-bind-id="@id" data-bind-name="@name" data-bind-value="@value"&gt;&lt;/textarea&gt;&lt;div class="text-editor js-editor has-shadow"&gt;&lt;/div&gt;&lt;div class="commands-container"&gt;&lt;ul class="is-unstyled"&gt;&lt;li class="expand" title="Maximize Editor (esc key)"&gt;&lt;a&gt;&lt;i class="icon-moon-expand "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class="shrink is-hidden" title="Shrink Editor (esc key)"&gt;&lt;a&gt;&lt;i class="icon-moon-collapse "&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="editor-msg-container is-hidden"&gt;&lt;div class="alert-box"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</script></div><div class="p-4 shadow-lg is-hidden" data-turbolinks-permanent="" id="collection_modal" style="display: none;"><view><script type="template">&lt;h3 class="mx-2 mt-2 mb-5 text-base font-bold"&gt;Collect: &lt;span data-bind-html='@current.name'&gt;kata&lt;/span&gt;&lt;/h3&gt;&lt;div class="pl-2" data-bind-if="@loading"&gt;&lt;p&gt;Loading collection data...&lt;/p&gt;&lt;/div&gt;&lt;div data-bind-unless="@loading"&gt;&lt;div class="tabs" data-bind-unless="@adding"&gt;&lt;dl class="tabs"&gt;&lt;dd class="is-active"&gt;&lt;a data-tab="personal"&gt;&lt;i class="icon-moon-plus "&gt;&lt;/i&gt;Add To My Collections&lt;/a&gt;&lt;/dd&gt;&lt;dd data-bind-class="!@recent | hidden_class"&gt;&lt;a data-tab="recent"&gt;&lt;i class="icon-moon-collection "&gt;&lt;/i&gt;Recently Collected In&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;ul class="tabs-content mb-0"&gt;&lt;li class="is-active" data-tab="personal"&gt;&lt;div class="collection-content" data-bind-if="enough_honor?"&gt;&lt;div class="collections" data-bind-if="@collections.length"&gt;&lt;ul&gt;&lt;li data-bind-data-value="@id" data-bind-each="@collections"&gt;&lt;div&gt;&lt;h4&gt;&lt;i class="icon-moon-collection "&gt;&lt;/i&gt;&lt;span data-bind-text="@name"&gt;&lt;/span&gt;&lt;/h4&gt;&lt;div class="info-row"&gt;&lt;span&gt;&lt;i class="icon-moon-compare "&gt;&lt;/i&gt;&lt;span data-bind-text="{{@code_challenges | count | string}} kata"&gt;&lt;/span&gt;&lt;/span&gt;&lt;a data-bind-href="/collections/{{@id}}"&gt;&lt;i class="icon-moon-preview "&gt;&lt;/i&gt;View&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;a class="btn is-dark is-red-text js-add-toggle" data-bind-if="added?"&gt;Remove&lt;/a&gt;&lt;a class="btn is-dark is-green-text js-add-toggle" data-bind-unless="added?"&gt;Add&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div data-bind-unless="@collections.length"&gt;&lt;h5&gt;You have not created any collections yet.&lt;/h5&gt;&lt;p&gt;Collections are a way for you to organize kata so that you can
create your own training routines. Every collection you create is public and
automatically sharable with other warriors. After you have added a few kata to a
collection you and others can train on the kata contained within the collection.&lt;/p&gt;&lt;p&gt;Get started now by &lt;a class="js-add"&gt;creating a new collection&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="collection-content p-15px" data-bind-unless="enough_honor?"&gt;You must wait until you have earned at least 20 honor before you can create new collections.&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;form class="new-collection px-10px" data-bind-if="@adding"&gt;&lt;p&gt;Set the name for your new collection. Remember, this is going to be visible by everyone
so think of something that others will understand.&lt;/p&gt;&lt;input class="mt-4 block w-full rounded-none rounded-l-md sm:text-sm dark:bg-gray-800 focus:outline-none focus:ring-cgray-300 dark:focus:ring-cgray-600 focus:border-cgray-300 dark:focus:border-cgray-600 border-gray-300 dark:border-gray-700" placeholder="New Collection Name" type="text" /&gt;&lt;/form&gt;&lt;div class="collection-footer border-t mt-5"&gt;&lt;a class="btn is-green mr-15px js-create" data-bind-if="@adding"&gt;Create &amp; Add&lt;/a&gt;&lt;a class="btn js-done" data-bind-text="done_label"&gt;&lt;/a&gt;&lt;a class="btn is-green float-right js-add" data-bind-unless="@adding || !enough_honor?"&gt;New Collection&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</script><div class="view"></div></view></div><script>document.addEventListener("turbolinks:load", (event) =&gt; {
  if (typeof gtag === "function") {
    gtag("event", "page_view", {
      page_location: event.data.url,
      page_title: document.title,
      page_path: document.location.pathname
    });
  }
  App.setup({
    env: "production",
    currentUser: JSON.parse("{\"username\":\"ByteEater\",\"email\":\"1981km@gmail.com\",\"role\":\"standard\",\"guest\":false,\"honor\":1437,\"rank\":-3,\"current_language\":\"python\",\"blocked_user_ids\":[],\"blocked_by_user_ids\":[],\"jwt\":\"eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU4MTNiNmViNTZiMjFiMDVkMzAwMDVlOSIsImV4cCI6MTYzMjk0MTgzN30.GG2qvp24vx9D6c1E-eDORTM_9Ss-NP8SXhJ5YIzRVCo\",\"subscriber\":false,\"hideAds\":false,\"id\":\"5813b6eb56b21b05d30005e9\",\"starred_code_challenge_ids\":[],\"can_resolve_comments\":false,\"avatar_tag\":\"\\u003cimg title=\\\"ByteEater\\\" data-tippy-content=\\\"ByteEater\\\" data-tippy-placement=\\\"bottom\\\" src=\\\"/assets/profile-pic-f3a90acafe5c6158424ce6f242a17499e2b65fb6ba2ba27d7b775ed62e2ee949.png\\\" /\\u003e\"}"),
    data: JSON.parse("{\"routes\":{},\"controllerName\":\"users\",\"profile\":{\"username\":\"ByteEater\",\"name\":\"\",\"clan\":\"\",\"isSelf\":true},\"next_rank_color\":\"purple\",\"rank_progress\":17.4}"),
    routes: {"user_profile":"/users/ByteEater","user_stars":"/user/stars","star_code_challenge":"/users/stars/%7Bid%7D","mark_notifications_read":"/users/notifications/mark_read","unread_popup_notifications":"/users/notifications/unread_popups","collections":"/api/v1/collections","collection_code_challenge":"/api/v1/collections/%7BcollectionId%7D/code_challenges/%7Bid%7D","toggle_relationship":"/toggle/5813b6eb56b21b05d30005e9","collection":"/api/v1/collections/%7Bid%7D"},
    pageControllerName: 'Users.ShowController',
    ablyKey: "scNMAQ.WPB3NQ:wcqqMD8xujGV8lHt",
    privateChannelName: "cKEcnw",
  });
}, { once: true });</script><script>document.addEventListener("turbolinks:load", (event) =&gt; {
  if (typeof Intercom === "function" &amp;&amp; Intercom.booted) Intercom("shutdown");
}, { once: true });</script><iframe id="intercom-frame" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important; pointer-events: none;" aria-hidden="true" tabindex="-1" title="Intercom"></iframe></body></html>
